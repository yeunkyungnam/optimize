model MPOptimizer
	uses 'mmxprs', 'mmsystem', 'mmjobs', 'mmsheet'!, 'mmauth'
	options noimplicit
	
	declarations
		INPUT_DIR: string
		OUTPUT_DIR: string
		SAMPLEPLANT: set of string
		DETAILLOG = true
		ZEROVALUE: real
		MAXNODE: integer
		MIPRELSTOP: real
		BIGM: real
		IS_INTEGRAL_WORK: boolean
		IS_COMPLETE_DEMAND: boolean
		MAXBUFF_SYNC: integer
		IS_MODLINE_SPLIT: boolean
		IS_MODTIME_SPLIT: boolean
		PANEL_GOAL: string
		IS_IMPROVE_MARGIN: boolean
		VERSIONID: string
		PLANTYPE: string
		STARTDATE: date
		ENDDATE: date
		MAXTIME: integer
		WEIGHT_FULFILL: real
		WEIGHT_PRIORITY: real
		WEIGHT_LINEPRIORITY: real
		WEIGHT_ITEM: real
		WEIGHT_ITEMGROUP: real
		WEIGHT_SEQUENCE: real
		WEIGHT_EARLYPROD: real
		WEIGHT_ONTIME: real
		WEIGHT_CLOSENESS: real
		IS_PANELPLAN: boolean
		IS_MODULEPLAN: boolean
		PROCESS: set of string
		_ARRAY = "ARRAY"
		_CELL = "CELL"
		_MODULE = "MODULE"
		PLANT: set of string
		CELLLINE: set of string
		CELLLINE_PLANT: array(CELLLINE) of string
		PLANT_CELLLINE: array(PLANT) of set of string
		MODULELINE: set of string
		MODULELINE_PLANT: array(MODULELINE) of string
		PLANT_MODULELINE: array(PLANT) of set of string
		CELLITEMGROUP: set of string
		MODULEITEMGROUP: set of string
		ARRAYITEM: set of string
		CELLITEM: set of string
		CELLITEM_GROUP: array(CELLITEM) of string
		MODULEITEM: set of string
		MODULEITEM_GROUP: array(MODULEITEM) of string
		ARRAYRES: set of string
		MODULEGROUP: set of string
		MODULEITEM_MODULEGROUP: array(MODULEITEM) of string
		MODULERES: set of string
		TIME: range
		TIME_DATE: array(TIME) of date
		TIME_MONTH: array(TIME) of string
		MONTH: set of string
		EXTMONTH: set of string
		STAGE: range
		STAGE_STARTTIME: array(STAGE) of integer
		STAGE_ENDTIME: array(STAGE) of integer
		DEM: set of string
		DEM_EPST: array(DEM) of integer
		DEM_LPET: array(DEM) of integer
		DEM_DUETIME: array(DEM) of integer
		DEM_MINQTY: array(DEM) of real
		DEM_PRIO: array(DEM) of real
		DEM_WEIGHT: array(DEM) of real
		DEM_REDLINE: array(DEM) of boolean
		DEM_SPREAD: array(DEM) of integer
		DEM_ARRAYITEM: array(DEM) of string
		DEM_ARRAYQTY: array(DEM) of real
		DEM_CELLITEM: array(DEM) of string
		DEM_CELLQTY: array(DEM) of real
		DEM_MODULEITEM: array(DEM) of string
		DEM_MODULEQTY: array(DEM) of real
		DEM_STAGE: array(DEM) of integer
		DEM_PLANT: array(DEM) of set of string
		DEM_LINE: array(DEM) of set of string
		DEM_PANELPLANT: array(DEM) of string
		ARRAYCONF: array(PLANT) of set of string
		CELLCONF: array(CELLLINE) of set of string
		CELLPRIORITY: array(CELLLINE, CELLITEM) of real
		CELLWEIGHT: array(CELLLINE, CELLITEM) of real
		MODULECONF: array(MODULELINE) of set of string
		MODULEPRIORITY: array(MODULELINE, MODULEITEM) of real
		MODULEWEIGHT: array(MODULELINE, MODULEITEM) of real
		MODULECONF_AGGLINE: array(PLANT) of set of string
		MODULEPRIORITY_AGGLINE: array(PLANT, MODULEITEM) of real
		MODULEWEIGHT_AGGLINE: array(PLANT, MODULEITEM) of real
		ARRAYLEADTIME: array(DEM,PLANT) of integer
		CELLLEADTIME: array(DEM,PLANT) of integer
		MODULELEADTIME: array(DEM,PLANT) of integer
		ARRAYNOM: array(PLANT,ARRAYRES,MONTH) of real
		ARRAYCONSUME: array(DEM,PLANT,ARRAYRES) of real
		CELLNOM: array(CELLLINE,MONTH) of real
		CELLCONSUME: array(DEM,CELLLINE) of real
		MODULENOM: array(MODULELINE,MONTH) of real
		MODULETACT: array(MODULELINE,MODULEITEM,MONTH) of real
		MODULENOM_AGGLINE: array(PLANT,MONTH) of real
		MODULETACT_AGGLINE: array(PLANT,MODULEITEM,MONTH) of real
		NLIMIT: integer
		RLIMIT: range
		LIMIT_NAME: array(RLIMIT) of string
		LIMIT_PROCESS: array(RLIMIT) of string
		LIMIT_PLANT: array(RLIMIT) of string
		LIMIT_STARTTIME: array(RLIMIT) of integer
		LIMIT_ENDTIME: array(RLIMIT) of integer
		LIMIT_QTY: array(RLIMIT) of integer
		LIMIT_ITEM: array(RLIMIT) of set of string
		MODULERES_LIMIT: array(PLANT,MODULERES,MODULEGROUP,TIME) of real
		ARRAYCALENDAR: array(PLANT,TIME) of real
		ARRAYDOWN: array(PLANT,ARRAYRES,TIME) of real
		ARRAYHOUR: array(PLANT,ARRAYRES,TIME) of real
		CELLCALENDAR: array(PLANT,TIME) of real
		CELLDOWN: array(CELLLINE,TIME) of real
		CELLHOUR: array(CELLLINE,TIME) of real
		MODULECALENDAR: array(PLANT,TIME) of real
		MODULEDOWN: array(MODULELINE,TIME) of real
		MODULEHOUR: array(MODULELINE,TIME) of real
		MODULEHOUR_AGGLINE: array(PLANT,TIME) of real
		MODULEBLOCK: array(MODULELINE,MODULEITEM,TIME) of boolean
		ARRAYFIX: array(DEM,PLANT,TIME) of real
		CELLFIX: array(DEM,CELLLINE,TIME) of real
		MODULEFIX: array(DEM,MODULELINE,TIME) of real
		RPRIO = 1..9
		PRIO_BEGIN: array(RPRIO) of real
		PRIO_END: array(RPRIO) of real
		_i1,_i2,_i3,_i4,_i5,_i6,_i7,_i8,_i9,_i10,_i11,_i12,_i13,_i14,_i15,_i16,_i17,_i18: integer
		_s1,_s2,_s3,_s4,_s5,_s6,_s7,_s8,_s9,_s10,_s11,_s12,_s13,_s14,_s15,_s16,_s17,_s18: string
		_r1,_r2,_r3,_r4,_r5,_r6,_r7,_r8,_r9,_r10,_r11,_r12,_r13,_r14,_r15,_r16,_r17,_r18: real
		NO_PARAM : integer
		RPT_ARRAY: array(DEM,PLANT,TIME) of real
		RPT_CELL: array(DEM,CELLLINE,TIME) of real
		RPT_CELLIFITEM: array(CELLLINE) of integer
		RPT_CELLIFITEMGROUP: array(CELLLINE) of integer
		RPT_ARRAY_FILLRATE: array(PLANT,EXTMONTH) of real
		RPT_ARRAY_DEM: array(PLANT,EXTMONTH) of real
		RPT_ARRAY_WORK: array(PLANT,EXTMONTH) of real
		RPT_ARRAY_UTILRATE: array(PLANT,ARRAYRES,EXTMONTH) of real
		RPT_ARRAY_CAPA: array(PLANT,ARRAYRES,EXTMONTH) of real
		RPT_ARRAY_USED: array(PLANT,ARRAYRES,EXTMONTH) of real
		RPT_CELL_FILLRATE: array(PLANT,EXTMONTH) of real
		RPT_CELL_DEM: array(PLANT,EXTMONTH) of real
		RPT_CELL_WORK: array(PLANT,EXTMONTH) of real
		RPT_CELL_UTILRATE: array(PLANT,EXTMONTH) of real
		RPT_CELL_CAPA: array(PLANT,EXTMONTH) of real
		RPT_CELL_USED: array(PLANT,EXTMONTH) of real
		RPT_PANEL_STATUS: array(PLANT) of real
		RPT_PANEL_TIME: array(PLANT) of real
		RPT_PANEL_GAP: array(PLANT) of real
		RPT_PANEL_NODE: array(PLANT) of integer
		RPT_PANEL_OBJVAL: array(PLANT) of real
		RPT_PANEL_BESTBOUND: array(PLANT) of real
		RPT_PANEL_OBJ_FULFILL: array(PLANT) of real
		RPT_PANEL_OBJ_PRIORITY: array(PLANT) of real
		RPT_PANEL_OBJ_LINEPRIORITY: array(PLANT) of real
		RPT_PANEL_OBJ_ITEM: array(PLANT) of real
		RPT_PANEL_OBJ_ITEMGROUP: array(PLANT) of real
		RPT_PANEL_OBJ_SEQUENCE: array(PLANT) of real
		RPT_PANEL_OBJ_EARLYPROD: array(PLANT) of real
		RPT_PANEL_OBJ_ONTIME: array(PLANT) of real
		RPT_PANEL_OBJ_CLOSENESS: array(PLANT) of real
		RPT3_PANEL_STATUS: array(PLANT,STAGE) of real
		RPT3_PANEL_TIME: array(PLANT,STAGE) of real
		RPT3_PANEL_GAP: array(PLANT,STAGE) of real
		RPT3_PANEL_NODE: array(PLANT,STAGE) of integer
		RPT3_PANEL_OBJVAL: array(PLANT,STAGE) of real
		RPT3_PANEL_BESTBOUND: array(PLANT,STAGE) of real
		RPT3_PANEL_OBJ_FULFILL: array(PLANT,STAGE) of real
		RPT3_PANEL_OBJ_PRIORITY: array(PLANT,STAGE) of real
		RPT3_PANEL_OBJ_LINEPRIORITY: array(PLANT,STAGE) of real
		RPT3_PANEL_OBJ_ITEM: array(PLANT,STAGE) of real
		RPT3_PANEL_OBJ_ITEMGROUP: array(PLANT,STAGE) of real
		RPT3_PANEL_OBJ_SEQUENCE: array(PLANT,STAGE) of real
		RPT3_PANEL_OBJ_EARLYPROD: array(PLANT,STAGE) of real
		RPT3_PANEL_OBJ_ONTIME: array(PLANT,STAGE) of real
		RPT3_PANEL_OBJ_CLOSENESS: array(PLANT,STAGE) of real
		RPT4_PANEL_TIME: array(PLANT) of real
		RPT4_PANEL_NODE: array(PLANT) of integer
		RPT_MODULE: array(DEM,MODULELINE,TIME) of real
		RPT_MODULEIFITEM: array(MODULELINE) of integer
		RPT_MODULEIFITEMGROUP: array(MODULELINE) of integer
		RPT_MODULE_FILLRATE: array(EXTMONTH) of real
		RPT_MODULE_DEM: array(EXTMONTH) of real
		RPT_MODULE_WORK: array(EXTMONTH) of real
		RPT_MODULE_UTILRATE: array(EXTMONTH) of real
		RPT_MODULE_CAPA: array(EXTMONTH) of real
		RPT_MODULE_USED: array(EXTMONTH) of real
		RPT_MODULE_STATUS: array(STAGE) of real
		RPT_MODULE_TIME: array(STAGE) of real
		RPT_MODULE_GAP: array(STAGE) of real
		RPT_MODULE_NODE: array(STAGE) of integer
		RPT_MODULE_OBJVAL: array(STAGE) of real
		RPT_MODULE_BESTBOUND: array(STAGE) of real
		RPT_MODULE_OBJ_FULFILL: array(STAGE) of real
		RPT_MODULE_OBJ_PRIORITY: array(STAGE) of real
		RPT_MODULE_OBJ_LINEWEIGHT: array(STAGE) of real
		RPT_MODULE_OBJ_LINEPRIORITY: array(STAGE) of real
		RPT_MODULE_OBJ_ITEM: array(STAGE) of real
		RPT_MODULE_OBJ_ITEMGROUP: array(STAGE) of real
		RPT_MODULE_OBJ_SEQUENCE: array(STAGE) of real
		RPT_MODULE_OBJ_EARLYPROD: array(STAGE) of real
		RPT_MODULE_OBJ_ONTIME: array(STAGE) of real
		RPT_MODULE_OBJ_CLOSENESS: array(STAGE) of real
		OPT_STATUS: real
		OPT_TIME: real
		OPT_GAP: real
		OPT_NODE: integer
		OPT_OBJVAL: real
		OPT_BESTBOUND: real
		OPT_ARRAY_FILLRATE: real
		OPT_ARRAY_DEM: real
		OPT_ARRAY_WORK: real
		OPT_ARRAY_UTILRATE: array(ARRAYRES) of real
		OPT_ARRAY_CAPA: array(ARRAYRES) of real
		OPT_ARRAY_USED: array(ARRAYRES) of real
		OPT_CELL_FILLRATE: real
		OPT_CELL_DEM: real
		OPT_CELL_WORK: real
		OPT_CELL_UTILRATE: real
		OPT_CELL_CAPA: real
		OPT_CELL_USED: real
		OPT_MODULE_FILLRATE: real
		OPT_MODULE_DEM: real
		OPT_MODULE_WORK: real
		OPT_MODULE_UTILRATE: real
		OPT_MODULE_CAPA: real
		OPT_MODULE_USED: real
		model_panel: array(PLANT,STAGE,1..2) of mpproblem
		model_panelmargin: array(PLANT) of mpproblem
		model_module: array(STAGE) of mpproblem
	end-declarations
	
	setparam("datefmt", "%.y%0m%0d")
	setparam("timefmt", "%0H%0M%0S")
	setparam("datetimefmt", "%.y%0m%0d%0H%0M%0S")
	
	PRIO_BEGIN :: [0,1,2,3,4,5,6,7,8]
	PRIO_END :: [1,2,3,4,5,6,7,8,99]
	
	procedure exit_noread(s:string)
		writeln(s)		
		exit(0)
	end-procedure 
	
	procedure exit_warning(s:string)
		writeln(s)		
		exit(0)
	end-procedure 
	
	function get_time(datestring:string):integer
		returned := date(datestring) - STARTDATE + 1
	end-function
	
	function get_withintime(datestring:string):integer
		returned := get_time(datestring)
		returned := if(returned < getfirst(TIME), getfirst(TIME), returned)
		returned := if(returned > getlast(TIME), getlast(TIME), returned)
	end-function

	function nullfmt(val:real, len:integer):string
		if val >= -ZEROVALUE and val <= ZEROVALUE then
			returned := strfmt("",len)
		else
			returned := strfmt(val,len,0)
		end-if
	end-function
	
	function nullfmt(val:real, len:integer, dec:integer):string
		if val >= -ZEROVALUE and val <= ZEROVALUE then
			returned := strfmt("",len)
		else
			returned := strfmt(val,len,dec)
		end-if
	end-function
	
	function mindate(d1:date, d2:date): date
		if not isvalid(d1) then
			returned := d2
		elif not isvalid(d2) then
			returned := d1
		elif d1 <= d2 then
			returned := d1
		else
			returned := d2
		end-if
	end-function
	
	function maxdate(d1:date, d2:date): date
		if not isvalid(d1) then
			returned := d2
		elif not isvalid(d2) then
			returned := d1
		elif d1 >= d2 then
			returned := d1
		else
			returned := d2
		end-if
	end-function
	
	procedure display_loghead(title:string)
		writeln(80*">", "\n", ">>", floor((76-getsize(title))/2)*" ", title,(76-getsize(title)-floor((76-getsize(title))/2))*" ", ">>", "\n", 80*">", "\n")
	end-procedure
	
	initializations from "INIT_PATH.txt"
		INPUT_DIR
		OUTPUT_DIR
	end-initializations

	writeln("* Path information")
	writeln("> Input directory of work      : ", INPUT_DIR)
	writeln("> Output directory of work     : ", OUTPUT_DIR)
	writeln

	initializations from INPUT_DIR + "IN_OPTION.txt"
		ZEROVALUE
		MAXNODE
		MIPRELSTOP
		BIGM
	end-initializations

	writeln("* Option information")
	writeln("> Zero tolerance of exist      : ", ZEROVALUE)
	writeln("> Maximum node to explore      : ", MAXNODE)
	writeln("> Relative gap to optimal      : ", MIPRELSTOP)
	writeln("> Big M value                  : ", BIGM)
	writeln

	setparam("ZEROTOL", ZEROVALUE)

	initializations from INPUT_DIR + "IN_POLICY.txt"
		IS_INTEGRAL_WORK
		IS_COMPLETE_DEMAND
		MAXBUFF_SYNC
		IS_MODLINE_SPLIT
		IS_MODTIME_SPLIT
		PANEL_GOAL
		IS_IMPROVE_MARGIN
	end-initializations
	
	writeln("* Policy information")
	writeln("> is integrality required      : ", IS_INTEGRAL_WORK)
	writeln("> is demand all or nothing     : ", IS_COMPLETE_DEMAND)
	writeln("> max buffer(days) to sync     : ", MAXBUFF_SYNC)
	writeln("> is MODULE line splittable    : ", IS_MODLINE_SPLIT)
	writeln("> is MODULE time splittable    : ", IS_MODTIME_SPLIT)
	writeln("> Panel Goal (STRONG/WEAK)     : ", PANEL_GOAL)
	writeln("> is margin improve required   : ", IS_IMPROVE_MARGIN)
	writeln
	
	declarations
		T_STARTDATE, T_ENDDATE: string
	end-declarations
	
	initializations from INPUT_DIR + "IN_VERSION.txt"
		VERSIONID
		PLANTYPE
		T_STARTDATE as "STARTDATE"
		T_ENDDATE as "ENDDATE"
		MAXTIME
		WEIGHT_FULFILL
		WEIGHT_PRIORITY
		WEIGHT_LINEPRIORITY
		WEIGHT_ITEM
		WEIGHT_ITEMGROUP
		WEIGHT_SEQUENCE
		WEIGHT_EARLYPROD
		WEIGHT_ONTIME
		WEIGHT_CLOSENESS
	end-initializations

	STARTDATE := date(T_STARTDATE)
	ENDDATE := date(T_ENDDATE)

	writeln("* Version information")
	writeln("> VERSION ID                   : ", VERSIONID)
	writeln("> Type of plan                 : ", PLANTYPE)
	writeln("> START DATE of plan           : ", STARTDATE)
	writeln("> FINISH DATE of plan          : ", ENDDATE)
	writeln("> MAXTIME(seconds) to run      : ", MAXTIME)
	writeln("> WEIGHT of demand fulfillment : ", WEIGHT_FULFILL)
	writeln("> WEIGHT of demand Priority    : ", WEIGHT_PRIORITY)
	writeln("> WEIGHT of line Priority      : ", WEIGHT_LINEPRIORITY)
	writeln("> WEIGHT of item frequency     : ", WEIGHT_ITEM)
	writeln("> WEIGHT of itemgroup freq     : ", WEIGHT_ITEMGROUP)
	writeln("> WEIGHT of order sequence     : ", WEIGHT_SEQUENCE)
	writeln("> WEIGHT of early production   : ", WEIGHT_EARLYPROD)
	writeln("> WEIGHT of within duedate     : ", WEIGHT_ONTIME)
	writeln("> WEIGHT of closeness          : ", WEIGHT_CLOSENESS)
	writeln
	
	if PLANTYPE = "PANEL" then
		PROCESS := {_ARRAY, _CELL}
		IS_PANELPLAN := true
		IS_MODULEPLAN := false
	elif PLANTYPE = "MODULE" then
		PROCESS := {_MODULE}
		IS_PANELPLAN := false
		IS_MODULEPLAN := true
	end-if
	
	if getfstat(INPUT_DIR+"IN_SAMPLEPLANT.txt") <> 0 then
		fopen(INPUT_DIR+"IN_SAMPLEPLANT.txt", F_INPUT)
		NO_PARAM := 1
		readln(_s1)
		
		while (getparam("nbread") = NO_PARAM) do
			SAMPLEPLANT += {_s1}
			readln(_s1)
		end-do
		
		fclose(F_INPUT)
		if getparam("nbread") not in {0,NO_PARAM} then
			exit_noread("Number of argument does not match at IN_SAMPLEPLANT.txt")
		end-if
	end-if
	
	writeln("> Sample Plant set to ", SAMPLEPLANT)
	writeln
	
	fopen(OUTPUT_DIR + "LOG_DATA.txt", F_OUTPUT)
	writeln("> system comment : ", getmodprop(PROP_SYSCOM))
	writeln
	
	fopen(INPUT_DIR+"IN_PLANT.txt", F_INPUT)
	NO_PARAM := 1
	readln(_s1)
	while (getparam("nbread") = NO_PARAM) do
		if _s1 in PLANT then
			writeln(">> ", _s1, " is duplicated PLANT at ", "IN_PLANT.txt")
		else
			PLANT += {_s1}
		end-if
		readln(_s1)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_PLANT.txt")
	end-if
	finalize(PLANT)

	writeln("> PLANT at time ", gettime)
	writeln(strfmt("PLANT",20), "\n", 20*"-")

	forall (p in PLANT)
		writeln(strfmt(p,20))
		writeln
		fopen(INPUT_DIR+"IN_LINE.txt", F_INPUT)
		NO_PARAM := 3
		readln(_s1, _s2, _s3)
		while (getparam("nbread") = NO_PARAM) do
			if _s2 not in PROCESS then
				writeln(">> ", _s2, " is not in PROCESS at ", "IN_LINE.txt")
			elif _s2 = _CELL and _s1 in CELLLINE then
				writeln(">> ", _s1, " is duplicated CELLLINE at ", "IN_LINE.txt")
			elif _s2 = _CELL and _s3 not in PLANT then
				writeln(">> ", _s3, " is not in PLANT at ", "IN_LINE.txt")
			elif _s2 = _MODULE and _s1 in MODULELINE then
				writeln(">> ", _s1, " is duplicated MODULELINE at ", "IN_LINE.txt")
			elif _s2 = _MODULE and _s3 not in PLANT then
				writeln(">> ", _s3, " is not in PLANT at ", "IN_LINE.txt")
			elif _s2 = _CELL then
				CELLLINE += {_s1}
				CELLLINE_PLANT(_s1) := _s3
				PLANT_CELLLINE(_s3) += {_s1}
			elif _s2 = _MODULE then
				MODULELINE += {_s1}
				MODULELINE_PLANT(_s1) := _s3
				PLANT_MODULELINE(_s3) += {_s1}
			end-if
			readln(_s1, _s2, _s3)
		end-do
	finalize(MODULELINE)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_LINE.txt")
	end-if
	fclose(F_INPUT)

	finalize(CELLLINE)
	writeln("> CELLLINE at time ", gettime)
	writeln(strfmt("CELLLINE",20), strfmt("PLANT",20), "\n", 40*"-")

	forall (l in CELLLINE)
		writeln(strfmt(l,20), strfmt(CELLLINE_PLANT(l),20))
	writeln
	writeln("> PLANT_CELLLINE at time ", gettime)
	writeln(strfmt("PLANT",20), " CELLLINE", "\n", 20*"-")
	
	forall (p in PLANT)
		writeln(strfmt(p,20), " ", PLANT_CELLLINE(p))
	writeln
	writeln("> MODULELINE at time ", gettime)
	writeln(strfmt("MODULELINE",40), strfmt("PLANT",20), "\n", 60*"-")
	
	forall (l in MODULELINE)
		writeln(strfmt(l,40), strfmt(MODULELINE_PLANT(l),20))
	writeln
	writeln("> PLANT_MODULELINE at time ", gettime)
	writeln(strfmt("PLANT",20), " MODULELINE", "\n", 20*"-")
	
	forall (p in PLANT)
		writeln(strfmt(p,20), " ", PLANT_MODULELINE(p))
	writeln
	
	fopen(INPUT_DIR+"IN_ITEMGROUP.txt", F_INPUT)
	NO_PARAM := 2
	readln(_s1, _s2)
	while (getparam("nbread") = NO_PARAM) do
		if _s2 not in PROCESS then
			writeln(">> ", _s2, " is not in PROCESS at ", "IN_ITEMGROUP.txt")
		elif _s2 = _CELL and _s1 in CELLITEMGROUP then
			writeln(">> ", _s1, " is duplicated CELLITEMGROUP at ", "IN_ITEMGROUP.txt")
		elif _s2 = _MODULE and _s1 in MODULEITEMGROUP then
			writeln(">> ", _s1, " is duplicated MODULEITEMGROUP at ", "IN_ITEMGROUP.txt")
		elif _s2 = _CELL then
			CELLITEMGROUP += {_s1}
		elif _s2 = _MODULE then
			MODULEITEMGROUP += {_s1}
		end-if
		readln(_s1, _s2)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_ITEMGROUP.txt")
	end-if
	finalize(CELLITEMGROUP)
	finalize(MODULEITEMGROUP)
	
	writeln("> CELLITEMGROUP at time ", gettime)
	writeln(strfmt("CELLITEMGROUP",30), "\n", 30*"-")
	
	forall (ig in CELLITEMGROUP)
		writeln(strfmt(ig,30))
	writeln
	writeln("> MODULEITEMGROUP at time ", gettime)
	writeln(strfmt("MODULEITEMGROUP",30), "\n", 30*"-")

	forall (ig in MODULEITEMGROUP)
		writeln(strfmt(ig,30))
	writeln
	
	fopen(INPUT_DIR+"IN_ITEM.txt", F_INPUT)
	NO_PARAM := 3
	readln(_s1, _s2, _s3)
	while (getparam("nbread") = NO_PARAM) do
		if _s2 not in PROCESS then
			writeln(">> ", _s2, " is not in PROCESS at ", "IN_ITEM.txt")
		elif _s2 = _ARRAY and _s1 in ARRAYITEM then
			writeln(">> ", _s1, " is duplicated ARRAYITEM at ", "IN_ITEM.txt")
		elif _s2 = _CELL and _s1 in CELLITEM then
			writeln(">> ", _s1, " is duplicated CELLITEM at ", "IN_ITEM.txt")
		elif _s2 = _CELL and _s3 not in CELLITEMGROUP then
			writeln(">> ", _s3, " is not in CELLITEMGROUP at ", "IN_ITEM.txt")
		elif _s2 = _MODULE and _s1 in MODULEITEM then
			writeln(">> ", _s1, " is duplicated MODULEITEM at ", "IN_ITEM.txt")
		elif _s2 = _MODULE and _s3 not in MODULEITEMGROUP then
			writeln(">> ", _s3, " is not in MODULEITEMGROUP at ", "IN_ITEM.txt")
		elif _s2 = _ARRAY then
			ARRAYITEM += {_s1}
		elif _s2 = _CELL then
			CELLITEM += {_s1}
			CELLITEM_GROUP(_s1) := _s3
		elif _s2 = _MODULE then
			MODULEITEM += {_s1}
			MODULEITEM_GROUP(_s1) := _s3
		end-if
		readln(_s1, _s2, _s3)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_ITEM.txt")
	end-if
	finalize(ARRAYITEM)
	finalize(CELLITEM)
	finalize(MODULEITEM)

	writeln("> ARRAYITEM at time ", gettime)
	writeln(strfmt("ARRAYITEM",20), strfmt("ARRAYITEM_GROUP",30), "\n", 50*"-")

	forall (i in ARRAYITEM)
		writeln(strfmt(i,20), strfmt("-",30))
	writeln
	writeln("> CELLITEM at time ", gettime)
	writeln(strfmt("CELLITEM",20), strfmt("CELLITEM_GROUP",30), "\n", 50*"-")
	
	forall (i in CELLITEM)
		writeln(strfmt(i,20), strfmt(CELLITEM_GROUP(i),30))
	writeln
	writeln("> MODULEITEM at time ", gettime)
	writeln(strfmt("MODULEITEM",20), strfmt("MODULEITEM_GROUP",30), "\n", 50*"-")
	
	forall (i in MODULEITEM)
		writeln(strfmt(i,20), strfmt(MODULEITEM_GROUP(i),30))
	writeln
	
	fopen(INPUT_DIR+"IN_ARRAYRES.txt", F_INPUT)
	NO_PARAM := 1
	readln(_s1)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 in ARRAYRES then
			writeln(">> ", _s1, " is duplicated ARRAYRES at ", "IN_ARRAYRES.txt")
		else
			ARRAYRES += {_s1}
		end-if
		readln(_s1)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_ARRAYRES.txt")
	end-if
	finalize(ARRAYRES)
	writeln("> ARRAYRES at time ", gettime)
	writeln(strfmt("ARRAYRES",30), "\n", 30*"-")
	
	forall (res in ARRAYRES)
		writeln(strfmt(res,30))
	writeln
	
	fopen(INPUT_DIR+"IN_MODULEGROUP.txt", F_INPUT)
	NO_PARAM := 1
	readln(_s1)
	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 in MODULEGROUP then
			writeln(">> ", _s1, " is duplicated MODULEGROUP at ", "IN_MODULEGROUP.txt")
		else
			MODULEGROUP += {_s1}
		end-if
		readln(_s1)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_MODULEGROUP.txt")
	end-if
	finalize(MODULEGROUP)
	writeln("> MODULEGROUP at time ", gettime)
	writeln(strfmt("MODULEGROUP",30), "\n", 30*"-")
	
	forall (mg in MODULEGROUP)
		writeln(strfmt(mg,30))
	writeln
	
	fopen(INPUT_DIR+"IN_MODULEITEM.txt", F_INPUT)
	NO_PARAM := 2
	readln(_s1, _s2)
	
	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in MODULEITEM then
			writeln(">> ", _s1, " is not in MODULEITEM at ", "IN_MODULEITEM.txt")
		elif _s2 not in MODULEGROUP then
			writeln(">> ", _s2, " is not in MODULEGROUP at ", "IN_MODULEITEM.txt")
		else
			MODULEITEM_MODULEGROUP(_s1) := _s2
		end-if
		readln(_s1, _s2)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_MODULEITEM.txt")
	end-if
	finalize(MODULEGROUP)
	writeln("> MODULEITEM with MODULEGROUP at time ", gettime)
	writeln(strfmt("MODULEITEM",30), strfmt("MODULEGROUP",30), "\n", 60*"-")
	
	forall (i in MODULEITEM | MODULEITEM_MODULEGROUP(i) <> "")
		writeln(strfmt(i,30), strfmt(MODULEITEM_MODULEGROUP(i),30))
	writeln
	fopen(INPUT_DIR+"IN_MODULERES.txt", F_INPUT)
	NO_PARAM := 1
	readln(_s1)

	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 in MODULERES then
			writeln(">> ", _s1, " is duplicated MODULERES at ", "IN_MODULERES.txt")
		else
			MODULERES += {_s1}
		end-if
		readln(_s1)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_MODULERES.txt")
	end-if
	finalize(MODULERES)

	writeln("> MODULERES at time ", gettime)
	writeln(strfmt("MODULERES",30), "\n", 30*"-")

	forall (r in MODULERES)
		writeln(strfmt(r,30))
	writeln
	
	declarations
		T_MONTH: string
	end-declarations
	
	forall (t in 1..(ENDDATE-STARTDATE)+1) do
		TIME += {t}
		TIME_DATE(t) := STARTDATE + t - 1
		if getmonth(TIME_DATE(t)) < 10 then
		T_MONTH := strfmt(getyear(TIME_DATE(t)),4) + "0" + strfmt(getmonth(TIME_DATE(t)),1)
		else
		T_MONTH := strfmt(getyear(TIME_DATE(t)),4) + strfmt(getmonth(TIME_DATE(t)),2)
		end-if
		MONTH += {T_MONTH}
		TIME_MONTH(t) := T_MONTH
	end-do
	finalize(TIME)
	finalize(MONTH)

	EXTMONTH := {"TOTAL"} + MONTH
	finalize(EXTMONTH)

	writeln("> MONTH at time ", gettime)
	writeln(strfmt("MONTH",10), "\n", 10*"-")

	forall (m in MONTH)
		writeln(strfmt(m,10))
	writeln
	writeln("> EXTMONTH at time ", gettime)
	writeln(strfmt("EXTMONTH",10), "\n", 10*"-")

	forall (m in EXTMONTH)
		writeln(strfmt(m,10))
	writeln
	writeln("> TIME at time ", gettime)
	writeln(strfmt("TIME",10), strfmt("DATE",10), strfmt("MONTH",10), "\n", 30*"-")

	forall (t in TIME)
		writeln(strfmt(t,10), "  ", TIME_DATE(t), strfmt(TIME_MONTH(t),10))
	writeln

	fopen(INPUT_DIR+"IN_STAGE.txt", F_INPUT)
	NO_PARAM := 3
	readln(_i1, _s2, _s3)
	
	while (getparam("nbread") = NO_PARAM) do
		if get_time(_s2) < getfirst(TIME) then
			writeln(">> ", _s2, " is not in TIME at ", "IN_STAGE.txt")
		elif get_time(_s3) > getlast(TIME) then
			writeln(">> ", _s3, " is not in TIME at ", "IN_STAGE.txt")
		else
			STAGE_STARTTIME(_i1) := get_time(_s2)
			STAGE_ENDTIME(_i1) := get_time(_s3)
		end-if
		readln(_i1, _s2, _s3)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_STAGE.txt")
	end-if
	finalize(STAGE)
	
	forall (s in STAGE) do
		if s = getfirst(STAGE) and STAGE_STARTTIME(s) <> getfirst(TIME) then
			exit_warning("Start data of first stage is not equal to first date of TIME")
		end-if

		if s = getlast(STAGE) and STAGE_ENDTIME(s) <> getlast(TIME) then
			exit_warning("End data of last stage is not equal to last date of TIME")
		end-if

		if s < getlast(STAGE) and STAGE_ENDTIME(s)+1 <> STAGE_STARTTIME(s+1) then
			exit_warning("End data of stage " + strfmt(s,0) + " is not equal to Start date of stage " + strfmt(s+1,0))
		end-if
	end-do
	
	writeln("> STAGE at time ", gettime)
	writeln(strfmt("STAGE",10), strfmt("STARTTIME",10), strfmt("ENDTIME",10), "\n", 30*"-")
	
	forall (s in STAGE)
		writeln(strfmt(s,10), strfmt(STAGE_STARTTIME(s),10), strfmt(STAGE_ENDTIME(s),10))
	writeln
	
	fopen(INPUT_DIR+"IN_DEM.txt", F_INPUT)
	NO_PARAM := 14
	readln(_s1, _s2, _s3, _s4, _r5, _r6, _s7, _i8, _s9, _r10, _s11, _r12, _s13, _r14)
	while (getparam("nbread") = NO_PARAM) do
		if _s1 in DEM then
			writeln(">> ", _s1, " is duplicated DEM at ", "IN_DEM.txt")
		elif get_time(_s2) > getlast(TIME) then
			writeln(">> ", _s2, " is not in TIME (EPST is later than ENDDATE) at ", "IN_DEM.txt")
		elif get_time(_s3) < getfirst(TIME) and _s3 <> "00000000" then
			writeln(">> ", _s3, " is not in TIME (LPET is earlier than STARTDATE) at ", "IN_DEM.txt")
		elif _r10 > ZEROVALUE and _s9 not in ARRAYITEM then
			writeln(">> ", _s9, " is not in ARRAYITEM at ", "IN_DEM.txt")
		elif _r12 > ZEROVALUE and _s11 not in CELLITEM then
			writeln(">> ", _s11, " is not in CELLITEM at ", "IN_DEM.txt")
		elif _r14 > ZEROVALUE and _s13 not in MODULEITEM then
			writeln(">> ", _s13, " is not in MODULEITEM at ", "IN_DEM.txt")
		elif _r10 <= ZEROVALUE and _r12 <= ZEROVALUE and _r14 <= ZEROVALUE then
			writeln(">> ", _s1, " has no DEMANDQTY at ", "IN_DEM.txt")
		else
			DEM += {_s1}
			DEM_EPST(_s1) := get_withintime(_s2)
			DEM_LPET(_s1) := get_withintime(_s3)
			DEM_DUETIME(_s1) := get_withintime(_s4)
			DEM_MINQTY(_s1) := if(_r5 <= ZEROVALUE, 0, _r5)
			DEM_PRIO(_s1) := _r6
			DEM_WEIGHT(_s1) := round(1/_r6*1000)/1000
			DEM_REDLINE(_s1) := if(_s7 in {"Y","y","YES","Yes","yes"}, true, false)
			DEM_SPREAD(_s1) := _i8
			DEM_ARRAYITEM(_s1) := if(IS_PANELPLAN and _r10 > ZEROVALUE, _s9, "")
			DEM_ARRAYQTY(_s1) := if(IS_PANELPLAN and _r10 > ZEROVALUE, _r10, 0)
			DEM_CELLITEM(_s1) := if(IS_PANELPLAN and _r12 > ZEROVALUE, _s11, "")
			DEM_CELLQTY(_s1) := if(IS_PANELPLAN and _r12 > ZEROVALUE, _r12, 0)
			DEM_MODULEITEM(_s1) := if(IS_MODULEPLAN and _r14 > ZEROVALUE, _s13, "")
			DEM_MODULEQTY(_s1) := if(IS_MODULEPLAN and _r14 > ZEROVALUE, _r14, 0)
		end-if
		readln(_s1, _s2, _s3, _s4, _r5, _r6, _s7, _i8, _s9, _r10, _s11, _r12, _s13, _r14)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_DEM.txt")
	end-if
	finalize(DEM)
	
	writeln("> DEM at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("EPST",10), strfmt("LPET",10), strfmt("DUETIME",10),
			strfmt("MINQTY",10), strfmt("PRIORITY",10), strfmt("WEIGHT",10), strfmt("REDLINE",10), strfmt("SPREAD",10),
			strfmt("ARRAYITEM",20), strfmt("ARRAYQTY",10), strfmt("CELLITEM",20), strfmt("CELLQTY",10),
			strfmt("MODULEITEM",20), strfmt("MODULEQTY",10), "\n", 270*"-")
	
	forall (d in DEM)
		writeln(strfmt(d,100), strfmt(DEM_EPST(d),10), strfmt(DEM_LPET(d),10), strfmt(DEM_DUETIME(d),10),
				strfmt(DEM_MINQTY(d),10), strfmt(DEM_PRIO(d),10), strfmt(DEM_WEIGHT(d),10), strfmt(if(DEM_REDLINE(d),"YES","NO"),10), strfmt(DEM_SPREAD(d),10),
				strfmt(DEM_ARRAYITEM(d),20), strfmt(DEM_ARRAYQTY(d),10,1), strfmt(DEM_CELLITEM(d),20), strfmt(DEM_CELLQTY(d),10,1),
				strfmt(DEM_MODULEITEM(d),20), strfmt(DEM_MODULEQTY(d),10,1))
	writeln
	
	fopen(INPUT_DIR+"IN_CONFIG_ARRAY.txt", F_INPUT)
	NO_PARAM := 2
	readln(_s1, _s2)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in PLANT then
			writeln(">> ", _s1, " is not in PLANT at ", "IN_CONFIG_ARRAY.txt")
		elif _s2 not in ARRAYITEM then
			writeln(">> ", _s2, " is not in ARRAYITEM at ", "IN_CONFIG_ARRAY.txt")
		else
			ARRAYCONF(_s1) += {_s2}
		end-if
		readln(_s1, _s2)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_CONFIG_ARRAY.txt")
	end-if
	
	writeln("> ARRAYCONF at time ", gettime)
	writeln(strfmt("PLANT",20), strfmt("ARRAYITEM",20), "\n", 40*"-")
	
	forall (p in PLANT, i in ARRAYCONF(p))
		writeln(strfmt(p,20), strfmt(i,20))
	writeln
	writeln("> ARRAYCONF count at time ", gettime)
	writeln(strfmt("PLANT",20), strfmt("COUNT",10), "\n", 30*"-")
	
	forall (p in PLANT | count(i in ARRAYCONF(p)) > ZEROVALUE)
		writeln(strfmt(p,20), strfmt(count(i in ARRAYCONF(p)),10))
	writeln
	
	fopen(INPUT_DIR+"IN_CONFIG_CELL.txt", F_INPUT)
	NO_PARAM := 3
	readln(_s1, _s2, _r3)
	
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in CELLLINE then
			writeln(">> ", _s1, " is not in CELLLINE at ", "IN_CONFIG_CELL.txt")
		elif _s2 not in CELLITEM then
			writeln(">> ", _s2, " is not in CELLITEM at ", "IN_CONFIG_CELL.txt")
		else
			CELLCONF(_s1) += {_s2}
			CELLPRIORITY(_s1,_s2) := _r3
			CELLWEIGHT(_s1,_s2) := round(1/_r3*1000)/1000
		end-if
		readln(_s1, _s2, _r3)
	end-do
	fclose(F_INPUT)
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_CONFIG_CELL.txt")
	end-if
	
	writeln("> CELLCONF, CELLPRIORITY at time ", gettime)
	writeln(strfmt("LINE",20), strfmt("CELLITEM",20), strfmt("PRIORITY",10), strfmt("WEIGHT",10), "\n", 60*"-")
	
	forall (l in CELLLINE, i in CELLCONF(l))
		writeln(strfmt(l,20), strfmt(i,20), strfmt(CELLPRIORITY(l,i),10), strfmt(CELLWEIGHT(l,i),10))
	writeln
	writeln("> CELLCONF count at time ", gettime)
	writeln(strfmt("LINE",20), strfmt("COUNT",10), "\n", 30*"-")
	
	forall (l in CELLLINE)
		writeln(strfmt(l,20), strfmt(count(i in CELLCONF(l)),10))
	writeln
	
	fopen(INPUT_DIR+"IN_CONFIG_MODULE.txt", F_INPUT)
	NO_PARAM := 3
	readln(_s1, _s2, _r3)
	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in MODULELINE then
			writeln(">> ", _s1, " is not in MODULELINE at ", "IN_CONFIG_MODULE.txt")
		elif _s2 not in MODULEITEM then
			writeln(">> ", _s2, " is not in MODULEITEM at ", "IN_CONFIG_MODULE.txt")
		else
			MODULECONF(_s1) += {_s2}
			MODULEPRIORITY(_s1,_s2) := _r3
			MODULEWEIGHT(_s1,_s2) := round(1/_r3*1000)/1000
		end-if
		readln(_s1, _s2, _r3)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_CONFIG_MODULE.txt")
	end-if

	writeln("> MODULECONF, MODULEPRIORITY at time ", gettime)
	writeln(strfmt("MODULELINE",40), strfmt("MODULEITEM",20), strfmt("PRIORITY",10), strfmt("WEIGHT",10), "\n", 70*"-")

	forall (l in MODULELINE, i in MODULECONF(l))
		writeln(strfmt(l,40), strfmt(i,20), strfmt(MODULEPRIORITY(l,i),10), strfmt(MODULEWEIGHT(l,i),10))
	writeln
	writeln("> MODULECONF count at time ", gettime)
	writeln(strfmt("MODULELINE",40), strfmt("COUNT",10), "\n", 50*"-")
	
	forall (l in MODULELINE)
		writeln(strfmt(l,40), strfmt(count(i in MODULECONF(l)),10))
	writeln
	
	forall (p in PLANT, l in PLANT_MODULELINE(p), i in MODULECONF(l)) do
		MODULECONF_AGGLINE(p) += {i}
		MODULEPRIORITY_AGGLINE(p,i) := if(MODULEPRIORITY_AGGLINE(p,i) > ZEROVALUE, minlist(MODULEPRIORITY_AGGLINE(p,i), MODULEPRIORITY(l,i)), MODULEPRIORITY(l,i))
		MODULEWEIGHT_AGGLINE(p,i) := round(1/MODULEPRIORITY_AGGLINE(p,i)*1000)/1000
	end-do

	writeln("> MODULECONF_AGGLINE, MODULEPRIORITY_AGGLINE at time ", gettime)
	writeln(strfmt("PLANT",40), strfmt("MODULEITEM",20), strfmt("PRIORITY",10), strfmt("WEIGHT",10), "\n", 70*"-")

	forall (p in PLANT, i in MODULECONF_AGGLINE(p))
		writeln(strfmt(p,40), strfmt(i,20), strfmt(MODULEPRIORITY_AGGLINE(p,i),10), strfmt(MODULEWEIGHT_AGGLINE(p,i),10))
	writeln
	writeln("> MODULECONF_AGGLINE count at time ", gettime)
	writeln(strfmt("PLANT",40), strfmt("COUNT",10), "\n", 50*"-")
	
	forall (p in PLANT)
		writeln(strfmt(p,40), strfmt(count(i in MODULECONF_AGGLINE(p)),10))
	writeln
	
	fopen(INPUT_DIR+"IN_TIMELEAD.txt", F_INPUT)
	NO_PARAM := 4
	readln(_s1, _s2, _s3, _i4)
	while (getparam("nbread") = NO_PARAM) do
		if _s2 not in PROCESS then
			writeln(">> ", _s2, " is not in PROCESS at ", "IN_TIMELEAD.txt")
		elif _s1 not in DEM then
			writeln(">> ", _s1, " is not in DEM at ", "IN_TIMELEAD.txt")
		elif _s3 not in PLANT then
			writeln(">> ", _s3, " is not in PLANT at ", "IN_TIMELEAD.txt")
		elif _s2 = _ARRAY then
			ARRAYLEADTIME(_s1,_s3) := if(DEM_ARRAYITEM(_s1) = "", 0, _i4)
		elif _s2 = _CELL then
			CELLLEADTIME(_s1,_s3) := if(DEM_CELLITEM(_s1) = "", 0, _i4)
		elif _s2 = _MODULE then
			MODULELEADTIME(_s1,_s3) := if(DEM_MODULEITEM(_s1) = "", 0, _i4)
		end-if
		readln(_s1, _s2, _s3, _i4)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_TIMELEAD.txt")
	end-if
	writeln("> ARRAYLEADTIME at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("PLANT",20), strfmt("LEADTIME",10), "\n", 130*"-")

	forall (d in DEM, p in PLANT | ARRAYLEADTIME(d,p) > ZEROVALUE)
		writeln(strfmt(d,100), strfmt(p,20), strfmt(ARRAYLEADTIME(d,p),10))
	writeln
	writeln("> CELLLEADTIME at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("PLANT",20), strfmt("LEADTIME",10), "\n", 130*"-")

	forall (d in DEM, p in PLANT | CELLLEADTIME(d,p) > ZEROVALUE)
		writeln(strfmt(d,100), strfmt(p,20), strfmt(CELLLEADTIME(d,p),10))
	writeln
	writeln("> MODULELEADTIME at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("PLANT",20), strfmt("LEADTIME",10), "\n", 130*"-")
	
	forall (d in DEM, p in PLANT | MODULELEADTIME(d,p) > ZEROVALUE)
		writeln(strfmt(d,100), strfmt(p,20), strfmt(MODULELEADTIME(d,p),10))
	writeln

	forall (d in DEM, s in STAGE | STAGE_STARTTIME(s) <= DEM_DUETIME(d) and DEM_DUETIME(d) <= STAGE_ENDTIME(s))
		DEM_STAGE(d) := s
	writeln("> DEM_STAGE at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("DUETIME",10), strfmt("STAGE",10), "\n", 120*"-")

	forall (d in DEM)
		writeln(strfmt(d,100), strfmt(DEM_DUETIME(d),10), strfmt(DEM_STAGE(d),10))
	writeln
	
	forall (d in DEM | DEM_ARRAYQTY(d) > ZEROVALUE)
		forall (p in PLANT | ARRAYLEADTIME(d,p) > ZEROVALUE and DEM_ARRAYITEM(d) in ARRAYCONF(p))
			DEM_PLANT(d) += {p}
	
	forall (d in DEM | DEM_CELLQTY(d) > ZEROVALUE)
			forall (p in PLANT | CELLLEADTIME(d,p) > ZEROVALUE)
				forall (l in PLANT_CELLLINE(p) | DEM_CELLITEM(d) in CELLCONF(l)) do
					DEM_PLANT(d) += {p}
					DEM_LINE(d) += {l}
				end-do
	
	forall (d in DEM | DEM_MODULEQTY(d) > ZEROVALUE)
		forall (p in PLANT | MODULELEADTIME(d,p) > ZEROVALUE)
			forall (l in PLANT_MODULELINE(p) | DEM_MODULEITEM(d) in MODULECONF(l)) do
				DEM_PLANT(d) += {p}
				DEM_LINE(d) += {l}
			end-do
	
	if IS_PANELPLAN then
		forall (d in DEM | getsize(DEM_PLANT(d)) > 1)
			exit_warning("Demand " + d + " has multiple plants of " + strfmt(getsize(DEM_PLANT(d)),2))
		forall (d in DEM, p in PLANT | p in DEM_PLANT(d))
			DEM_PANELPLANT(d) := p
	end-if
	writeln("> DEM_PLANT at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("ARRAYITEM",20), strfmt("CELLITEM",20), strfmt("MODULEITEM",20),
	strfmt("#_PLANT",10), " DEM_PLANT", "\n", 170*"-")
	
	forall (d in DEM)
		writeln(strfmt(d,100), strfmt(DEM_ARRAYITEM(d),20), strfmt(DEM_CELLITEM(d),20), strfmt(DEM_MODULEITEM(d),20),
	strfmt(getsize(DEM_PLANT(d)),10), " ", DEM_PLANT(d))
	writeln
	writeln("> DEM_LINE at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("ARRAYITEM",20), strfmt("CELLITEM",20), strfmt("MODULEITEM",20),
	strfmt("#_LINE",10), " DEM_LINE", "\n", 170*"-")
	
	forall (d in DEM)
		writeln(strfmt(d,100), strfmt(DEM_ARRAYITEM(d),20), strfmt(DEM_CELLITEM(d),20), strfmt(DEM_MODULEITEM(d),20),
	strfmt(getsize(DEM_LINE(d)),10), " ", DEM_LINE(d))
	writeln
	
	fopen(INPUT_DIR+"IN_CAPA_ARRAY.txt", F_INPUT)
	NO_PARAM := 4
	readln(_s1, _s2, _s3, _r4)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in PLANT then
			writeln(">> ", _s1, " is not in PLANT at ", "IN_CAPA_ARRAY.txt")
		elif _s2 not in ARRAYRES then
			writeln(">> ", _s2, " is not in ARRAYRES at ", "IN_CAPA_ARRAY.txt")
		elif _s3 not in MONTH then
			writeln(">> ", _s3, " is not in MONTH at ", "IN_CAPA_ARRAY.txt")
		else
			ARRAYNOM(_s1,_s2,_s3) := _r4
		end-if
		readln(_s1, _s2, _s3, _r4)
	end-do
	fclose(F_INPUT)
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_CAPA_ARRAY.txt")
	end-if
	
	writeln("> ARRAYNOM at time ", gettime)
	writeln(strfmt("PLANT",20), strfmt("ARRAYRES",30), strfmt("MONTH",10), strfmt("ARRAYNOM",10), "\n", 70*"-")
	
	forall (p in PLANT, res in ARRAYRES, m in MONTH | ARRAYNOM(p,res,m) > ZEROVALUE)
		writeln(strfmt(p,20), strfmt(res,30), strfmt(m,10), strfmt(ARRAYNOM(p,res,m),10,1))
	writeln
	
	fopen(INPUT_DIR+"IN_CAPA_CELL.txt", F_INPUT)
	NO_PARAM := 3
	readln(_s1, _s2, _r3)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in CELLLINE then
		writeln(">> ", _s1, " is not in CELLLINE at ", "IN_CAPA_CELL.txt")
		elif _s2 not in MONTH then
		writeln(">> ", _s2, " is not in MONTH at ", "IN_CAPA_CELL.txt")
		else
		CELLNOM(_s1,_s2) := _r3
		end-if
		readln(_s1, _s2, _r3)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_CAPA_CELL.txt")
	end-if
	writeln("> CELLNOM at time ", gettime)
	writeln(strfmt("CELLLINE",20), strfmt("MONTH",10), strfmt("CELLNOM",10), "\n", 40*"-")
	
	forall (l in CELLLINE, m in MONTH | CELLNOM(l,m) > ZEROVALUE)
		writeln(strfmt(l,20), strfmt(m,10), strfmt(CELLNOM(l,m),10,1))
	writeln
	
	fopen(INPUT_DIR+"IN_CAPA_MODULE.txt", F_INPUT)
	NO_PARAM := 3
	readln(_s1, _s2, _r3)
	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in MODULELINE then
		writeln(">> ", _s1, " is not in MODULELINE at ", "IN_CAPA_MODULE.txt")
		elif _s2 not in MONTH then
		writeln(">> ", _s2, " is not in MONTH at ", "IN_CAPA_MODULE.txt")
		else
		MODULENOM(_s1,_s2) := _r3
		end-if
		readln(_s1, _s2, _r3)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_CAPA_MODULE.txt")
	end-if
	writeln("> MODULENOM at time ", gettime)
	writeln(strfmt("MODULELINE",40), strfmt("MONTH",10), strfmt("MODULENOM",10), "\n", 60*"-")
	
	forall (l in MODULELINE, m in MONTH | MODULENOM(l,m) > ZEROVALUE)
		writeln(strfmt(l,40), strfmt(m,10), strfmt(MODULENOM(l,m),10,1))
	writeln
	
	forall (p in PLANT, m in MONTH)
		MODULENOM_AGGLINE(p,m) := sum(l in PLANT_MODULELINE(p)) MODULENOM(l,m)
	writeln("> MODULENOM_AGGLINE at time ", gettime)
	writeln(strfmt("PLANT",40), strfmt("MONTH",10), strfmt("MODULENOM",10), "\n", 60*"-")
	
	forall (p in PLANT, m in MONTH | MODULENOM_AGGLINE(p,m) > ZEROVALUE)
		writeln(strfmt(p,40), strfmt(m,10), strfmt(MODULENOM_AGGLINE(p,m),10,1))
	writeln
	
	fopen(INPUT_DIR+"IN_CONSUME_ARRAY.txt", F_INPUT)
	NO_PARAM := 4
	readln(_s1, _s2, _s3, _r4)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in DEM then
			writeln(">> ", _s1, " is not in DEM at ", "IN_CONSUME_ARRAY.txt")
		elif _s2 not in PLANT then
			writeln(">> ", _s2, " is not in PLANT at ", "IN_CONSUME_ARRAY.txt")
		elif _s3 not in ARRAYRES then
			writeln(">> ", _s3, " is not in ARRAYRES at ", "IN_CONSUME_ARRAY.txt")
		elif DEM_ARRAYITEM(_s1) not in ARRAYCONF(_s2) then
			writeln(">> ", _s1, " is not in ARRAYCONF at ", "IN_CONSUME_ARRAY.txt")
		else
			ARRAYCONSUME(_s1,_s2,_s3) := _r4
		end-if
		readln(_s1, _s2, _s3, _r4)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_CONSUME_ARRAY.txt")
	end-if
	writeln("> ARRAYCONSUME at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("PLANT",20), strfmt("ARRAYRES",30), strfmt("CONSUME",10), "\n", 160*"-")
	
	forall (d in DEM, p in PLANT, res in ARRAYRES | ARRAYCONSUME(d,p,res) > ZEROVALUE)
		writeln(strfmt(d,100), strfmt(p,20), strfmt(res,30), strfmt(ARRAYCONSUME(d,p,res),10))
	writeln
	fopen(INPUT_DIR+"IN_CONSUME_CELL.txt", F_INPUT)
	NO_PARAM := 3
	readln(_s1, _s2, _r3)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in DEM then
			writeln(">> ", _s1, " is not in DEM at ", "IN_CONSUME_CELL.txt")
		elif _s2 not in CELLLINE then
			writeln(">> ", _s2, " is not in CELLLINE at ", "IN_CONSUME_CELL.txt")
		elif DEM_CELLITEM(_s1) not in CELLCONF(_s2) then
			writeln(">> ", _s1, " is not in CELLCONF at ", "IN_CONSUME_CELL.txt")
		else
			CELLCONSUME(_s1,_s2) := _r3
		end-if
		readln(_s1, _s2, _r3)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_CONSUME_CELL.txt")
	end-if
	writeln("> CELLCONSUME at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("LINE",20), strfmt("CONSUME",10), "\n", 130*"-")

	forall (d in DEM, l in CELLLINE | CELLCONSUME(d,l) > ZEROVALUE)
		writeln(strfmt(d,100), strfmt(l,20), strfmt(CELLCONSUME(d,l),10))
	writeln

	fopen(INPUT_DIR+"IN_TACT_MODULE.txt", F_INPUT)
	NO_PARAM := 4
	readln(_s1, _s2, _s3, _r4)
	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in MODULELINE then
			writeln(">> ", _s1, " is not in MODULELINE at ", "IN_TACT_MODULE.txt")
		elif _s2 not in MODULEITEM then
			writeln(">> ", _s2, " is not in MODULEITEM at ", "IN_TACT_MODULE.txt")
		elif _s2 not in MODULECONF(_s1) then
			writeln(">> ", _s2, " is not in MODULECONF(", _s1, ") at ", "IN_TACT_MODULE.txt")
		elif _s3 not in MONTH then
			writeln(">> ", _s3, " is not in MONTH at ", "IN_TACT_MODULE.txt")
		else
			MODULETACT(_s1,_s2,_s3) := _r4
		end-if
		readln(_s1, _s2, _s3, _r4)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_TACT_MODULE.txt")
	end-if
	writeln("> MODULETACT at time ", gettime)
	writeln(strfmt("MODULELINE",40), strfmt("MODULEITEM",20), strfmt("MONTH",10), strfmt("TACTTIME",10), "\n", 80*"-")

	forall (l in MODULELINE, i in MODULEITEM, m in MONTH | MODULETACT(l,i,m) > ZEROVALUE)
		writeln(strfmt(l,40), strfmt(i,20), strfmt(m,10), strfmt(MODULETACT(l,i,m),10))
	writeln
	
	forall (p in PLANT, l in PLANT_MODULELINE(p), i in MODULEITEM, m in MONTH | MODULETACT(l,i,m) > ZEROVALUE)
		MODULETACT_AGGLINE(p,i,m) := if(MODULETACT_AGGLINE(p,i,m) > ZEROVALUE, maxlist(MODULETACT_AGGLINE(p,i,m), MODULETACT(l,i,m)), MODULETACT(l,i,m))
	writeln("> MODULETACT_AGGLINE at time ", gettime)
	writeln(strfmt("PLANT",40), strfmt("MODULEITEM",20), strfmt("MONTH",10), strfmt("TACTTIME",10), "\n", 80*"-")
	
	forall (p in PLANT, i in MODULEITEM, m in MONTH | MODULETACT_AGGLINE(p,i,m) > ZEROVALUE)
		writeln(strfmt(p,40), strfmt(i,20), strfmt(m,10), strfmt(MODULETACT_AGGLINE(p,i,m),10))
	writeln
	
	fopen(INPUT_DIR+"IN_PRODLIMIT.txt", F_INPUT)
	NO_PARAM := 6
	readln(_s1, _s2, _s3, _s4, _s5, _i6)
	while (getparam("nbread") = NO_PARAM) do
		if _s2 not in PROCESS then
			writeln(">> ", _s2, " is not in PROCESS at ", "IN_PRODLIMIT.txt")
		elif _s2 = _ARRAY and _s3 not in PLANT then
			writeln(">> ", _s3, " is not in PLANT at ", "IN_PRODLIMIT.txt")
		elif _s2 = _CELL and _s3 not in PLANT then
			writeln(">> ", _s3, " is not in PLANT at ", "IN_PRODLIMIT.txt")
		elif get_time(_s4) not in TIME then
			writeln(">> ", _s4, " is not in TIME at ", "IN_PRODLIMIT.txt")
		elif get_time(_s5) not in TIME then
			writeln(">> ", _s5, " is not in TIME at ", "IN_PRODLIMIT.txt")
		else
			NLIMIT += 1
			LIMIT_NAME(NLIMIT) := _s1
			LIMIT_PROCESS(NLIMIT) := _s2
			LIMIT_PLANT(NLIMIT) := _s3
			LIMIT_STARTTIME(NLIMIT) := get_time(_s4)
			LIMIT_ENDTIME(NLIMIT) := get_time(_s5)
			LIMIT_QTY(NLIMIT) := _i6
		end-if
		readln(_s1, _s2, _s3, _s4, _s5, _i6)
	end-do
	fclose(F_INPUT)
	finalize(RLIMIT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_PRODLIMIT.txt")
	end-if
	writeln("> LIMIT at time ", gettime)
	writeln(strfmt("LIMIT",30), strfmt("PROCESS",10), strfmt("PLANT",20),
	strfmt("STARTTIME",10), strfmt("ENDTIME",10), strfmt("QTY",10), "\n", 90*"-")
	
	forall (r in RLIMIT)
		writeln(strfmt(LIMIT_NAME(r),30), strfmt(LIMIT_PROCESS(r),10), strfmt(LIMIT_PLANT(r),20),
	strfmt(LIMIT_STARTTIME(r),10), strfmt(LIMIT_ENDTIME(r),10), strfmt(LIMIT_QTY(r),10))
	writeln
	
	fopen(INPUT_DIR+"IN_PRODLIMIT_ITEM.txt", F_INPUT)
	NO_PARAM := 2
	readln(_s1, _s2)
	while (getparam("nbread") = NO_PARAM) do
		forall (r in RLIMIT | LIMIT_NAME(r) = _s1)
			LIMIT_ITEM(r) += {_s2}
		readln(_s1, _s2)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_PRODLIMIT_ITEM.txt")
	end-if
	writeln("> LIMIT_ITEM at time ", gettime)
	writeln(strfmt("LIMIT",30), strfmt("PROCESS",10), strfmt("PLANT",20),
	strfmt("STARTTIME",10), strfmt("ENDTIME",10), strfmt("QTY",10), strfmt("ITEMlist",10), "\n", 100*"-")

	forall (r in RLIMIT) do
		write(strfmt(LIMIT_NAME(r),30), strfmt(LIMIT_PROCESS(r),10), strfmt(LIMIT_PLANT(r),20),
		strfmt(LIMIT_STARTTIME(r),10), strfmt(LIMIT_ENDTIME(r),10), strfmt(LIMIT_QTY(r),10))
	
		forall (i in LIMIT_ITEM(r))
			write(" ", i)
		writeln
	end-do
	writeln
	
	fopen(INPUT_DIR+"IN_QTY_MODULERES.txt", F_INPUT)
	NO_PARAM := 5
	readln(_s1, _s2, _s3, _s4, _r5)
	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in PLANT then
			writeln(">> ", _s1, " is not in PLANT at ", "IN_QTY_MODULERES.txt")
		elif _s2 not in MODULERES then
			writeln(">> ", _s2, " is not in MODULERES at ", "IN_QTY_MODULERES.txt")
		elif _s3 not in MODULEGROUP then
			writeln(">> ", _s3, " is not in MODULEGROUP at ", "IN_QTY_MODULERES.txt")
		elif get_time(_s4) not in TIME then
			writeln(">> ", _s4, " is not in TIME at ", "IN_QTY_MODULERES.txt")
		else
			MODULERES_LIMIT(_s1,_s2,_s3,get_time(_s4)) := _r5
		end-if
		readln(_s1, _s2, _s3, _s4, _r5)
	end-do
	fclose(F_INPUT)
	finalize(RLIMIT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_QTY_MODULERES.txt")
	end-if
	writeln("> MODULERES_LIMIT at time ", gettime)
	writeln(strfmt("PLANT",20), strfmt("MODULERES",20), strfmt("MODULEGROUP",20),
	strfmt("TIME",10), strfmt("LIMIT",10), "\n", 80*"-")
	
	forall (p in PLANT, r in MODULERES, g in MODULEGROUP, t in TIME | MODULERES_LIMIT(p,r,g,t) > ZEROVALUE)
		writeln(strfmt(p,20), strfmt(r,20), strfmt(g,20), strfmt(t,10), strfmt(MODULERES_LIMIT(p,r,g,t),10))
	writeln
	
	fopen(INPUT_DIR+"IN_CALENDAR.txt", F_INPUT)
	NO_PARAM := 4
	readln(_s1, _s2, _s3, _r4)
	while (getparam("nbread") = NO_PARAM) do
		if _s1 not in PROCESS then
			writeln(">> ", _s1, " is not in PROCESS at ", "IN_CALENDAR.txt")
		elif _s2 not in PLANT then
			writeln(">> ", _s2, " is not in PLANT at ", "IN_CALENDAR.txt")
		elif get_time(_s3) not in TIME then
			writeln(">> ", _s3, " is not in TIME at ", "IN_CALENDAR.txt")
		elif _s1 = _ARRAY then
			ARRAYCALENDAR(_s2,get_time(_s3)) := _r4
		elif _s1 = _CELL then
			CELLCALENDAR(_s2,get_time(_s3)) := _r4
		elif _s1 = _MODULE then
			MODULECALENDAR(_s2,get_time(_s3)) := _r4
		end-if
		readln(_s1, _s2, _s3, _r4)
	end-do
	fclose(F_INPUT)
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_CALENDAR.txt")
	end-if
	writeln("> ARRAYCALENDAR at time ", gettime)
	write(strfmt("PLANT",20))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((20+getsize(TIME)*5)*"-")

	forall (p in PLANT) do
		write(strfmt(p,20))
		forall (t in TIME)
			write(strfmt(ARRAYCALENDAR(p,t),5,1))
		writeln
	end-do
	writeln
	
	writeln("> CELLCALENDAR at time ", gettime)
	write(strfmt("PLANT",20))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((20+getsize(TIME)*5)*"-")
	
	forall (p in PLANT) do
		write(strfmt(p,20))
		forall (t in TIME)
			write(strfmt(CELLCALENDAR(p,t),5,1))
		writeln
	end-do
	writeln
	
	writeln("> MODULECALENDAR at time ", gettime)
	write(strfmt("PLANT",20))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((20+getsize(TIME)*5)*"-")

	forall (p in PLANT) do
		write(strfmt(p,20))
		forall (t in TIME)
			write(strfmt(MODULECALENDAR(p,t),5,1))
		writeln
	end-do
	writeln
	
	fopen(INPUT_DIR+"IN_DOWN_ARRAY.txt", F_INPUT)
	NO_PARAM := 4
	readln(_s1, _s2, _s3, _r4)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in PLANT then
			writeln(">> ", _s1, " is not in PLANT at ", "IN_DOWN_ARRAY.txt")
		elif _s2 not in ARRAYRES then
			writeln(">> ", _s2, " is not in ARRAYRES at ", "IN_DOWN_ARRAY.txt")
		elif get_time(_s3) not in TIME then
			writeln(">> ", _s3, " is not in TIME at ", "IN_DOWN_ARRAY.txt")
		else
			ARRAYDOWN(_s1,_s2,get_time(_s3)) := _r4
		end-if
		readln(_s1, _s2, _s3, _r4)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_DOWN_ARRAY.txt")
	end-if
	writeln("> ARRAYDOWN at time ", gettime)
	write(strfmt("PLANT",20), strfmt("ARRAYRES",30))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((50+getsize(TIME)*5)*"-")
	forall (p in PLANT, res in ARRAYRES) do
		write(strfmt(p,20), strfmt(res,30))
		forall (t in TIME)
			write(strfmt(ARRAYDOWN(p,res,t),5,1))
		writeln
	end-do
	writeln
	
	fopen(INPUT_DIR+"IN_DOWN_CELL.txt", F_INPUT)
	NO_PARAM := 3
	readln(_s1, _s2, _r3)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in CELLLINE then
			writeln(">> ", _s1, " is not in CELLLINE at ", "IN_DOWN_CELL.txt")
		elif get_time(_s2) not in TIME then
			writeln(">> ", _s2, " is not in TIME at ", "IN_DOWN_CELL.txt")
		else
			CELLDOWN(_s1,get_time(_s2)) := _r3
		end-if
		readln(_s1, _s2, _r3)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_DOWN_CELL.txt")
	end-if
	
	writeln("> CELLDOWN at time ", gettime)
	write(strfmt("CELLLINE",20))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((20+getsize(TIME)*5)*"-")
	forall (l in CELLLINE) do
		write(strfmt(l,20))
		forall (t in TIME)
			write(strfmt(CELLDOWN(l,t),5,1))
		writeln
	end-do
	writeln
	
	fopen(INPUT_DIR+"IN_DOWN_MODULE.txt", F_INPUT)
	NO_PARAM := 3
	readln(_s1, _s2, _r3)
	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in MODULELINE then
			writeln(">> ", _s1, " is not in MODULELINE at ", "IN_DOWN_MODULE.txt")
		elif get_time(_s2) not in TIME then
			writeln(">> ", _s2, " is not in TIME at ", "IN_DOWN_MODULE.txt")
		else
			MODULEDOWN(_s1,get_time(_s2)) := _r3
		end-if
		readln(_s1, _s2, _r3)
	end-do
	fclose(F_INPUT)

	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_DOWN_MODULE.txt")
	end-if
	writeln("> MODULEDOWN at time ", gettime)
	write(strfmt("MODULELINE",40))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((40+getsize(TIME)*5)*"-")
	forall (l in MODULELINE) do
		write(strfmt(l,40))
		forall (t in TIME)
			write(strfmt(MODULEDOWN(l,t),5,1))
		writeln
	end-do
	writeln
	
	forall (p in PLANT, res in ARRAYRES, t in TIME | ARRAYNOM(p,res,TIME_MONTH(t)) > ZEROVALUE)
		ARRAYHOUR(p,res,t) := ARRAYNOM(p,res,TIME_MONTH(t)) * (ARRAYCALENDAR(p,t) - ARRAYDOWN(p,res,t))
	writeln("> ARRAYHOUR at time ", gettime)
	write(strfmt("PLANT",20), strfmt("ARRAYRES",30))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((50+getsize(TIME)*5)*"-")
	forall (p in PLANT, res in ARRAYRES | sum(t in TIME) ARRAYHOUR(p,res,t) > ZEROVALUE) do
		write(strfmt(p,20), strfmt(res,30))
		forall (t in TIME)
			write(strfmt(ARRAYHOUR(p,res,t),5,0))
		writeln
	end-do
	writeln

	forall (l in CELLLINE, t in TIME | CELLNOM(l,TIME_MONTH(t)) > ZEROVALUE)
		CELLHOUR(l,t) := CELLNOM(l,TIME_MONTH(t)) * (CELLCALENDAR(CELLLINE_PLANT(l),t) - CELLDOWN(l,t))
	writeln("> CELLHOUR at time ", gettime)
	write(strfmt("CELLLINE",20))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((20+getsize(TIME)*5)*"-")
	forall (l in CELLLINE | sum(t in TIME) CELLHOUR(l,t) > ZEROVALUE) do
		write(strfmt(l,20))
		forall (t in TIME)
			write(strfmt(CELLHOUR(l,t),5,0))
		writeln
	end-do
	writeln

	forall (l in MODULELINE, t in TIME | MODULENOM(l,TIME_MONTH(t)) > ZEROVALUE)
		MODULEHOUR(l,t) := MODULENOM(l,TIME_MONTH(t)) * (MODULECALENDAR(MODULELINE_PLANT(l),t) - MODULEDOWN(l,t))
	writeln("> MODULEHOUR at time ", gettime)
	write(strfmt("MODULELINE",40))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((40+getsize(TIME)*5)*"-")
	forall (l in MODULELINE | sum(t in TIME) MODULEHOUR(l,t) > ZEROVALUE) do
		write(strfmt(l,40))
		forall (t in TIME)
			write(strfmt(MODULEHOUR(l,t),5,0))
		writeln
	end-do
	writeln
	
	forall (p in PLANT, t in TIME)
		MODULEHOUR_AGGLINE(p,t) := sum(l in PLANT_MODULELINE(p)) MODULEHOUR(l,t)
	writeln("> MODULEHOUR_AGGLINE at time ", gettime)
	write(strfmt("PLANT",40))
	forall (t in TIME) write(strfmt(t,5))
	writeln
	writeln((40+getsize(TIME)*5)*"-")
	forall (p in PLANT | sum(t in TIME) MODULEHOUR_AGGLINE(p,t) > ZEROVALUE) do
		write(strfmt(p,40))
		forall (t in TIME)
			write(strfmt(MODULEHOUR_AGGLINE(p,t),5,0))
		writeln
	end-do
	writeln
	
	fopen(INPUT_DIR+"IN_LINEBLOCK.txt", F_INPUT)
	NO_PARAM := 3
	readln(_s1, _s2, _s3)
	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in MODULELINE then
			writeln(">> ", _s1, " is not in MODULELINE at ", "IN_LINEBLOCK.txt")
		elif _s2 not in MODULEITEM then
			writeln(">> ", _s2, " is not in MODULEITEM at ", "IN_LINEBLOCK.txt")
		elif get_time(_s3) not in TIME then
			writeln(">> ", _s3, " is not in TIME at ", "IN_LINEBLOCK.txt")
		else
			MODULEBLOCK(_s1,_s2,get_time(_s3)) := true
		end-if
		readln(_s1, _s2, _s3)
	end-do
	fclose(F_INPUT)
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_LINEBLOCK.txt")
	end-if
	writeln("> MODULEBLOCK at time ", gettime)
	writeln(strfmt("MODULELINE",40), strfmt("MODULEITEM",20), strfmt("TIME",10), strfmt("BLOCK",10), "\n", 80*"-")
	forall (l in MODULELINE, i in MODULEITEM, t in TIME | MODULEBLOCK(l,i,t))
		writeln(strfmt(l,40), strfmt(i,20), strfmt(t,10), strfmt("BLOCK",10))
	writeln
	
	fopen(INPUT_DIR+"IN_FIX_ARRAY.txt", F_INPUT)
	NO_PARAM := 4
	readln(_s1, _s2, _s3, _r4)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in PLANT then
			writeln(">> ", _s1, " is not in PLANT at ", "IN_FIX_ARRAY.txt")
		elif _s2 not in DEM then
			writeln(">> ", _s2, " is not in DEM at ", "IN_FIX_ARRAY.txt")
		elif get_time(_s3) not in TIME then
			writeln(">> ", _s3, " is not in TIME at ", "IN_FIX_ARRAY.txt")
		else
			ARRAYFIX(_s2,_s1,get_time(_s3)) := _r4
		end-if
		readln(_s1, _s2, _s3, _r4)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_FIX_ARRAY.txt")
	end-if
	writeln("> ARRAYFIX at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("PLANT",20), strfmt("TIME",10), strfmt("ARRAYFIX",10), "\n", 140*"-")
	
	forall (d in DEM, p in DEM_PLANT(d), t in TIME | PLANTYPE = "PANEL" and ARRAYFIX(d,p,t) > ZEROVALUE)
		writeln(strfmt(d,100), strfmt(p,20), strfmt(t,10), strfmt(ARRAYFIX(d,p,t),10))
	writeln
	
	fopen(INPUT_DIR+"IN_FIX_CELL.txt", F_INPUT)
	NO_PARAM := 4
	readln(_s1, _s2, _s3, _r4)
	while (IS_PANELPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in CELLLINE then
			writeln(">> ", _s1, " is not in CELLLINE at ", "IN_FIX_CELL.txt")
		elif _s2 not in DEM then
			writeln(">> ", _s2, " is not in DEM at ", "IN_FIX_CELL.txt")
		elif _s1 not in DEM_LINE(_s2) then
			writeln(">> ", _s1, " is not in DEM_LINE at ", "IN_FIX_CELL.txt")
		elif get_time(_s3) not in TIME then
			writeln(">> ", _s3, " is not in TIME at ", "IN_FIX_CELL.txt")
		else
			CELLFIX(_s2,_s1,get_time(_s3)) := _r4
		end-if
		readln(_s1, _s2, _s3, _r4)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_FIX_CELL.txt")
	end-if
	writeln("> CELLFIX at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("CELLLINE",40), strfmt("TIME",10), strfmt("CELLFIX",10), "\n", 160*"-")
	forall (d in DEM, l in DEM_LINE(d), t in TIME | PLANTYPE = "PANEL" and CELLFIX(d,l,t) > ZEROVALUE)
		writeln(strfmt(d,100), strfmt(l,40), strfmt(t,10), strfmt(CELLFIX(d,l,t),10))
	writeln
	
	fopen(INPUT_DIR+"IN_FIX_MODULE.txt", F_INPUT)
	NO_PARAM := 4
	readln(_s1, _s2, _s3, _r4)
	while (IS_MODULEPLAN and getparam("nbread") = NO_PARAM) do
		if _s1 not in MODULELINE then
			writeln(">> ", _s1, " is not in MODULELINE at ", "IN_FIX_MODULE.txt")
		elif _s2 not in DEM then
			writeln(">> ", _s2, " is not in DEM at ", "IN_FIX_MODULE.txt")
		elif _s1 not in DEM_LINE(_s2) then
			writeln(">> ", _s1, " is not in DEM_LINE at ", "IN_FIX_MODULE.txt")
		elif get_time(_s3) not in TIME then
			writeln(">> ", _s3, " is not in TIME at ", "IN_FIX_MODULE.txt")
		else
			MODULEFIX(_s2,_s1,get_time(_s3)) := _r4
		end-if
		readln(_s1, _s2, _s3, _r4)
	end-do
	fclose(F_INPUT)
	
	if getparam("nbread") not in {0,NO_PARAM} then
		exit_noread("Number of argument does not match at IN_FIX_MODULE.txt")
	end-if
	writeln("> MODULEFIX at time ", gettime)
	writeln(strfmt("DEM",100), strfmt("MODULELINE",40), strfmt("TIME",10), strfmt("MODULEFIX",10), "\n", 160*"-")
	forall (d in DEM, l in DEM_LINE(d), t in TIME | PLANTYPE = "MODULE" and MODULEFIX(d,l,t) > ZEROVALUE)
		writeln(strfmt(d,100), strfmt(l,40), strfmt(t,10), strfmt(MODULEFIX(d,l,t),10))
	writeln
	fclose(F_OUTPUT)
	writeln("read_data finished at time ", gettime)
	writeln
	
	display_loghead("Data Summary")
	if IS_PANELPLAN then
		writeln("P> Input Data Summary at time ", gettime)
		writeln(strfmt("CATEGORY",10), strfmt("ARRAY",10), strfmt("CELL",10))
		writeln(30*"-")
		writeln(strfmt("PLANT",10), strfmt(getsize(PLANT),10), strfmt(getsize(PLANT),10))
		writeln(strfmt("LINE",10), strfmt("-",10), strfmt(getsize(CELLLINE),10))
		writeln(strfmt("CONFIG",10), strfmt(count(p in PLANT, i in ARRAYCONF(p)),10),
		strfmt(count(l in CELLLINE, i in CELLCONF(l)),10))
		writeln(strfmt("DEM count",10), strfmt(count(d in DEM | DEM_ARRAYITEM(d)<>""),10),
		strfmt(count(d in DEM | DEM_CELLITEM(d)<>""),10))
		writeln(strfmt("DEM qty",10), strfmt(sum(d in DEM) DEM_ARRAYQTY(d),10,0),
		strfmt(sum(d in DEM) DEM_CELLQTY(d),10,0))
		writeln

		writeln("P> ARRAY Demand Count at time ", gettime)
		write(strfmt("PLANT",10), strfmt("TOTAL",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((20+10*getsize(STAGE))*"-")
		forall (p in PLANT) do
			write(strfmt(p,10), strfmt(count(d in DEM | p in DEM_PLANT(d) and DEM_ARRAYITEM(d)<>""),10))
			forall (s in STAGE)
				write(strfmt(count(d in DEM | p in DEM_PLANT(d) and DEM_STAGE(d)=s and DEM_ARRAYITEM(d)<>""),10))
			writeln
		end-do
		writeln
	
		writeln("P> CELL Demand Count at time ", gettime)
		write(strfmt("PLANT",10), strfmt("TOTAL",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((20+10*getsize(STAGE))*"-")

		forall (p in PLANT) do
			write(strfmt(p,10), strfmt(count(d in DEM | p in DEM_PLANT(d) and DEM_CELLITEM(d)<>""),10))
			forall (s in STAGE)
				write(strfmt(count(d in DEM | p in DEM_PLANT(d) and DEM_STAGE(d)=s and DEM_CELLITEM(d)<>""),10))
			writeln
		end-do
		writeln
	end-if
	
	if IS_MODULEPLAN then
		writeln("M> Input Data Summary at time ", gettime)
		writeln(strfmt("CATEGORY",10), strfmt("MODULE",10))
		writeln(20*"-")
		writeln(strfmt("PLANT",10), strfmt(getsize(PLANT),10))
		writeln(strfmt("LINE",10), strfmt(getsize(MODULELINE),10))
		writeln(strfmt("CONFIG",10), strfmt(count(l in MODULELINE, i in MODULECONF(l)),10))
		writeln(strfmt("DEM count",10), strfmt(count(d in DEM | DEM_MODULEITEM(d)<>""),10))
		writeln(strfmt("DEM qty",10), strfmt(sum(d in DEM) DEM_MODULEQTY(d),10,0))
		writeln
		writeln("M> MODULE Demand Count at time ", gettime)
		write(strfmt("PLANT",10), strfmt("TOTAL",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((20+10*getsize(STAGE))*"-")
		write(strfmt("-",10), strfmt(count(d in DEM | DEM_MODULEITEM(d)<>""),10))
		forall (s in STAGE)
			write(strfmt(count(d in DEM | DEM_STAGE(d)=s and DEM_MODULEITEM(d)<>""),10))
		writeln
		writeln
	end-if
		
	if IS_PANELPLAN then
		fopen(OUTPUT_DIR+"LOG_INFEASIBLE.txt", F_OUTPUT)
		writeln(strfmt("NO",10), strfmt("DEM",100), strfmt("EPST",10), strfmt("LT_ARRAY",10), strfmt("LT_CELL",10), strfmt("LT_MODULE",10),
		strfmt("LASTVALID",10), strfmt("LPET",10), strfmt("DIFF",10), "\n", 180*"-")
		forall (cc as counter, d in DEM | DEM_EPST(d) + ARRAYLEADTIME(d,DEM_PANELPLANT(d)) + CELLLEADTIME(d,DEM_PANELPLANT(d)) +
				MODULELEADTIME(d,DEM_PANELPLANT(d)) - 1 > DEM_LPET(d))
			writeln(strfmt(cc,10), strfmt(d,100), strfmt(DEM_EPST(d),10),
					strfmt(ARRAYLEADTIME(d,DEM_PANELPLANT(d)),10),
					strfmt(CELLLEADTIME(d,DEM_PANELPLANT(d)),10),
					strfmt(MODULELEADTIME(d,DEM_PANELPLANT(d)),10),
					strfmt(DEM_EPST(d) + ARRAYLEADTIME(d,DEM_PANELPLANT(d)) + CELLLEADTIME(d,DEM_PANELPLANT(d)) +
							MODULELEADTIME(d,DEM_PANELPLANT(d)) - 1,10),
					strfmt(DEM_LPET(d),10),
					strfmt(DEM_EPST(d) + ARRAYLEADTIME(d,DEM_PANELPLANT(d)) + CELLLEADTIME(d,DEM_PANELPLANT(d)) +
							MODULELEADTIME(d,DEM_PANELPLANT(d)) - 1 - DEM_LPET(d),10))
			writeln
		fclose(F_OUTPUT)
		writeln("Infeasible Demand recorded at time ", gettime)
		writeln
	end-if
	
	procedure display_panelplant(p:string, fname:string)
		declarations
			n_gap: integer
			gap, s_gap, ss_gap: real
			n_target, n_achieve: integer
			qty_target, qty_achieve: real
			PRIO_TOTAL: array(RPRIO) of real
			array_close, cell_close, module_close: real
		end-declarations
		
		if fname <> "" then
			fopen(OUTPUT_DIR + fname, F_OUTPUT)
		end-if
		
		display_loghead("Plant Result Summary of " + p)
		
		writeln("P_", p, "> Time Summation by Stage at time ", gettime)
		
		write(strfmt("TYPE",20), strfmt("TOTAL",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((30+10*getsize(STAGE))*"-")

		write(strfmt("STATUS",20), strfmt(RPT_PANEL_STATUS(p),10))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_STATUS(p,s),10))
		writeln

		write(strfmt("TIME(sec)",20), strfmt(RPT_PANEL_TIME(p),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_TIME(p,s),10,0))
		writeln

		write(strfmt("GAP%",20), strfmt(RPT_PANEL_GAP(p),9,2), "%")
		forall (s in STAGE) write(strfmt(RPT3_PANEL_GAP(p,s),9,2), "%")
		writeln

		write(strfmt("NODE",20), strfmt(RPT_PANEL_NODE(p),10))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_NODE(p,s),10))
		writeln

		write(strfmt("OBJVAL",20), strfmt(RPT_PANEL_OBJVAL(p),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJVAL(p,s),10,0))
		writeln

		write(strfmt("BOUND",20), strfmt(RPT_PANEL_BESTBOUND(p),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_BESTBOUND(p,s),10,0))
		writeln
		writeln
		writeln("P_", p, "> Objectives Value (not weighted) by Stage at time ", gettime)
		
		write(strfmt("TYPE",20), strfmt("WEIGHT",10), strfmt("W_SUM",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((40+10*getsize(STAGE))*"-")
		
		write(strfmt("OBJ_FULFILL",20), strfmt(WEIGHT_FULFILL,10),
				strfmt(WEIGHT_FULFILL*sum(s in STAGE) RPT3_PANEL_OBJ_FULFILL(p,s),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJ_FULFILL(p,s),10,0))
		writeln
		
		write(strfmt("OBJ_PRIORITY",20), strfmt(WEIGHT_PRIORITY,10),
				strfmt(WEIGHT_PRIORITY*sum(s in STAGE) RPT3_PANEL_OBJ_PRIORITY(p,s),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJ_PRIORITY(p,s),10,0))
		writeln
		
		write(strfmt("OBJ_LINEPRIORITY",20), strfmt(WEIGHT_LINEPRIORITY,10),
				strfmt(WEIGHT_LINEPRIORITY*sum(s in STAGE) RPT3_PANEL_OBJ_LINEPRIORITY(p,s),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJ_LINEPRIORITY(p,s),10,0))
		writeln
		
		write(strfmt("OBJ_ITEM",20), strfmt(WEIGHT_ITEM,10),
				strfmt(WEIGHT_ITEM*sum(s in STAGE) RPT3_PANEL_OBJ_ITEM(p,s),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJ_ITEM(p,s),10,0))
		writeln
		
		write(strfmt("OBJ_ITEMGROUP",20), strfmt(WEIGHT_ITEMGROUP,10),
				strfmt(WEIGHT_ITEMGROUP*sum(s in STAGE) RPT3_PANEL_OBJ_ITEMGROUP(p,s),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJ_ITEMGROUP(p,s),10,0))
		writeln
		
		write(strfmt("OBJ_SEQUENCE",20), strfmt(WEIGHT_SEQUENCE,10),
				strfmt(WEIGHT_SEQUENCE*sum(s in STAGE) RPT3_PANEL_OBJ_SEQUENCE(p,s),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJ_SEQUENCE(p,s),10,0))
		writeln
		
		write(strfmt("OBJ_EARLYPROD",20), strfmt(WEIGHT_EARLYPROD,10),
				strfmt(WEIGHT_EARLYPROD*sum(s in STAGE) RPT3_PANEL_OBJ_EARLYPROD(p,s),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJ_EARLYPROD(p,s),10,0))
		writeln
		
		write(strfmt("OBJ_ONTIME",20), strfmt(WEIGHT_ONTIME,10),
				strfmt(WEIGHT_ONTIME*sum(s in STAGE) RPT3_PANEL_OBJ_ONTIME(p,s),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJ_ONTIME(p,s),10,0))
		writeln
		
		write(strfmt("OBJ_CLOSENESS",20), strfmt(WEIGHT_CLOSENESS,10),
				strfmt(WEIGHT_CLOSENESS*sum(s in STAGE) RPT3_PANEL_OBJ_CLOSENESS(p,s),10,0))
		forall (s in STAGE) write(strfmt(RPT3_PANEL_OBJ_CLOSENESS(p,s),10,0))
		writeln
		writeln
		writeln("P_", p, "> Fill rate summary by priority at time ", gettime)
		
		write(strfmt("PROCESS",20), strfmt("TYPE",10), strfmt("TOTAL",10))
		forall (pri in RPRIO)
			write(strfmt(PRIO_END(pri),10,0))
		writeln
		writeln((40+getsize(RPRIO)*10)*"-")
		
		write(strfmt("ARRAY",20), strfmt("DEMAND",10), strfmt(sum(d in DEM | DEM_PANELPLANT(d)=p) DEM_ARRAYQTY(d),10,0))
		forall (pri in RPRIO) do
			PRIO_TOTAL(pri) := sum(d in DEM | DEM_PANELPLANT(d)=p and PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_ARRAYQTY(d)
			write(strfmt(PRIO_TOTAL(pri),10,0))
		end-do
		writeln

		write(strfmt("",20), strfmt("fill%",10), strfmt((sum(d in DEM, t in TIME) RPT_ARRAY(d,p,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100,10,2))
		forall (pri in RPRIO)
			write(strfmt(if(PRIO_TOTAL(pri)>ZEROVALUE, (sum(d in DEM, t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) RPT_ARRAY(d,p,t))/PRIO_TOTAL(pri)*100, 0),10,2))
		writeln
		writeln((40+getsize(RPRIO)*10)*"-")

		write(strfmt("CELL",20), strfmt("DEMAND",10), strfmt(sum(d in DEM | DEM_PANELPLANT(d)=p) DEM_CELLQTY(d),10,0))
		forall (pri in RPRIO) do
			PRIO_TOTAL(pri) := sum(d in DEM | DEM_PANELPLANT(d)=p and PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_CELLQTY(d)
			write(strfmt(PRIO_TOTAL(pri),10,0))
		end-do
		writeln

		write(strfmt("",20), strfmt("fill%",10), strfmt((sum(d in DEM, l in DEM_LINE(d), t in TIME | CELLLINE_PLANT(l)=p) RPT_CELL(d,l,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100,10,2))
		forall (pri in RPRIO)
			write(strfmt(if(PRIO_TOTAL(pri)>ZEROVALUE, (sum(d in DEM, l in DEM_LINE(d), t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri) and CELLLINE_PLANT(l)=p) RPT_CELL(d,l,t))/PRIO_TOTAL(pri)*100, 0),10,2))
		writeln
		writeln
		writeln("P_", p, "> Work Summary by Month at time ", gettime)

		write(strfmt("PROCESS",40), strfmt("TYPE",10), strfmt("TOTAL",10))
		forall (m in MONTH) write(strfmt(m,10))
		writeln
		writeln((60+getsize(MONTH)*10)*"-")

		write(strfmt("ARRAYwork",40), strfmt("fill%",10), strfmt(RPT_ARRAY_FILLRATE(p,"TOTAL"),9,2), "%")
		forall (m in MONTH) write(strfmt(RPT_ARRAY_FILLRATE(p,m),9,2), "%")
		writeln

		write(strfmt("",40), strfmt("DEM",10), strfmt(RPT_ARRAY_DEM(p,"TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_ARRAY_DEM(p,m),10,0))
		writeln

		write(strfmt("",40), strfmt("work",10), strfmt(RPT_ARRAY_WORK(p,"TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_ARRAY_WORK(p,m),10,0))
		writeln
		writeln((60+getsize(MONTH)*10)*"-")

		forall (res in ARRAYRES | sum(month in MONTH) ARRAYNOM(p,res,month) > ZEROVALUE) do
			write(strfmt("ARRAYutil:"+res,40), strfmt("util%",10), strfmt(RPT_ARRAY_UTILRATE(p,res,"TOTAL"),9,2), "%")
			forall (m in MONTH) write(strfmt(RPT_ARRAY_UTILRATE(p,res,m),9,2), "%")
			writeln

			write(strfmt("",40), strfmt("CAPA",10), strfmt(RPT_ARRAY_CAPA(p,res,"TOTAL"),10,0))
			forall (m in MONTH) write(strfmt(RPT_ARRAY_CAPA(p,res,m),10,0))
			writeln
			
			write(strfmt("",40), strfmt("used",10), strfmt(RPT_ARRAY_USED(p,res,"TOTAL"),10,0))
			forall (m in MONTH) write(strfmt(RPT_ARRAY_USED(p,res,m),10,0))
			writeln
		end-do
		writeln((60+getsize(MONTH)*10)*"-")

		write(strfmt("CELLwork",40), strfmt("fill%",10), strfmt(RPT_CELL_FILLRATE(p,"TOTAL"),9,2), "%")
		forall (m in MONTH) write(strfmt(RPT_CELL_FILLRATE(p,m),9,2), "%")
		writeln

		write(strfmt("",40), strfmt("DEM",10), strfmt(RPT_CELL_DEM(p,"TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_CELL_DEM(p,m),10,0))
		writeln

		write(strfmt("",40), strfmt("work",10), strfmt(RPT_CELL_WORK(p,"TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_CELL_WORK(p,m),10,0))
		writeln
		writeln((60+getsize(MONTH)*10)*"-")

		write(strfmt("CELLutil",40), strfmt("util%",10), strfmt(RPT_CELL_UTILRATE(p,"TOTAL"),9,2), "%")
		forall (m in MONTH) write(strfmt(RPT_CELL_UTILRATE(p,m),9,2), "%")
		writeln

		write(strfmt("",40), strfmt("CAPA",10), strfmt(RPT_CELL_CAPA(p,"TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_CELL_CAPA(p,m),10,0))
		writeln

		write(strfmt("",40), strfmt("used",10), strfmt(RPT_CELL_USED(p,"TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_CELL_USED(p,m),10,0))
		writeln
		writeln
		writeln("P_", p, "> Item, Itemgroup Count Summary at time ", gettime)
		writeln(strfmt("LINE",40), strfmt("item",10), strfmt("itemgroup",10), "\n", 60*"-")
		writeln(strfmt("TOTAL",40), strfmt(sum(l in PLANT_CELLLINE(p)) RPT_CELLIFITEM(l),10,0),
		strfmt(sum(l in PLANT_CELLLINE(p)) RPT_CELLIFITEMGROUP(l),10,0), "\n", 60*"-")
		forall (l in PLANT_CELLLINE(p))
		writeln(strfmt(l,40), strfmt(RPT_CELLIFITEM(l),10), strfmt(RPT_CELLIFITEMGROUP(l),10))
		writeln
		writeln("P_", p, "> DUEDATE Distance Summary at time ", gettime)
		
		forall (d in DEM | DEM_PANELPLANT(d) = p and DEM_CELLQTY(d) <= ZEROVALUE and sum(t in TIME) RPT_ARRAY(d,p,t) > ZEROVALUE) do
			n_gap += 1
			gap := DEM_DUETIME(d) - (sum(t in TIME | RPT_ARRAY(d,p,t)>ZEROVALUE) t + ARRAYLEADTIME(d,p) - 1)
			ss_gap += gap*gap
			s_gap += gap
		end-do

		forall (d in DEM | DEM_PANELPLANT(d) = p and DEM_CELLQTY(d) > ZEROVALUE and sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > ZEROVALUE) do
			n_gap += 1
			gap := DEM_DUETIME(d) - (sum(l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) t + CELLLEADTIME(d,p) - 1)
			ss_gap += gap*gap
			s_gap += gap
		end-do
		writeln(strfmt("TYPE",40), strfmt("VALUE",10), "\n", 50*"-")
		writeln(strfmt("AVERAGE",40), strfmt(if(n_gap>ZEROVALUE, s_gap/n_gap, 0),10,2))
		writeln(strfmt("MIN_VARIATION*",40), strfmt(if(n_gap>1, sqrt((ss_gap - s_gap*s_gap/n_gap)/(n_gap-1)), 0),10,2))
		writeln
		writeln("P_", p, "> DUEDATE Ontime Summary at time ", gettime)

		forall (d in DEM | DEM_PANELPLANT(d) = p and DEM_CELLQTY(d) <= ZEROVALUE) do
			n_target += 1
			qty_target += DEM_ARRAYQTY(d)
			if sum(t in TIME) RPT_ARRAY(d,p,t) > ZEROVALUE then
				forall (t in TIME | t+ARRAYLEADTIME(d,p)-1<=DEM_DUETIME(d) and RPT_ARRAY(d,p,t)>ZEROVALUE) do
					n_achieve += 1
					qty_achieve += RPT_ARRAY(d,p,t)
				end-do
			end-if
		end-do
		
		forall (d in DEM | DEM_PANELPLANT(d) = p and DEM_CELLQTY(d) > ZEROVALUE) do
			n_target += 1
			qty_target += DEM_CELLQTY(d)
			if sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > ZEROVALUE then
				forall (l in DEM_LINE(d), t in TIME | t+CELLLEADTIME(d,p)-1<=DEM_DUETIME(d) and RPT_CELL(d,l,t)>ZEROVALUE) do
					n_achieve += 1
					qty_achieve += RPT_CELL(d,l,t)
				end-do
			end-if
		end-do
		writeln(strfmt("TYPE",40), strfmt("TARGET",10), strfmt("ACHIEVED",10), strfmt("RATE%",10), "\n", 70*"-")
		writeln(strfmt("COUNT*",40), strfmt(n_target,10), strfmt(n_achieve,10), strfmt(n_achieve/n_target*100,10,2))
		writeln(strfmt("QUANTITY",40), strfmt(qty_target,10,0), strfmt(qty_achieve,10,0), strfmt(qty_achieve/qty_target*100,10,2))
		writeln
		writeln("P_", p, "> Closeness Summary at time ", gettime)
		writeln(strfmt("TYPE",40), strfmt("close",10), "\n", 50*"-")

		forall (d in DEM | DEM_PANELPLANT(d) = p and DEM_CELLQTY(d) <= ZEROVALUE)
			forall (t in TIME | RPT_ARRAY(d,p,t) > ZEROVALUE)
				if DEM_DUETIME(d) > (t+ARRAYLEADTIME(d,p)-1) then
					array_close += (DEM_DUETIME(d) - (t+ARRAYLEADTIME(d,p)-1))
				elif DEM_DUETIME(d) < (t+ARRAYLEADTIME(d,p)-1) then
					array_close += ((t+ARRAYLEADTIME(d,p)-1) - DEM_DUETIME(d))
				end-if
		writeln(strfmt("ARRAY",40), strfmt(array_close,10,0))
		
		forall (d in DEM | DEM_PANELPLANT(d) = p and DEM_CELLQTY(d) > ZEROVALUE)
		forall (l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t) > ZEROVALUE)
			if DEM_DUETIME(d) > (t+CELLLEADTIME(d,p)-1) then
				cell_close += (DEM_DUETIME(d) - (t+CELLLEADTIME(d,p)-1))
			elif DEM_DUETIME(d) < (t+CELLLEADTIME(d,p)-1) then
				cell_close += ((t+CELLLEADTIME(d,p)-1) - DEM_DUETIME(d))
			end-if
		writeln(strfmt("CELL",40), strfmt(cell_close,10,0))
		writeln
		if fname <> "" then
			fclose(F_OUTPUT)
		end-if
	end-procedure
			
	procedure display_panelsummary(fname:string)
		declarations
			n_gap: array(PLANT) of integer
			ss_gap, s_gap: array(PLANT) of real
			gap: real
			n_target, n_achieve: array(PLANT) of integer
			qty_target, qty_achieve: array(PLANT) of real
			PRIO_TOTAL: array(RPRIO) of real
			array_close, cell_close: array(PLANT) of real
		end-declarations

		if fname <> "" then
			fopen(OUTPUT_DIR + fname, F_OUTPUT)
		end-if
	
		display_loghead("Result Summary of ALL")
		
		writeln("P_TOT> Time Summation by Plant at time ", gettime)

		write(strfmt("TYPE",40), strfmt("UNIT",10), strfmt("TOTAL",10))
		forall (p in PLANT) write(strfmt(p,10))
		writeln
		writeln((60+getsize(PLANT)*10)*"-")

		write(strfmt("STATUS",40), strfmt("0:SUCC",10), strfmt(OPT_STATUS,10))
		forall (p in PLANT) write(strfmt(RPT_PANEL_STATUS(p),10))
		writeln

		write(strfmt("TIME",40), strfmt("Seconds",10), strfmt(OPT_TIME,10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_TIME(p),10,0))
		writeln

		write(strfmt("GAP%",40), strfmt("%",10), strfmt(OPT_GAP,9,2), "%")
		forall (p in PLANT) write(strfmt(RPT_PANEL_GAP(p),9,2), "%")
		writeln

		write(strfmt("NODE",40), strfmt("EA",10), strfmt(OPT_NODE,10))
		forall (p in PLANT) write(strfmt(RPT_PANEL_NODE(p),10))
		writeln

		write(strfmt("OBJVAL",40), strfmt("Values",10), strfmt(OPT_OBJVAL,10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJVAL(p),10,0))
		writeln

		write(strfmt("BOUND",40), strfmt("Values",10), strfmt(OPT_BESTBOUND,10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_BESTBOUND(p),10,0))
		writeln
		writeln
		writeln("P_TOT> Objectives Value (not weighted) by Plant at time ", gettime)

		write(strfmt("TYPE",40), strfmt("WEIGHT",10), strfmt("W_TOTAL",10))
		forall (p in PLANT) write(strfmt(p,10))
		writeln
		writeln((60+getsize(PLANT)*10)*"-")

		write(strfmt("OBJ_FULFILL",40), strfmt(WEIGHT_FULFILL,10), strfmt(WEIGHT_FULFILL*sum (p in PLANT) RPT_PANEL_OBJ_FULFILL(p),10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJ_FULFILL(p),10,0))
		writeln

		write(strfmt("OBJ_PRIORITY",40), strfmt(WEIGHT_PRIORITY,10), strfmt(WEIGHT_PRIORITY*sum (p in PLANT) RPT_PANEL_OBJ_PRIORITY(p),10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJ_PRIORITY(p),10,0))
		writeln

		write(strfmt("OBJ_LINEPRIORITY",40), strfmt(WEIGHT_LINEPRIORITY,10), strfmt(WEIGHT_LINEPRIORITY*sum (p in PLANT) RPT_PANEL_OBJ_LINEPRIORITY(p),10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJ_LINEPRIORITY(p),10,0))
		writeln

		write(strfmt("OBJ_ITEM",40), strfmt(WEIGHT_ITEM,10), strfmt(WEIGHT_ITEM*sum (p in PLANT) RPT_PANEL_OBJ_ITEM(p),10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJ_ITEM(p),10,0))
		writeln

		write(strfmt("OBJ_ITEMGROUP",40), strfmt(WEIGHT_ITEMGROUP,10), strfmt(WEIGHT_ITEMGROUP*sum (p in PLANT) RPT_PANEL_OBJ_ITEMGROUP(p),10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJ_ITEMGROUP(p),10,0))
		writeln

		write(strfmt("OBJ_SEQUENCE",40), strfmt(WEIGHT_SEQUENCE,10), strfmt(WEIGHT_SEQUENCE*sum (p in PLANT) RPT_PANEL_OBJ_SEQUENCE(p),10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJ_SEQUENCE(p),10,0))
		writeln

		write(strfmt("OBJ_EARLYPROD",40), strfmt(WEIGHT_EARLYPROD,10), strfmt(WEIGHT_EARLYPROD*sum (p in PLANT) RPT_PANEL_OBJ_EARLYPROD(p),10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJ_EARLYPROD(p),10,0))
		writeln

		write(strfmt("OBJ_ONTIME",40), strfmt(WEIGHT_ONTIME,10), strfmt(WEIGHT_ONTIME*sum (p in PLANT) RPT_PANEL_OBJ_ONTIME(p),10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJ_ONTIME(p),10,0))
		writeln

		write(strfmt("OBJ_CLOSENESS",40), strfmt(WEIGHT_CLOSENESS,10), strfmt(WEIGHT_CLOSENESS*sum (p in PLANT) RPT_PANEL_OBJ_CLOSENESS(p),10,0))
		forall (p in PLANT) write(strfmt(RPT_PANEL_OBJ_CLOSENESS(p),10,0))
		writeln
		writeln

		writeln("P_TOT> Fillrate Summary by Priority at time ", gettime)

		write(strfmt("PROCESS",40), strfmt("TYPE",10), strfmt("TOTAL",10))
		forall (pri in RPRIO)
			write(strfmt(PRIO_END(pri),10,0))
		writeln
		writeln((60+getsize(RPRIO)*10)*"-")
	
		write(strfmt("ARRAY",40), strfmt("DEMAND",10), strfmt(sum(d in DEM) DEM_ARRAYQTY(d),10,0))
		forall (pri in RPRIO) do
			PRIO_TOTAL(pri) := sum(d in DEM | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_ARRAYQTY(d)
			write(strfmt(PRIO_TOTAL(pri),10,0))
		end-do
		writeln

		write(strfmt("",40), strfmt("fill%",10), strfmt((sum(d in DEM, p in DEM_PLANT(d), t in TIME) RPT_ARRAY(d,p,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100,10,2))
		forall (pri in RPRIO)
			write(strfmt(if(PRIO_TOTAL(pri)>ZEROVALUE, (sum(d in DEM, p in DEM_PLANT(d), t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) RPT_ARRAY(d,p,t))/PRIO_TOTAL(pri)*100, 0),10,2))
		writeln
		writeln((60+getsize(RPRIO)*10)*"-")
	
		write(strfmt("CELL",40), strfmt("DEMAND",10), strfmt(sum(d in DEM) DEM_CELLQTY(d),10,0))
		forall (pri in RPRIO) do
			PRIO_TOTAL(pri) := sum(d in DEM | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_CELLQTY(d)
			write(strfmt(PRIO_TOTAL(pri),10,0))
		end-do
		writeln

		write(strfmt("",40), strfmt("fill%",10), strfmt((sum(d in DEM, l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100,10,2))
		forall (pri in RPRIO)
			write(strfmt(if(PRIO_TOTAL(pri)>ZEROVALUE, (sum(d in DEM, l in DEM_LINE(d), t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) RPT_CELL(d,l,t))/PRIO_TOTAL(pri)*100, 0),10,2))
		writeln
		writeln
	
		writeln("P_TOT> Work Summary by Plant at time ", gettime)
	
		write(strfmt("PROCESS",40), strfmt("TYPE",10), strfmt("TOTAL",10))
		forall (p in PLANT) write(strfmt(p,10))
		writeln
		writeln((60+getsize(PLANT)*10)*"-")
	
		write(strfmt("ARRAYwork",40), strfmt("fill%",10), strfmt(OPT_ARRAY_FILLRATE,9,2), "%")
		forall (p in PLANT)
			write(strfmt(RPT_ARRAY_FILLRATE(p,"TOTAL"),9,2), "%")
		writeln
		
		write(strfmt("",40), strfmt("DEM",10), strfmt(OPT_ARRAY_DEM,10,0))
		forall (p in PLANT)
			write(strfmt(RPT_ARRAY_DEM(p,"TOTAL"),10,0))
		writeln
		
		write(strfmt("",40), strfmt("work",10), strfmt(OPT_ARRAY_WORK,10,0))
		forall (p in PLANT)
			write(strfmt(RPT_ARRAY_WORK(p,"TOTAL"),10,0))
		writeln
		forall (res in ARRAYRES | sum(p in PLANT, month in MONTH) ARRAYNOM(p,res,month) > ZEROVALUE) do
			writeln((60+getsize(PLANT)*10)*"-")
			
			write(strfmt("ARRAYutil:"+res,40), strfmt("util%",10), strfmt(OPT_ARRAY_UTILRATE(res),9,2), "%")
			forall (p in PLANT)
				write(strfmt(RPT_ARRAY_UTILRATE(p,res,"TOTAL"),9,2), "%")
			writeln
			
			write(strfmt("",40), strfmt("CAPA",10), strfmt(OPT_ARRAY_CAPA(res),10,0))
			forall (p in PLANT)
				write(strfmt(RPT_ARRAY_CAPA(p,res,"TOTAL"),10,0))
			writeln
			
			write(strfmt("",40), strfmt("used",10), strfmt(OPT_ARRAY_USED(res),10,0))
			forall (p in PLANT)
				write(strfmt(RPT_ARRAY_USED(p,res,"TOTAL"),10,0))
			writeln
		end-do
		writeln((60+getsize(PLANT)*10)*"-")

		write(strfmt("CELLwork",40), strfmt("fill%",10), strfmt(OPT_CELL_FILLRATE,9,2), "%")
		forall (p in PLANT)
			write(strfmt(RPT_CELL_FILLRATE(p,"TOTAL"),9,2), "%")
		writeln
		write(strfmt("",40), strfmt("DEM",10), strfmt(OPT_CELL_DEM,10,0))
		forall (p in PLANT)
			write(strfmt(RPT_CELL_DEM(p,"TOTAL"),10,0))
		writeln
		write(strfmt("",40), strfmt("work",10), strfmt(OPT_CELL_WORK,10,0))
		forall (p in PLANT)
			write(strfmt(RPT_CELL_WORK(p,"TOTAL"),10,0))
		writeln
		writeln((60+getsize(PLANT)*10)*"-")
		write(strfmt("CELLutil",40), strfmt("util%",10), strfmt(OPT_CELL_UTILRATE,9,2), "%")
		forall (p in PLANT)
			write(strfmt(RPT_CELL_UTILRATE(p,"TOTAL"),9,2), "%")
		writeln
		write(strfmt("",40), strfmt("CAPA",10), strfmt(OPT_CELL_CAPA,10,0))
		forall (p in PLANT)
			write(strfmt(RPT_CELL_CAPA(p,"TOTAL"),10,0))
		writeln
		write(strfmt("",40), strfmt("used",10), strfmt(OPT_CELL_USED,10,0))
		forall (p in PLANT)
			write(strfmt(RPT_CELL_USED(p,"TOTAL"),10,0))
		writeln
		writeln

		writeln("P_TOT> Item, Itemgroup Count Summary by Plant at time ", gettime)

		write(strfmt("TYPE",40), strfmt("WEIGHT",10), strfmt("TOTAL",10))
		forall (p in PLANT) write(strfmt(p,10))
		writeln
		writeln((60+getsize(PLANT)*10)*"-")

		write(strfmt("LINE#",40), strfmt("-",10), strfmt(count(l in CELLLINE),10,0))
		forall (p in PLANT) write(strfmt(count(l in PLANT_CELLLINE(p)),10,0))
		writeln

		write(strfmt("item count",40), strfmt(WEIGHT_ITEM,10), strfmt(sum(l in CELLLINE) RPT_CELLIFITEM(l),10,0))
		forall (p in PLANT) write(strfmt(sum(l in PLANT_CELLLINE(p)) RPT_CELLIFITEM(l),10,0))
		writeln

		write(strfmt("itemgroup count",40), strfmt(WEIGHT_ITEMGROUP,10), strfmt(sum(l in CELLLINE) RPT_CELLIFITEMGROUP(l),10,0))
		forall (p in PLANT) write(strfmt(sum(l in PLANT_CELLLINE(p)) RPT_CELLIFITEMGROUP(l),10,0))
		writeln
		writeln

		writeln("P_TOT> Duedate Distance Summary at time ", gettime)

		write(strfmt("TYPE",40), strfmt("WEIGHT",10), strfmt("TOTAL",10))
		forall (p in PLANT) write(strfmt(p,10))
		writeln
		writeln((60+getsize(PLANT)*10)*"-")
		forall (p in PLANT) do
			forall (d in DEM | DEM_PANELPLANT(d)=p and DEM_CELLQTY(d)<=ZEROVALUE and sum(t in TIME) RPT_ARRAY(d,p,t)>ZEROVALUE) do
				n_gap(p) += 1
				gap := DEM_DUETIME(d) - (sum(t in TIME | RPT_ARRAY(d,p,t)>ZEROVALUE) t + ARRAYLEADTIME(d,p) - 1)
				ss_gap(p) += gap*gap
				s_gap(p) += gap
			end-do
			
			forall (d in DEM | DEM_PANELPLANT(d)=p and DEM_CELLQTY(d)>ZEROVALUE and sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)>ZEROVALUE) do
				n_gap(p) += 1
				gap := DEM_DUETIME(d) - (sum(l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) t + CELLLEADTIME(d,p) - 1)
				ss_gap(p) += gap*gap
				s_gap(p) += gap
			end-do
		end-do
		
		write(strfmt("MIN_VARIATION",40), strfmt(WEIGHT_SEQUENCE,10),
		strfmt(if(sum(p in PLANT) n_gap(p) <= ZEROVALUE, 0, sqrt(((sum(p in PLANT) ss_gap(p)) - (sum(p in PLANT) s_gap(p))*(sum(p in PLANT) s_gap(p))/(sum(p in PLANT) n_gap(p)))/((sum(p in PLANT) n_gap(p))-1))),10,2))
		forall (p in PLANT) write(strfmt(if(n_gap(p)>1, sqrt((ss_gap(p) - s_gap(p)*s_gap(p)/n_gap(p))/(n_gap(p)-1)), 0),10,2))
		writeln
		writeln
		
		writeln("P_TOT> Duedate Ontime Summary at time ", gettime)
		
		write(strfmt("TYPE",40), strfmt("WEIGHT",10), strfmt("TOTAL",10))
		forall (p in PLANT) write(strfmt(p,10))
		writeln
		writeln((60+getsize(PLANT)*10)*"-")
		forall (p in PLANT) do
			forall (d in DEM | DEM_PANELPLANT(d) = p and DEM_CELLQTY(d) <= ZEROVALUE) do
				n_target(p) += 1
				qty_target(p) += DEM_ARRAYQTY(d)
				if sum(t in TIME) RPT_ARRAY(d,p,t) > ZEROVALUE then
					forall (t in TIME | t+ARRAYLEADTIME(d,p)-1<=DEM_DUETIME(d) and RPT_ARRAY(d,p,t)>ZEROVALUE) do
						n_achieve(p) += 1
						qty_achieve(p) += RPT_ARRAY(d,p,t)
					end-do
				end-if
			end-do
			
			forall (d in DEM | DEM_PANELPLANT(d) = p and DEM_CELLQTY(d) > ZEROVALUE) do
				n_target(p) += 1
				qty_target(p) += DEM_CELLQTY(d)
				if sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > ZEROVALUE then
					forall (l in DEM_LINE(d), t in TIME | t+CELLLEADTIME(d,p)-1<=DEM_DUETIME(d) and RPT_CELL(d,l,t)>ZEROVALUE) do
						n_achieve(p) += 1
						qty_achieve(p) += RPT_CELL(d,l,t)
					end-do
				end-if
			end-do
		end-do
		
		write(strfmt("ONTIME COUNT* rate%",40), strfmt(WEIGHT_ONTIME,10), strfmt((sum(p in PLANT) n_achieve(p))/(sum(p in PLANT) n_target(p))*100,10,2))
		forall (p in PLANT) write(strfmt(if(n_target(p)>ZEROVALUE, n_achieve(p)/n_target(p)*100, 0),10,2))
		writeln
		
		write(strfmt("ONTIME QUANTITY rate%",40), strfmt(WEIGHT_ONTIME,10), strfmt((sum(p in PLANT) qty_achieve(p))/(sum(p in PLANT) qty_target(p))*100,10,2))
		forall (p in PLANT) write(strfmt(if(qty_target(p)>ZEROVALUE, qty_achieve(p)/qty_target(p)*100, 0),10,2))
		writeln
		writeln
		
		if fname <> "" then
			fclose(F_OUTPUT)
		end-if
	end-procedure
		
	procedure display_modulesummary(fname:string)
		declarations
			n_target, n_achieve: array(STAGE) of integer
			qty_target, qty_achieve: array(STAGE) of real
			PRIO_TOTAL: array(RPRIO) of real
			module_close: array(STAGE) of real
		end-declarations
		
		if fname <> "" then
			fopen(OUTPUT_DIR + fname, F_OUTPUT)
		end-if
		
		display_loghead("Result Summary of ALL")
		
		writeln("M_TOT> Time Summation by Stage at time ", gettime)
		write(strfmt("TYPE",40), strfmt("UNIT",10), strfmt("TOTAL",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((60+getsize(STAGE)*10)*"-")
		
		write(strfmt("STATUS",40), strfmt("0:SUCC",10), strfmt(OPT_STATUS,10))
		forall (s in STAGE) write(strfmt(RPT_MODULE_STATUS(s),10))
		writeln
		
		write(strfmt("TIME",40), strfmt("Seconds",10), strfmt(OPT_TIME,10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_TIME(s),10,0))
		writeln
		
		write(strfmt("GAP%",40), strfmt("%",10), strfmt(OPT_GAP,9,2), "%")
		forall (s in STAGE) write(strfmt(RPT_MODULE_GAP(s),9,2), "%")
		writeln
		
		write(strfmt("NODE",40), strfmt("EA",10), strfmt(OPT_NODE,10))
		forall (s in STAGE) write(strfmt(RPT_MODULE_NODE(s),10))
		writeln
		
		write(strfmt("OBJVAL",40), strfmt("Values",10), strfmt(OPT_OBJVAL,10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJVAL(s),10,0))
		writeln
		
		write(strfmt("BOUND",40), strfmt("Values",10), strfmt(OPT_BESTBOUND,10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_BESTBOUND(s),10,0))
		writeln
		writeln
		
		writeln("M_TOT> Objectives Value (not weighted) by Stage at time ", gettime)
		
		write(strfmt("TYPE",40), strfmt("WEIGHT",10), strfmt("TOTAL",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((60+getsize(STAGE)*10)*"-")
		
		write(strfmt("OBJ_FULFILL",40), strfmt(WEIGHT_FULFILL,10), strfmt(sum (s in STAGE) RPT_MODULE_OBJ_FULFILL(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_FULFILL(s),10,0))
		writeln
		
		write(strfmt("OBJ_PRIORITY",40), strfmt(WEIGHT_PRIORITY,10), strfmt(sum (s in STAGE) RPT_MODULE_OBJ_PRIORITY(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_PRIORITY(s),10,0))
		writeln
		
		write(strfmt("OBJ_LINEWEIGHT",40), strfmt(WEIGHT_LINEPRIORITY,10), strfmt(sum (s in STAGE) RPT_MODULE_OBJ_LINEWEIGHT(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_LINEWEIGHT(s),10,0))
		writeln
		
		write(strfmt("OBJ_LINEPRIORITY",40), strfmt(WEIGHT_LINEPRIORITY,10), strfmt(sum (s in STAGE) RPT_MODULE_OBJ_LINEPRIORITY(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_LINEPRIORITY(s),10,0))
		writeln
		
		write(strfmt("OBJ_ITEM",40), strfmt(WEIGHT_ITEM,10), strfmt(sum (s in STAGE) RPT_MODULE_OBJ_ITEM(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_ITEM(s),10,0))
		writeln
		
		write(strfmt("OBJ_ITEMGROUP",40), strfmt(WEIGHT_ITEMGROUP,10), strfmt(sum (s in STAGE) RPT_MODULE_OBJ_ITEMGROUP(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_ITEMGROUP(s),10,0))
		writeln
		
		write(strfmt("OBJ_EARLYPROD",40), strfmt(WEIGHT_EARLYPROD,10), strfmt(sum (s in STAGE) RPT_MODULE_OBJ_EARLYPROD(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_EARLYPROD(s),10,0))
		writeln
		
		write(strfmt("OBJ_ONTIME",40), strfmt(WEIGHT_ONTIME,10), strfmt(sum (s in STAGE) RPT_MODULE_OBJ_ONTIME(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_ONTIME(s),10,0))
		writeln
		
		write(strfmt("OBJ_CLOSENESS",40), strfmt(WEIGHT_CLOSENESS,10), strfmt(sum (s in STAGE) RPT_MODULE_OBJ_CLOSENESS(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_CLOSENESS(s),10,0))
		writeln
		writeln
		
		writeln("M_TOT> Fillrate Summary by Priority at time ", gettime)
		
		write(strfmt("PLANT",40), strfmt("TYPE",10), strfmt("TOTAL",10))
		forall (pri in RPRIO)
			write(strfmt(PRIO_END(pri),10,0))
		writeln
		writeln((60+getsize(RPRIO)*10)*"-")
		
		write(strfmt("TOTAL",40), strfmt("DEMAND",10), strfmt(sum(d in DEM) DEM_MODULEQTY(d),10,0))
		forall (pri in RPRIO) do
			PRIO_TOTAL(pri) := sum(d in DEM | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_MODULEQTY(d)
			write(strfmt(PRIO_TOTAL(pri),10,0))
		end-do
		writeln
		
		write(strfmt("",40), strfmt("fill%",10), strfmt((sum(d in DEM, l in DEM_LINE(d), t in TIME) RPT_MODULE(d,l,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100,10,2))
		forall (pri in RPRIO)
			write(strfmt(if(PRIO_TOTAL(pri)>ZEROVALUE, (sum(d in DEM, l in DEM_LINE(d), t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) RPT_MODULE(d,l,t))/PRIO_TOTAL(pri)*100, 0),10,2))
		writeln
		writeln
		
		writeln("M_TOT> Work Summary by Month at time ", gettime)
		
		write(strfmt("PLANT",40), strfmt("TYPE",10), strfmt("TOTAL",10))
		forall (m in MONTH) write(strfmt(m,10))
		writeln
		writeln((60+getsize(MONTH)*10)*"-")
		
		write(strfmt("TOTAL",40), strfmt("DEMAND",10), strfmt(RPT_MODULE_DEM("TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_MODULE_DEM(m),10,0))
		writeln
		
		write(strfmt("",40), strfmt("work",10), strfmt(RPT_MODULE_WORK("TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_MODULE_WORK(m),10,0))
		writeln
		
		write(strfmt("",40), strfmt("fill%",10), strfmt(RPT_MODULE_FILLRATE("TOTAL"),9,2), "%")
		forall (m in MONTH) write(strfmt(RPT_MODULE_FILLRATE(m),9,2), "%")
		writeln
		
		write(strfmt("",40), strfmt("CAPA",10), strfmt(RPT_MODULE_CAPA("TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_MODULE_CAPA(m),10,0))
		writeln
		
		write(strfmt("",40), strfmt("used",10), strfmt(RPT_MODULE_USED("TOTAL"),10,0))
		forall (m in MONTH) write(strfmt(RPT_MODULE_USED(m),10,0))
		writeln
		
		write(strfmt("",40), strfmt("util%",10), strfmt(RPT_MODULE_UTILRATE("TOTAL"),9,2), "%")
		forall (m in MONTH) write(strfmt(RPT_MODULE_UTILRATE(m),9,2), "%")
		writeln
		writeln
		
		writeln("M_TOT> Line Priority Summary by Stage at time ", gettime)
		
		write(strfmt("PLANT",40), strfmt("TYPE",10), strfmt("TOTAL",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((60+getsize(STAGE)*10)*"-")
		
		write(strfmt("TOTAL",40), strfmt("weight",10), strfmt(sum(s in STAGE) RPT_MODULE_OBJ_LINEWEIGHT(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_LINEWEIGHT(s),10,0))
		writeln
		
		write(strfmt("TOTAL",40), strfmt("priority",10), strfmt(sum(s in STAGE) RPT_MODULE_OBJ_LINEPRIORITY(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_LINEPRIORITY(s),10,0))
		writeln
		writeln
		
		writeln("M_TOT> Item, Itemgroup Frequency Summary by Stage at time ", gettime)
		
		write(strfmt("PLANT",40), strfmt("TYPE",10), strfmt("TOTAL",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((60+getsize(STAGE)*10)*"-")
		
		write(strfmt("TOTAL",40), strfmt("LINE#",10), strfmt(count(l in MODULELINE),10,0))
		forall (s in STAGE) write(strfmt(count(l in MODULELINE),10,0))
		writeln
		
		write(strfmt("",40), strfmt("item",10), strfmt(sum(s in STAGE) RPT_MODULE_OBJ_ITEM(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_ITEM(s),10,0))
		writeln
		
		write(strfmt("",40), strfmt("itemgroup",10), strfmt(sum(s in STAGE) RPT_MODULE_OBJ_ITEMGROUP(s),10,0))
		forall (s in STAGE) write(strfmt(RPT_MODULE_OBJ_ITEMGROUP(s),10,0))
		writeln
		writeln
		
		writeln("M_TOT> Duedate Ontime Summary at time ", gettime)
		
		write(strfmt("PLANT",40), strfmt("UOM",10), strfmt("TOTAL",10))
		forall (s in STAGE) write(strfmt(s,10))
		writeln
		writeln((60+getsize(STAGE)*10)*"-")
		forall (s in STAGE) do
			forall (d in DEM | DEM_STAGE(d) = s and DEM_MODULEQTY(d) > ZEROVALUE) do
				n_target(s) += 1
				qty_target(s) += DEM_MODULEQTY(d)
				forall (l in DEM_LINE(d), t in TIME | RPT_MODULE(d,l,t)>ZEROVALUE and t+MODULELEADTIME(d,MODULELINE_PLANT(l))-1<=DEM_DUETIME(d)) do
					n_achieve(s) += 1
					qty_achieve(s) += RPT_MODULE(d,l,t)
				end-do
			end-do
		end-do
		
		write(strfmt("TOTAL",40), strfmt("%",10), strfmt((sum(s in STAGE) qty_achieve(s))/(sum(s in STAGE) qty_target(s))*100,10,2))
		forall (s in STAGE) write(strfmt(if(qty_target(s)>ZEROVALUE, qty_achieve(s)/qty_target(s)*100, 0),10,2))
		writeln
		writeln
		
		if fname <> "" then
			fclose(F_OUTPUT)
		end-if
	end-procedure

	procedure summarize_panelplant(p:string)
		forall (s in STAGE) do
			RPT_PANEL_STATUS(p) := if(RPT_PANEL_STATUS(p) + RPT3_PANEL_STATUS(p,s) > ZEROVALUE, 1, 0)
			RPT_PANEL_TIME(p) += RPT3_PANEL_TIME(p,s)
			RPT_PANEL_GAP(p) := maxlist(RPT3_PANEL_GAP(p,s), RPT_PANEL_GAP(p))
			RPT_PANEL_NODE(p) += RPT3_PANEL_NODE(p,s)
		end-do

		RPT_PANEL_TIME(p) += RPT4_PANEL_TIME(p)
		RPT_PANEL_NODE(p) += RPT4_PANEL_NODE(p)
		RPT_PANEL_OBJVAL(p) := sum(s in STAGE) RPT3_PANEL_OBJVAL(p,s)
		RPT_PANEL_BESTBOUND(p) := RPT_PANEL_OBJVAL(p) / (1-RPT_PANEL_GAP(p)/100)
		RPT_PANEL_OBJ_FULFILL(p) := sum(s in STAGE) RPT3_PANEL_OBJ_FULFILL(p,s)
		RPT_PANEL_OBJ_PRIORITY(p) := sum(s in STAGE) RPT3_PANEL_OBJ_PRIORITY(p,s)
		RPT_PANEL_OBJ_LINEPRIORITY(p) := sum(s in STAGE) RPT3_PANEL_OBJ_LINEPRIORITY(p,s)
		RPT_PANEL_OBJ_ITEM(p) := sum(s in STAGE) RPT3_PANEL_OBJ_ITEM(p,s)
		RPT_PANEL_OBJ_ITEMGROUP(p) := sum(s in STAGE) RPT3_PANEL_OBJ_ITEMGROUP(p,s)
		RPT_PANEL_OBJ_SEQUENCE(p) := sum(s in STAGE) RPT3_PANEL_OBJ_SEQUENCE(p,s)
		RPT_PANEL_OBJ_EARLYPROD(p) := sum(s in STAGE) RPT3_PANEL_OBJ_EARLYPROD(p,s)
		RPT_PANEL_OBJ_ONTIME(p) := sum(s in STAGE) RPT3_PANEL_OBJ_ONTIME(p,s)
		RPT_PANEL_OBJ_CLOSENESS(p) := sum(s in STAGE) RPT3_PANEL_OBJ_CLOSENESS(p,s)
		RPT_ARRAY_DEM(p,"TOTAL") := sum(d in DEM | DEM_PANELPLANT(d)=p) DEM_ARRAYQTY(d)
		RPT_ARRAY_WORK(p,"TOTAL") := sum(d in DEM, t in TIME) RPT_ARRAY(d,p,t)
		RPT_ARRAY_FILLRATE(p,"TOTAL") := if(RPT_ARRAY_DEM(p,"TOTAL") > ZEROVALUE, RPT_ARRAY_WORK(p,"TOTAL") / RPT_ARRAY_DEM(p,"TOTAL") * 100, 0)

		forall (res in ARRAYRES | sum(month in MONTH) ARRAYNOM(p,res,month) > ZEROVALUE) do
			RPT_ARRAY_CAPA(p,res,"TOTAL") := sum(t in TIME) ARRAYHOUR(p,res,t)
			RPT_ARRAY_USED(p,res,"TOTAL") := (sum(d in DEM, t in TIME | RPT_ARRAY(d,p,t) > ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600
			RPT_ARRAY_UTILRATE(p,res,"TOTAL") := if(RPT_ARRAY_CAPA(p,res,"TOTAL")>ZEROVALUE, RPT_ARRAY_USED(p,res,"TOTAL")/RPT_ARRAY_CAPA(p,res,"TOTAL")*100, 0)
		end-do

		forall (m in MONTH) do
			RPT_ARRAY_DEM(p,m) := sum(d in DEM | DEM_PANELPLANT(d)=p and TIME_MONTH(DEM_DUETIME(d))=m) DEM_ARRAYQTY(d)
			RPT_ARRAY_WORK(p,m) := sum(d in DEM, t in TIME | DEM_PANELPLANT(d)=p and TIME_MONTH(DEM_DUETIME(d))=m) RPT_ARRAY(d,p,t)
			RPT_ARRAY_FILLRATE(p,m) := if(RPT_ARRAY_DEM(p,m) > ZEROVALUE, RPT_ARRAY_WORK(p,m) / RPT_ARRAY_DEM(p,m) * 100, 0)
			forall (res in ARRAYRES | ARRAYNOM(p,res,m) > ZEROVALUE) do
				RPT_ARRAY_CAPA(p,res,m) := sum(t in TIME | TIME_MONTH(t)=m) ARRAYHOUR(p,res,t)
				RPT_ARRAY_USED(p,res,m) := (sum(d in DEM, t in TIME | TIME_MONTH(t)=m and RPT_ARRAY(d,p,t) > ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600
				RPT_ARRAY_UTILRATE(p,res,m) := if(RPT_ARRAY_CAPA(p,res,m)>ZEROVALUE, RPT_ARRAY_USED(p,res,m)/RPT_ARRAY_CAPA(p,res,m)*100, 0)
			end-do
			end-do
			
		RPT_CELL_DEM(p,"TOTAL") := sum(d in DEM | DEM_PANELPLANT(d)=p) DEM_CELLQTY(d)
		RPT_CELL_WORK(p,"TOTAL") := sum(d in DEM, l in DEM_LINE(d), t in TIME | DEM_PANELPLANT(d)=p) RPT_CELL(d,l,t)
		RPT_CELL_FILLRATE(p,"TOTAL") := if(RPT_CELL_DEM(p,"TOTAL") > ZEROVALUE, RPT_CELL_WORK(p,"TOTAL") / RPT_CELL_DEM(p,"TOTAL") * 100, 0)
		RPT_CELL_CAPA(p,"TOTAL") := sum(l in PLANT_CELLLINE(p), t in TIME) CELLHOUR(l,t)
		RPT_CELL_USED(p,"TOTAL") := (sum(d in DEM, l in DEM_LINE(d), t in TIME | DEM_PANELPLANT(d)=p and RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600
		RPT_CELL_UTILRATE(p,"TOTAL") := RPT_CELL_USED(p,"TOTAL") / RPT_CELL_CAPA(p,"TOTAL") * 100

		forall (m in MONTH) do
			RPT_CELL_DEM(p,m) := sum(d in DEM | DEM_PANELPLANT(d)=p and TIME_MONTH(DEM_DUETIME(d))=m) DEM_CELLQTY(d)
			RPT_CELL_WORK(p,m) := sum(d in DEM, l in DEM_LINE(d), t in TIME | DEM_PANELPLANT(d)=p and TIME_MONTH(DEM_DUETIME(d))=m) RPT_CELL(d,l,t)
			RPT_CELL_FILLRATE(p,m) := if(RPT_CELL_DEM(p,m) > ZEROVALUE,RPT_CELL_WORK(p,m) / RPT_CELL_DEM(p,m) * 100, 0)
			RPT_CELL_CAPA(p,m) := sum(l in PLANT_CELLLINE(p), t in TIME | TIME_MONTH(t)=m) CELLHOUR(l,t)
			RPT_CELL_USED(p,m) := (sum(d in DEM, l in DEM_LINE(d), t in TIME | DEM_PANELPLANT(d)=p and TIME_MONTH(t)=m and RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600
			RPT_CELL_UTILRATE(p,m) := RPT_CELL_USED(p,m) / RPT_CELL_CAPA(p,m) * 100
		end-do

		display_panelplant(p, "")
		
	end-procedure

	procedure summarize_panel
		OPT_STATUS := 0
		OPT_TIME := 0
		OPT_GAP := 0
		OPT_NODE := 0

		forall (p in PLANT) do
			OPT_STATUS := if(OPT_STATUS + RPT_PANEL_STATUS(p) > ZEROVALUE, 1, 0)
			OPT_TIME += RPT_PANEL_TIME(p)
			OPT_GAP := maxlist(RPT_PANEL_GAP(p), OPT_GAP)
			OPT_NODE += RPT_PANEL_NODE(p)
		end-do

		forall (p in PLANT) OPT_OBJVAL += RPT_PANEL_OBJVAL(p)
		OPT_BESTBOUND := OPT_OBJVAL / (1-OPT_GAP/100)
		OPT_ARRAY_DEM := sum(d in DEM) DEM_ARRAYQTY(d)
		OPT_ARRAY_WORK := sum(d in DEM, p in DEM_PLANT(d), t in TIME) RPT_ARRAY(d,p,t)
		OPT_ARRAY_FILLRATE := OPT_ARRAY_WORK / OPT_ARRAY_DEM * 100
		
		forall (res in ARRAYRES | sum(p in PLANT, month in MONTH) ARRAYNOM(p,res,month) > ZEROVALUE) do
			OPT_ARRAY_CAPA(res) := sum(p in PLANT, t in TIME) ARRAYHOUR(p,res,t)
			OPT_ARRAY_USED(res) := (sum(d in DEM, p in DEM_PLANT(d), t in TIME | RPT_ARRAY(d,p,t) > ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600
			OPT_ARRAY_UTILRATE(res) := OPT_ARRAY_USED(res) / OPT_ARRAY_CAPA(res) * 100
		end-do
		
		OPT_CELL_DEM := sum(d in DEM) DEM_CELLQTY(d)
		OPT_CELL_WORK := sum(d in DEM, l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)
		OPT_CELL_FILLRATE := OPT_CELL_WORK / OPT_CELL_DEM * 100
		OPT_CELL_CAPA := sum(l in CELLLINE, t in TIME) CELLHOUR(l,t)
		OPT_CELL_USED := (sum(d in DEM, l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t) > ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600
		OPT_CELL_UTILRATE := OPT_CELL_USED / OPT_CELL_CAPA * 100
		
		display_panelsummary("")
		display_panelsummary("LOG_PANEL_SUMMARY.txt")
		
	end-procedure

	procedure summarize_module
		OPT_STATUS := 0
		OPT_TIME := 0
		OPT_GAP := 0
		OPT_NODE := 0

		forall (s in STAGE) do
			OPT_STATUS := if(OPT_STATUS + RPT_MODULE_STATUS(s) > ZEROVALUE, 1, 0)
			OPT_TIME += RPT_MODULE_TIME(s)
			OPT_GAP := maxlist(RPT_MODULE_GAP(s), OPT_GAP)
			OPT_NODE += RPT_MODULE_NODE(s)
		end-do

		forall (s in STAGE) OPT_OBJVAL += RPT_MODULE_OBJVAL(s)
		OPT_BESTBOUND := OPT_OBJVAL / (1-OPT_GAP/100)
		OPT_MODULE_DEM := sum(d in DEM) DEM_MODULEQTY(d)
		OPT_MODULE_WORK := sum(d in DEM, l in DEM_LINE(d), t in TIME) RPT_MODULE(d,l,t)
		OPT_MODULE_FILLRATE := OPT_MODULE_WORK / OPT_MODULE_DEM * 100
		OPT_MODULE_CAPA := sum(l in MODULELINE, t in TIME) MODULEHOUR(l,t)
		OPT_MODULE_USED := (sum(d in DEM, l in DEM_LINE(d), t in TIME | RPT_MODULE(d,l,t) > ZEROVALUE) MODULETACT(l,DEM_MODULEITEM(d),TIME_MONTH(t))*RPT_MODULE(d,l,t))/3600
		OPT_MODULE_UTILRATE := OPT_MODULE_USED / OPT_MODULE_CAPA * 100
		RPT_MODULE_DEM("TOTAL") := sum(d in DEM) DEM_MODULEQTY(d)
		RPT_MODULE_WORK("TOTAL") := sum(d in DEM, l in DEM_LINE(d), t in TIME) RPT_MODULE(d,l,t)
		RPT_MODULE_FILLRATE("TOTAL") := RPT_MODULE_WORK("TOTAL") / RPT_MODULE_DEM("TOTAL") * 100
		RPT_MODULE_CAPA("TOTAL") := sum(l in MODULELINE, t in TIME) MODULEHOUR(l,t)
		RPT_MODULE_USED("TOTAL") := (sum(d in DEM, l in DEM_LINE(d), t in TIME | RPT_MODULE(d,l,t) > ZEROVALUE) MODULETACT(l,DEM_MODULEITEM(d),TIME_MONTH(t))*RPT_MODULE(d,l,t))/3600
		RPT_MODULE_UTILRATE("TOTAL") := RPT_MODULE_USED("TOTAL") / RPT_MODULE_CAPA("TOTAL") * 100

		forall (m in MONTH) do
			RPT_MODULE_DEM(m) := sum(d in DEM | TIME_MONTH(DEM_DUETIME(d))=m) DEM_MODULEQTY(d)
			RPT_MODULE_WORK(m) := sum(d in DEM, l in DEM_LINE(d), t in TIME | TIME_MONTH(DEM_DUETIME(d))=m) RPT_MODULE(d,l,t)
			RPT_MODULE_FILLRATE(m) := RPT_MODULE_WORK(m) / RPT_MODULE_DEM(m) * 100
			RPT_MODULE_CAPA(m) := sum(l in MODULELINE, t in TIME | TIME_MONTH(t)=m) MODULEHOUR(l,t)
			RPT_MODULE_USED(m) := (sum(d in DEM, l in DEM_LINE(d), t in TIME | TIME_MONTH(t)=m and RPT_MODULE(d,l,t) > ZEROVALUE) MODULETACT(l,DEM_MODULEITEM(d),m)*RPT_MODULE(d,l,t))/3600
			RPT_MODULE_UTILRATE(m) := RPT_MODULE_USED(m) / RPT_MODULE_CAPA(m) * 100
		end-do
		
		display_modulesummary("")
		display_modulesummary("LOG_MODULE_SUMMARY.txt")
		
	end-procedure

	procedure summarize_panelspread
		declarations
			DEMMIN, DEMMAX: integer
			SPREAD_DEM: array(DEM) of integer
			SPREAD_CNT: array(PLANT) of integer
			SPREAD_AVG: array(PLANT) of real
			SPREAD_MIN: array(PLANT) of integer
			SPREAD_MAX: array(PLANT) of integer
			SPREAD_FREQ: array(PLANT,0..100) of integer
			MINCONSUME: real
			SPREAD_REQ: array(PLANT) of real
		end-declarations
		
		forall (d in DEM, p in DEM_PLANT(d)) do
			DEMMIN := 0
			DEMMAX := 0

			forall (l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t) > ZEROVALUE) do
				DEMMIN := if(DEMMIN <= ZEROVALUE or t < DEMMIN, t, DEMMIN)
				DEMMAX := if(DEMMAX <= ZEROVALUE or t > DEMMAX, t, DEMMAX)
			end-do

			SPREAD_DEM(d) := if(DEMMAX > ZEROVALUE and DEMMIN > ZEROVALUE, DEMMAX - DEMMIN + 1, 0)
			SPREAD_CNT(p) += if(SPREAD_DEM(d) > ZEROVALUE, 1, 0)
			SPREAD_AVG(p) += SPREAD_DEM(d)
			SPREAD_MIN(p) := if(SPREAD_MIN(p) <= ZEROVALUE or SPREAD_DEM(d) < SPREAD_MIN(p), SPREAD_DEM(d), SPREAD_MIN(p))
			SPREAD_MAX(p) := if(SPREAD_MAX(p) <= ZEROVALUE or SPREAD_DEM(d) > SPREAD_MAX(p), SPREAD_DEM(d), SPREAD_MAX(p))
			SPREAD_FREQ(p,SPREAD_DEM(d)) += 1
			MINCONSUME := 0
			forall (l in CELLLINE | CELLLINE_PLANT(l) = p and CELLCONSUME(d,l) > ZEROVALUE)
			MINCONSUME := if(MINCONSUME <= ZEROVALUE or CELLCONSUME(d,l) < MINCONSUME, CELLCONSUME(d,l), MINCONSUME)
			SPREAD_REQ(p) := if(SPREAD_REQ(p) <= ZEROVALUE or MINCONSUME/(3600*24) > SPREAD_REQ(p), MINCONSUME/(3600*24), SPREAD_REQ(p))
		end-do

		forall (p in PLANT | SPREAD_CNT(p) > ZEROVALUE)
		SPREAD_AVG(p) := SPREAD_AVG(p)/SPREAD_CNT(p)
		display_loghead("Summary of SPREAD")
		writeln("SPREAD> Spread by Plant at time ", gettime)
		
		write(strfmt("TYPE",40))
		forall (p in PLANT) write(strfmt(p,10))
		writeln
		writeln((40+getsize(PLANT)*10)*"-")
		
		write(strfmt("CNT",40))
		forall (p in PLANT) write(strfmt(SPREAD_CNT(p),10))
		writeln
		
		write(strfmt("AVG",40))
		forall (p in PLANT) write(strfmt(SPREAD_AVG(p),10,2))
		writeln
		
		write(strfmt("MIN",40))
		forall (p in PLANT) write(strfmt(SPREAD_MIN(p),10))
		writeln
		
		write(strfmt("MAX",40))
		forall (p in PLANT) write(strfmt(SPREAD_MAX(p),10))
		writeln
		
		write(strfmt("REQ",40))
		forall (p in PLANT) write(strfmt(SPREAD_REQ(p),10,2))
		writeln
		writeln
		
		writeln("SPREAD> Spread Frequency by Plant at time ", gettime)
		
		write(strfmt("FREQ(0: not assigned, others: days)",40))
		forall (p in PLANT) write(strfmt(p,10))
		writeln
		writeln((40+getsize(PLANT)*10)*"-")
		
		forall (freq in 0..100 | sum(p in PLANT) SPREAD_FREQ(p,freq) > ZEROVALUE) do
			write(strfmt(freq,40))
			forall (p in PLANT) write(strfmt(SPREAD_FREQ(p,freq),10))
			writeln
		end-do
		writeln
		
	end-procedure

	procedure analysis_panel
		declarations
			remarray, remcell, workqty: real
			workhour, reqhour: real
		end-declarations
		
		fopen(OUTPUT_DIR + "VAL_ANALYSIS.txt", F_OUTPUT)
		forall (d in DEM, p in PLANT | PLANTYPE = "PANEL" and DEM_CELLQTY(d) <= ZEROVALUE and DEM_PANELPLANT(d) = p and
				DEM_ARRAYQTY(d)-sum(t in TIME) RPT_ARRAY(d,p,t) > ZEROVALUE) do
			remarray := DEM_ARRAYQTY(d) - sum(t in TIME) RPT_ARRAY(d,p,t)
			writeln("DEMAND:", d, "\t", "REMAINARRAY:", remarray, "\t", "ARRAY_LEADTIME:", ARRAYLEADTIME(d,p))
			forall (t in TIME | DEM_EPST(d) <= t and t <= DEM_LPET(d) and
					t+if(DEM_ARRAYQTY(d)>ZEROVALUE, ARRAYLEADTIME(d,p), 0)+if(DEM_CELLQTY(d)>ZEROVALUE, CELLLEADTIME(d,p), 0) -1 <= DEM_LPET(d))
				forall (res in ARRAYRES | sum(m in MONTH) ARRAYNOM(p,res,m) > ZEROVALUE and ARRAYCONSUME(d,p,res) > ZEROVALUE) do
					workhour := (sum(d2 in DEM | DEM_PANELPLANT(d2)=p and RPT_ARRAY(d2,p,t)>ZEROVALUE) ARRAYCONSUME(d2,p,res)*RPT_ARRAY(d2,p,t)/DEM_ARRAYQTY(d2))/3600
					reqhour := ARRAYCONSUME(d,p,res)*remarray/DEM_ARRAYQTY(d)/3600
					
					writeln("  ARRAY_VALIDATION(and)", "\t", "DATE:", TIME_DATE(t), "\t",
							"RES:", res, "\t", "AVAIL_HOUR:", ARRAYHOUR(p,res,t), "\t",
							"USED_HOUR:", workhour, "\t", "FREE_HOUR:", ARRAYHOUR(p,res,t)-workhour, "\t", "REQ_HOUR:", reqhour, "\t",
							if(ARRAYHOUR(p,res,t)-workhour>=reqhour, "sufficient", "shortage"))
				end-do
			forall (t in TIME | DEM_EPST(d) <= t and t <= DEM_LPET(d) and
					t+if(DEM_ARRAYQTY(d)>ZEROVALUE, ARRAYLEADTIME(d,p), 0)+if(DEM_CELLQTY(d)>ZEROVALUE, CELLLEADTIME(d,p), 0)-1 <= DEM_LPET(d))
				forall (r in RLIMIT | LIMIT_PROCESS(r) = _ARRAY and LIMIT_PLANT(r) = p and DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and
						LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) do
					workqty := sum(d2 in DEM, t2 in TIME | DEM_PANELPLANT(d2) = LIMIT_PLANT(r) and DEM_ARRAYITEM(d2) in LIMIT_ITEM(r) and
					LIMIT_STARTTIME(r) <= t2 and t2 <= LIMIT_ENDTIME(r)) RPT_ARRAY(d2,LIMIT_PLANT(r),t2)
					writeln("  PRODLIMIT_VALIDATION(and)", "\t", "DATE:", TIME_DATE(t), "\t",
					"PRODLIMIT:", LIMIT_NAME(r), "\t", "LIMIT_QTY:", LIMIT_QTY(r), "\t",
					"USED_QTY:", workqty, "\t", "FREE_QTY:", LIMIT_QTY(r)-workqty, "\t", "REQ_QTY:", remarray, "\t",
					if(LIMIT_QTY(r)-workqty>=remarray, "sufficient", "shortage"))
				end-do
			writeln
		end-do

		forall (d in DEM, p in PLANT | PLANTYPE = "PANEL" and DEM_CELLQTY(d) > ZEROVALUE and DEM_PANELPLANT(d) = p and
				DEM_CELLQTY(d)-sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > ZEROVALUE) do
			
			remarray := DEM_ARRAYQTY(d) - sum(t in TIME) RPT_ARRAY(d,p,t)
			remcell := DEM_CELLQTY(d) - sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)
			writeln("DEMAND:", d, "\t", "REMAINARRAY:", remarray, "\t", "ARRAY_LEADTIME:", ARRAYLEADTIME(d,p), "\t",
					"REMAINCELL:", remcell, "\t", "CELL_LEADTIME:", CELLLEADTIME(d,p))
			
			forall (t in TIME | DEM_EPST(d) <= t and t <= DEM_LPET(d) and
					t+if(DEM_ARRAYQTY(d)>ZEROVALUE, ARRAYLEADTIME(d,p), 0)+if(DEM_CELLQTY(d)>ZEROVALUE, CELLLEADTIME(d,p), 0)-1 <= DEM_LPET(d))
				forall (res in ARRAYRES | sum(m in MONTH) ARRAYNOM(p,res,m) > ZEROVALUE and ARRAYCONSUME(d,p,res) > ZEROVALUE) do
					workhour := (sum(d2 in DEM | DEM_PANELPLANT(d2)=p and RPT_ARRAY(d2,p,t)>ZEROVALUE) ARRAYCONSUME(d2,p,res)*RPT_ARRAY(d2,p,t)/DEM_ARRAYQTY(d2))/3600
					reqhour := ARRAYCONSUME(d,p,res)*remarray/DEM_ARRAYQTY(d)/3600
					writeln("  ARRAY_VALIDATION(and)", "\t", "DATE:", TIME_DATE(t), "\t",
							"RES:", res, "\t", "AVAIL_HOUR:", ARRAYHOUR(p,res,t), "\t",
							"USED_HOUR:", workhour, "\t", "FREE_HOUR:", ARRAYHOUR(p,res,t)-workhour, "\t", "REQ_HOUR:", reqhour, "\t",
							if(ARRAYHOUR(p,res,t)-workhour>=reqhour, "sufficient", "shortage"))
				end-do
			
			forall (t in TIME | DEM_EPST(d) <= t and t <= DEM_LPET(d) and
					DEM_EPST(d)+if(DEM_ARRAYQTY(d)>ZEROVALUE, ARRAYLEADTIME(d,p), 0)-1 <= t and t+CELLLEADTIME(d,p)-1 <= DEM_LPET(d))
				forall (l in DEM_LINE(d) | DEM_CELLITEM(d) in CELLCONF(l) and CELLNOM(l,TIME_MONTH(t)) > ZEROVALUE and CELLCONSUME(d,l) > ZEROVALUE) do
					workhour := (sum(d2 in DEM | DEM_PANELPLANT(d2)=p and l in DEM_LINE(d2) and RPT_CELL(d2,l,t)>ZEROVALUE) CELLCONSUME(d2,l)*RPT_CELL(d2,l,t)/DEM_CELLQTY(d2))/3600
					reqhour := CELLCONSUME(d,l)*remcell/DEM_CELLQTY(d)/3600
					writeln("  CELL_VALIDATION(or)", "\t", "DATE:", TIME_DATE(t), "\t",
							"LINE:", l, "\t", "AVAIL_HOUR:", CELLHOUR(l,t), "\t",
							"USED_HOUR:", workhour, "\t", "FREE_HOUR:", CELLHOUR(l,t)-workhour, "\t", "REQ_HOUR:", reqhour, "\t",
							if(CELLHOUR(l,t)-workhour>=reqhour, "sufficient", "shortage"))
				end-do
			
			forall (t in TIME | DEM_EPST(d) <= t and t <= DEM_LPET(d) and
					t+if(DEM_ARRAYQTY(d)>ZEROVALUE, ARRAYLEADTIME(d,p), 0)+if(DEM_CELLQTY(d)>ZEROVALUE, CELLLEADTIME(d,p), 0)-1 <= DEM_LPET(d))
				forall (r in RLIMIT | LIMIT_PROCESS(r) = _ARRAY and LIMIT_PLANT(r) = p and DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and
						LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) do
					workqty := sum(d2 in DEM, t2 in TIME | DEM_PANELPLANT(d2) = LIMIT_PLANT(r) and DEM_ARRAYITEM(d2) in LIMIT_ITEM(r) and
									LIMIT_STARTTIME(r) <= t2 and t2 <= LIMIT_ENDTIME(r)) RPT_ARRAY(d2,LIMIT_PLANT(r),t2)
					writeln("  PRODLIMIT_VALIDATION(and)", "\t", "DATE:", TIME_DATE(t), "\t",
							"PRODLIMIT:", LIMIT_NAME(r), "\t", "LIMIT_QTY:", LIMIT_QTY(r), "\t",
							"USED_QTY:", workqty, "\t", "FREE_QTY:", LIMIT_QTY(r)-workqty, "\t", "REQ_QTY:", remarray, "\t",
							if(LIMIT_QTY(r)-workqty>=remarray, "sufficient", "shortage"))
				end-do
			writeln
		end-do
		
		fclose(F_OUTPUT)
		
	end-procedure

	procedure write_result

		declarations
			workhour, workqty: real
		end-declarations
		
		fopen(OUTPUT_DIR + "OUT_VERSION.txt", F_OUTPUT)
		writeln(VERSIONID, "\t", OPT_STATUS, "\t", OPT_TIME, "\t", OPT_GAP, "\t", OPT_NODE, "\t", OPT_OBJVAL)
		fclose(F_OUTPUT)
		
		fopen(OUTPUT_DIR + "OUT_ARRAY.txt", F_OUTPUT)
		forall (d in DEM, p in PLANT, t in TIME | PLANTYPE = "PANEL" and DEM_PANELPLANT(d) = p and RPT_ARRAY(d,p,t) > ZEROVALUE)
			writeln(d, "\t", p, "\t", TIME_DATE(t), "\t", RPT_ARRAY(d,p,t))
		fclose(F_OUTPUT)
		
		fopen(OUTPUT_DIR + "OUT_CELL.txt", F_OUTPUT)
		forall (d in DEM, l in DEM_LINE(d), t in TIME | PLANTYPE = "PANEL" and RPT_CELL(d,l,t) > ZEROVALUE)
			writeln(d, "\t", l, "\t", TIME_DATE(t), "\t", RPT_CELL(d,l,t))
		fclose(F_OUTPUT)
		
		fopen(OUTPUT_DIR + "OUT_MODULE.txt", F_OUTPUT)
		forall (d in DEM, l in DEM_LINE(d), t in TIME | PLANTYPE = "MODULE" and RPT_MODULE(d,l,t) > ZEROVALUE)
			writeln(d, "\t", l, "\t", TIME_DATE(t), "\t", RPT_MODULE(d,l,t))
		fclose(F_OUTPUT)
		
		fopen(OUTPUT_DIR + "OUT_ARRAYUTIL.txt", F_OUTPUT)
		forall (p in PLANT, res in ARRAYRES, t in TIME | PLANTYPE = "PANEL" and sum(m in MONTH) ARRAYNOM(p,res,m) > ZEROVALUE) do
			workhour := (sum(d in DEM | DEM_PANELPLANT(d)=p and RPT_ARRAY(d,p,t)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600
			writeln(p, "\t", res, "\t", TIME_DATE(t), "\t",
					ARRAYNOM(p,res,TIME_MONTH(t)), "\t", ARRAYCALENDAR(p,t), "\t", ARRAYDOWN(p,res,t), "\t",
					ARRAYHOUR(p,res,t), "\t",
					workhour, "\t",
					if(ARRAYHOUR(p,res,t) <= ZEROVALUE, 0, workhour/ARRAYHOUR(p,res,t)*100))
		end-do
		fclose(F_OUTPUT)
		
		fopen(OUTPUT_DIR + "OUT_CELLUTIL.txt", F_OUTPUT)
		forall (p in PLANT, l in PLANT_CELLLINE(p), t in TIME | PLANTYPE = "PANEL") do
			workhour := (sum(d in DEM | DEM_PANELPLANT(d)=p and l in DEM_LINE(d) and RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600
			writeln(l, "\t", TIME_DATE(t), "\t",
					CELLNOM(l,TIME_MONTH(t)), "\t", CELLCALENDAR(p,t), "\t", CELLDOWN(l,t), "\t",
					CELLHOUR(l,t), "\t",
					workhour, "\t",
					if(CELLHOUR(l,t) <= ZEROVALUE, 0, workhour/CELLHOUR(l,t)*100))
		end-do
		fclose(F_OUTPUT)
		
		fopen(OUTPUT_DIR + "OUT_MODULEUTIL.txt", F_OUTPUT)
		forall (p in PLANT, l in PLANT_MODULELINE(p), t in TIME | PLANTYPE = "MODULE") do
			workhour := (sum(d in DEM | l in DEM_LINE(d) and RPT_MODULE(d,l,t)>ZEROVALUE) MODULETACT(l,DEM_MODULEITEM(d),TIME_MONTH(t))*RPT_MODULE(d,l,t))/3600
			writeln(l, "\t", TIME_DATE(t), "\t",
					MODULENOM(l,TIME_MONTH(t)), "\t", MODULECALENDAR(p,t), "\t", MODULEDOWN(l,t), "\t",
					MODULEHOUR(l,t), "\t",
					workhour, "\t",
					if(MODULEHOUR(l,t) <= ZEROVALUE, 0, workhour/MODULEHOUR(l,t)*100))
		end-do
		fclose(F_OUTPUT)
		
		fopen(OUTPUT_DIR + "OUT_PRODLIMITUTIL.txt", F_OUTPUT)
		forall (r in RLIMIT) do
			if LIMIT_PROCESS(r) = _ARRAY then
				workqty := sum(d in DEM, t in TIME | DEM_PANELPLANT(d) = LIMIT_PLANT(r) and DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and
				LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) RPT_ARRAY(d,LIMIT_PLANT(r),t)
				writeln(LIMIT_NAME(r), "\t", LIMIT_PROCESS(r), "\t", LIMIT_PLANT(r), "\t",
						TIME_DATE(LIMIT_STARTTIME(r)), "\t", TIME_DATE(LIMIT_ENDTIME(r)), "\t",
						LIMIT_QTY(r), "\t", workqty, "\t",
						if(LIMIT_QTY(r) <= ZEROVALUE, 0, workqty/LIMIT_QTY(r)*100))
			elif LIMIT_PROCESS(r) = _CELL then
				workqty := sum(d in DEM, l in DEM_LINE(d), t in TIME | DEM_PANELPLANT(d) = LIMIT_PLANT(r) and DEM_CELLITEM(d) in LIMIT_ITEM(r) and
				LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) RPT_CELL(d,l,t)
				writeln(LIMIT_NAME(r), "\t", LIMIT_PROCESS(r), "\t", LIMIT_PLANT(r), "\t",
						TIME_DATE(LIMIT_STARTTIME(r)), "\t", TIME_DATE(LIMIT_ENDTIME(r)), "\t",
						LIMIT_QTY(r), "\t", workqty, "\t",
						if(LIMIT_QTY(r) <= ZEROVALUE, 0, workqty/LIMIT_QTY(r)*100))
			elif LIMIT_PROCESS(r) = _MODULE then
				workqty := sum(d in DEM, l in DEM_LINE(d), t in TIME | l in PLANT_MODULELINE(LIMIT_PLANT(r)) and DEM_MODULEITEM(d) in LIMIT_ITEM(r) and
				LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) RPT_MODULE(d,l,t)
				writeln(LIMIT_NAME(r), "\t", LIMIT_PROCESS(r), "\t", LIMIT_PLANT(r), "\t",
						TIME_DATE(LIMIT_STARTTIME(r)), "\t", TIME_DATE(LIMIT_ENDTIME(r)), "\t",
						LIMIT_QTY(r), "\t", workqty, "\t",
						if(LIMIT_QTY(r) <= ZEROVALUE, 0, workqty/LIMIT_QTY(r)*100))
			end-if
		end-do
		
		fclose(F_OUTPUT)
	
	end-procedure

	procedure save_b4exit
		fopen(OUTPUT_DIR + "LOG_SAVEB4EXIT.txt", F_OUTPUT)
		
		forall (d in DEM, p in PLANT, t in TIME | PLANTYPE = "PANEL" and RPT_ARRAY(d,p,t) > ZEROVALUE)
			writeln(d, "\t", "ARRAY", "\t", p, "\t", TIME_DATE(t), "\t", RPT_ARRAY(d,p,t))
		
		forall (d in DEM, l in DEM_LINE(d), t in TIME | PLANTYPE = "PANEL" and RPT_CELL(d,l,t) > ZEROVALUE)
			writeln(d, "\t", "CELL", "\t", l, "\t", TIME_DATE(t), "\t", RPT_CELL(d,l,t))
		
		forall (d in DEM, l in DEM_LINE(d), t in TIME | PLANTYPE = "MODULE" and RPT_MODULE(d,l,t) > ZEROVALUE)
			writeln(d, "\t", "MODULE", "\t", l, "\t", TIME_DATE(t), "\t", RPT_MODULE(d,l,t))
		
		fclose(F_OUTPUT)
	
	end-procedure

	procedure prefix_panel
		forall (d in DEM, p in DEM_PLANT(d), t in TIME | ARRAYFIX(d,p,t) > ZEROVALUE) do
			DEM_STAGE(d) := 0
			RPT_ARRAY(d,p,t) := ARRAYFIX(d,p,t)
		end-do

		forall (d in DEM, l in DEM_LINE(d), t in TIME | CELLFIX(d,l,t) > ZEROVALUE) do
			DEM_STAGE(d) := 0
			RPT_CELL(d,l,t) := CELLFIX(d,l,t)
		end-do

	end-procedure

	procedure prefix_module
		forall (d in DEM, l in DEM_LINE(d), t in TIME | MODULEFIX(d,l,t) > ZEROVALUE) do
			DEM_STAGE(d) := 0
			RPT_MODULE(d,l,t) := MODULEFIX(d,l,t)
		end-do

	end-procedure

	procedure solve_panel(dem_new:set of string, dem_fix:set of string, p:string, line:set of string, s:integer, layer:integer)
	with model_panel(p,s,layer) do
	
		declarations
			ifarrayplant: dynamic array(dem_new) of mpvar
			arraywork: dynamic array(dem_new,TIME) of mpvar
			ifarraywork: dynamic array(dem_new,TIME) of mpvar
			cellwork: dynamic array(dem_new,line,TIME) of mpvar
			ifcellwork: dynamic array(dem_new,line,TIME) of mpvar
			ifcellitem: dynamic array(line,CELLITEM) of mpvar
			ifcellitemgroup: dynamic array(line,CELLITEMGROUP) of mpvar
			ifdemand: dynamic array(dem_new) of mpvar
			close: array(dem_new) of mpvar
			ArrayWorkQty: dynamic array(dem_new) of linctr
			CellWorkQty: dynamic array(dem_new) of linctr
			ArrayCellQty: dynamic array(dem_new) of linctr
			ArrayCellTime: dynamic array(dem_new,TIME) of linctr
			ArrayNotSplit: dynamic array(dem_new) of linctr
			CellNotSplit: dynamic array(dem_new) of linctr
			CapaArray: dynamic array(ARRAYRES,TIME) of linctr
			CapaCell: dynamic array(line,TIME) of linctr
			ArrayWorkMax: dynamic array(dem_new,TIME) of linctr
			ArrayWorkMin: dynamic array(dem_new,TIME) of linctr
			CellWorkMax: dynamic array(dem_new,line,TIME) of linctr
			CellWorkMin: dynamic array(dem_new,line,TIME) of linctr
			IfArrayPlantMax: dynamic array(dem_new) of linctr
			IfArrayPlantMin: dynamic array(dem_new) of linctr
			IfDemandMax: dynamic array(dem_new) of linctr
			IfDemandMin: dynamic array(dem_new) of linctr
			CellItemMax: dynamic array(line,CELLITEM) of linctr
			CellItemMin: dynamic array(line,CELLITEM) of linctr
			CellItemGroupMax: dynamic array(line,CELLITEMGROUP) of linctr
			CellItemGroupMin: dynamic array(line,CELLITEMGROUP) of linctr
			ArrayClosenessEarly: dynamic array(dem_new) of linctr
			ArrayClosenessLate: dynamic array(dem_new) of linctr
			CellClosenessEarly: dynamic array(dem_new) of linctr
			CellClosenessLate: dynamic array(dem_new) of linctr
			ProdLimitArray: dynamic array(RLIMIT) of linctr
			ProdLimitCell: dynamic array(RLIMIT) of linctr
			LayerArray2: dynamic array(dem_new,TIME) of linctr
			LayerCell2: dynamic array(dem_new,line,TIME) of linctr
			LayerArray3: dynamic array(dem_new) of linctr
			LayerCell3: dynamic array(dem_new) of linctr
			LayerArray4: linctr
			LayerCell4: linctr
			maxObjFulfill: linctr
			maxObjPriority: linctr
			maxObjLinePriority: linctr
			minObjItem: linctr
			minObjItemgroup: linctr
			maxObjSequence: linctr
			maxObjEarlyProd: linctr
			maxObjOntime: linctr
			minObjCloseness: linctr
			maxObj: linctr
			QTYMIN, ARRAYMAX, CELLMAX: real
			startclock: real
			n_gap: integer
			gap, s_gap, ss_gap: real
			n_target, n_achieve: integer
			qty_target, qty_achieve: real
			PRIO_TOTAL: array(RPRIO) of real
		end-declarations
		
		display_loghead("Optimization model_panel ( PLANT " + p + " STAGE " + s + " LAYER " + strfmt(layer,0) + " )")
		startclock := gettime
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> Optimizer started at time ", gettime)

		setparam("XPRS_VERBOSE", true)
		setparam("XPRS_LOADNAMES", true)
		setparam("XPRS_MAXTIME", MAXTIME)
		setparam("XPRS_MAXNODE", MAXNODE)
		setparam("XPRS_MIPRELSTOP", MIPRELSTOP)

		QTYMIN := 1
		ARRAYMAX := sum(d in dem_new) DEM_ARRAYQTY(d)
		CELLMAX := sum(d in dem_new) DEM_CELLQTY(d)
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> QTYMIN ", QTYMIN, " ARRAYMAX ", ARRAYMAX, " CELLMAX ", CELLMAX)
		writeln
		
		forall (d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE) do
			create(ifarrayplant(d)); ifarrayplant(d) is_binary
			forall (t in TIME | DEM_EPST(d) <= t and t <= DEM_LPET(d) and
				t+if(DEM_ARRAYQTY(d)>ZEROVALUE, ARRAYLEADTIME(d,p), 0)+if(DEM_CELLQTY(d)>ZEROVALUE, CELLLEADTIME(d,p), 0)-1 <= DEM_LPET(d)) do
				create(arraywork(d,t))
				if IS_INTEGRAL_WORK then
					arraywork(d,t) is_integer
				end-if
				create(ifarraywork(d,t)); ifarraywork(d,t) is_binary
			end-do
		end-do
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(arraywork), " arraywork created at time ", gettime)
		
		forall (d in dem_new, l in DEM_LINE(d) | DEM_CELLQTY(d) > ZEROVALUE and DEM_CELLITEM(d) in CELLCONF(l)) do
			forall (t in TIME | CELLNOM(l,TIME_MONTH(t)) > ZEROVALUE and CELLCONSUME(d,l) > ZEROVALUE and
					DEM_EPST(d) <= t and t <= DEM_LPET(d) and
					DEM_EPST(d)+if(DEM_ARRAYQTY(d)>ZEROVALUE, ARRAYLEADTIME(d,p), 0)-1 <= t and
					t+CELLLEADTIME(d,p)-1 <= DEM_LPET(d)) do
				create(cellwork(d,l,t))
				
				if IS_INTEGRAL_WORK then
					cellwork(d,l,t) is_integer
				end-if
				
				create(ifcellwork(d,l,t)); ifcellwork(d,l,t) is_binary
			end-do
		end-do
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(cellwork), " cellwork created at time ", gettime)
		
		forall (l in line, i in CELLCONF(l)) do
			create(ifcellitem(l,i)); ifcellitem(l,i) is_binary
		end-do
		
		forall (l in line, ig in CELLITEMGROUP) do
			create(ifcellitemgroup(l,ig)); ifcellitemgroup(l,ig) is_binary
		end-do
		
		forall (d in dem_new | IS_COMPLETE_DEMAND) do
			create(ifdemand(d)); ifdemand(d) is_binary
		end-do
		
		forall (d in dem_new)
			ArrayWorkQty(d) := sum(t in TIME | exists(arraywork(d,t))) arraywork(d,t) <= DEM_ARRAYQTY(d)
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(ArrayWorkQty), " ArrayWorkQty linctr generated at time ", gettime)
		forall (d in dem_new)
			if IS_COMPLETE_DEMAND then
				CellWorkQty(d) := sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) = DEM_CELLQTY(d) * ifdemand(d)
			else
				CellWorkQty(d) := sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) <= DEM_CELLQTY(d)
			end-if
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(CellWorkQty), " CellWorkQty linctr generated at time ", gettime)
		forall (d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE)
			ArrayCellQty(d) := sum(t in TIME | exists(arraywork(d,t))) arraywork(d,t) =
				sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) +
				(DEM_ARRAYQTY(d) - DEM_CELLQTY(d)) * ifarrayplant(d)
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(ArrayCellQty), " ArrayCellQty linctr generated at time ", gettime)
		forall (d in dem_new, t in TIME | DEM_ARRAYQTY(d) > ZEROVALUE and exists(arraywork(d,t)))
			ArrayCellTime(d,t) := ifarraywork(d,t) <= sum(l in DEM_LINE(d), buff in 0..MAXBUFF_SYNC | exists(ifcellwork(d,l,t+ARRAYLEADTIME(d,p)+buff))) ifcellwork(d,l,t+ARRAYLEADTIME(d,p)+buff)
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(ArrayCellTime), " ArrayCellTime linctr generated at time ", gettime)
		forall (d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE)
			ArrayNotSplit(d) := sum(t in TIME | exists(ifarraywork(d,t))) ifarraywork(d,t) <= 1
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(ArrayNotSplit), " ArrayNotSplit linctr generated at time ", gettime)
		forall (d in dem_new | DEM_CELLQTY(d) > ZEROVALUE)
			CellNotSplit(d) := sum(l in DEM_LINE(d), t in TIME | exists(ifcellwork(d,l,t))) ifcellwork(d,l,t) <= 1
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(CellNotSplit), " CellNotSplit linctr generated at time ", gettime)
		forall (res in ARRAYRES, t in TIME | ARRAYNOM(p,res,TIME_MONTH(t)) > ZEROVALUE)
			CapaArray(res,t) := sum(d in dem_new | exists(arraywork(d,t))) ARRAYCONSUME(d,p,res)*arraywork(d,t)/DEM_ARRAYQTY(d) <=
				maxlist(0, ARRAYHOUR(p,res,t)*3600 - sum(d in dem_fix | DEM_ARRAYQTY(d)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(CapaArray), " CapaArray linctr generated at time ", gettime)
		forall (l in line, t in TIME | CELLNOM(l,TIME_MONTH(t)) > ZEROVALUE)
			CapaCell(l,t) := sum(d in dem_new | exists(cellwork(d,l,t))) CELLCONSUME(d,l)*cellwork(d,l,t)/DEM_CELLQTY(d) <=
				maxlist(0, CELLHOUR(l,t)*3600 - sum(d in dem_fix | DEM_CELLQTY(d)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(CapaCell), " CapaCell linctr generated at time ", gettime)
		forall (d in dem_new, t in TIME | exists(ifarraywork(d,t))) do
			ArrayWorkMax(d,t) := arraywork(d,t) <= DEM_ARRAYQTY(d) * ifarraywork(d,t)
			ArrayWorkMin(d,t) := arraywork(d,t) >= QTYMIN * ifarraywork(d,t)
		end-do

		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", 2*getsize(ArrayWorkMax), " ArrayWork linctr generated at time ", gettime)
		forall (d in dem_new, l in DEM_LINE(d), t in TIME | exists(ifcellwork(d,l,t))) do
			CellWorkMax(d,l,t) := cellwork(d,l,t) <= DEM_CELLQTY(d) * ifcellwork(d,l,t)
			CellWorkMin(d,l,t) := cellwork(d,l,t) >= DEM_MINQTY(d) * ifcellwork(d,l,t)
		end-do

		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", 2*getsize(CellWorkMax), " CellWork linctr generated at time ", gettime)
		forall (d in dem_new | exists(ifarrayplant(d))) do
			IfArrayPlantMax(d) := sum(t in TIME | exists(arraywork(d,t))) arraywork(d,t) <= DEM_ARRAYQTY(d) * ifarrayplant(d)
			IfArrayPlantMin(d) := sum(t in TIME | exists(arraywork(d,t))) arraywork(d,t) >= QTYMIN * ifarrayplant(d)
		end-do

		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", 2*getsize(IfArrayPlantMax), " IfArrayPlant linctr generated at time ", gettime)
		forall (d in dem_new | exists(ifdemand(d))) do
			IfDemandMax(d) := sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) <= DEM_CELLQTY(d) * ifdemand(d)
			IfDemandMin(d) := sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) >= QTYMIN * ifdemand(d)
		end-do

		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", 2*getsize(IfDemandMax), " IfDemand linctr generated at time ", gettime)
		forall (l in line, i in CELLCONF(l) | exists(ifcellitem(l,i))) do
			CellItemMax(l,i) := sum(d in dem_new, t in TIME | exists(cellwork(d,l,t)) and DEM_CELLITEM(d)=i) cellwork(d,l,t) <= CELLMAX * ifcellitem(l,i)
			CellItemMin(l,i) := sum(d in dem_new, t in TIME | exists(cellwork(d,l,t)) and DEM_CELLITEM(d)=i) cellwork(d,l,t) >= QTYMIN * ifcellitem(l,i)
		end-do

		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", 2*getsize(CellItemMax), " CellItem linctr generated at time ", gettime)
		forall (l in line, ig in CELLITEMGROUP | exists(ifcellitemgroup(l,ig))) do
			CellItemGroupMax(l,ig) := sum(d in dem_new, t in TIME | exists(cellwork(d,l,t)) and CELLITEM_GROUP(DEM_CELLITEM(d))=ig) cellwork(d,l,t) <= CELLMAX * ifcellitemgroup(l,ig)
			CellItemGroupMin(l,ig) := sum(d in dem_new, t in TIME | exists(cellwork(d,l,t)) and CELLITEM_GROUP(DEM_CELLITEM(d))=ig) cellwork(d,l,t) >= QTYMIN * ifcellitemgroup(l,ig)
		end-do

		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", 2*getsize(CellItemGroupMax), " CellItemGroup linctr generated at time ", gettime)
		forall (d in dem_new | DEM_CELLQTY(d) <= ZEROVALUE) do
			ArrayClosenessEarly(d) := close(d) >= DEM_DUETIME(d) - sum(t in TIME) (t+ARRAYLEADTIME(d,p)-1)*ifarraywork(d,t)
			ArrayClosenessLate(d) := close(d) >= sum(t in TIME) (t+ARRAYLEADTIME(d,p)-1)*ifarraywork(d,t) - DEM_DUETIME(d)
		end-do

		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", 2*getsize(ArrayClosenessEarly), " ArrayCloseness linctr generated at time ", gettime)
		forall (d in dem_new | DEM_CELLQTY(d) > ZEROVALUE) do
			CellClosenessEarly(d) := close(d) >= DEM_DUETIME(d) - sum(l in DEM_LINE(d), t in TIME) (t+CELLLEADTIME(d,p)-1)*ifcellwork(d,l,t)
			CellClosenessLate(d) := close(d) >= sum(l in DEM_LINE(d), t in TIME) (t+CELLLEADTIME(d,p)-1)*ifcellwork(d,l,t) - DEM_DUETIME(d)
		end-do

		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", 2*getsize(CellClosenessEarly), " CellCloseness linctr generated at time ", gettime)
		forall (r in RLIMIT | LIMIT_PROCESS(r) = _ARRAY and LIMIT_PLANT(r) = p)
			ProdLimitArray(r) := sum(d in dem_new, t in TIME | DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) arraywork(d,t) <=
								maxlist(0, LIMIT_QTY(r) - sum(d in dem_fix, t in TIME | DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) RPT_ARRAY(d,p,t))
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(ProdLimitArray), " ProdLimitArray linctr generated at time ", gettime)
		forall (r in RLIMIT | LIMIT_PROCESS(r) = _CELL and LIMIT_PLANT(r) = p)
			ProdLimitCell(r) := sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) cellwork(d,l,t) <=
								maxlist(0, LIMIT_QTY(r) - sum(d in dem_fix, l in DEM_LINE(d), t in TIME | DEM_CELLITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) RPT_CELL(d,l,t))
		
		writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ", getsize(ProdLimitCell), " ProdLimitCell linctr generated at time ", gettime)
		maxObjFulfill := sum(d in dem_new, t in TIME | exists(arraywork(d,t))) arraywork(d,t) +
						sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t)
		maxObjPriority := sum(d in dem_new, t in TIME | exists(arraywork(d,t))) DEM_WEIGHT(d)*arraywork(d,t) +
						sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) DEM_WEIGHT(d)*cellwork(d,l,t)
		maxObjLinePriority := sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) CELLWEIGHT(l,DEM_CELLITEM(d))*cellwork(d,l,t)
		minObjItem := sum(l in line, i in CELLCONF(l) | exists(ifcellitem(l,i))) ifcellitem(l,i)
		minObjItemgroup := sum(l in line, ig in CELLITEMGROUP | exists(ifcellitemgroup(l,ig))) ifcellitemgroup(l,ig)
		maxObjSequence := 0.01*sum(d in dem_new, t in TIME | DEM_CELLQTY(d) <= ZEROVALUE and exists(ifarraywork(d,t))) (t+ARRAYLEADTIME(d,p)-1)*DEM_DUETIME(d)*ifarraywork(d,t) +
						0.01*sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLQTY(d) > ZEROVALUE and exists(ifcellwork(d,l,t))) (t+CELLLEADTIME(d,p)-1)*DEM_DUETIME(d)*ifcellwork(d,l,t)
		maxObjEarlyProd := 0.01*sum(d in dem_new, t in TIME | DEM_CELLQTY(d) <= ZEROVALUE and exists(ifarraywork(d,t))) (getsize(TIME)-t)*arraywork(d,t) +
						0.01*sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLQTY(d) > ZEROVALUE and exists(ifcellwork(d,l,t))) (getsize(TIME)-t)*cellwork(d,l,t)
		maxObjOntime := sum(d in dem_new, t in TIME | DEM_CELLQTY(d) <= ZEROVALUE and exists(ifarraywork(d,t)) and t+ARRAYLEADTIME(d,p)-1 <= DEM_DUETIME(d)) arraywork(d,t) +
						sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLQTY(d) > ZEROVALUE and exists(ifcellwork(d,l,t)) and t+CELLLEADTIME(d,p)-1 <= DEM_DUETIME(d)) cellwork(d,l,t)
		minObjCloseness := sum(d in dem_new) close(d)
		
		if layer = 1 then
			maxObj := WEIGHT_FULFILL*maxObjFulfill + WEIGHT_PRIORITY*maxObjPriority
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> objectives generated at time ", gettime)
		elif layer = 2 then
			if PANEL_GOAL = "STRONG" then
				forall (d in dem_new, t in TIME | exists(arraywork(d,t)) and RPT_ARRAY(d,p,t) > ZEROVALUE)
						LayerArray2(d,t) := arraywork(d,t) >= RPT_ARRAY(d,p,t)
				forall (d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t)) and RPT_CELL(d,l,t) > ZEROVALUE)
					LayerCell2(d,l,t) := cellwork(d,l,t) >= RPT_CELL(d,l,t)
				maxObj := WEIGHT_LINEPRIORITY*maxObjLinePriority +
						- WEIGHT_ITEM*minObjItem - WEIGHT_ITEMGROUP*minObjItemgroup +
						WEIGHT_SEQUENCE*maxObjSequence + WEIGHT_EARLYPROD*maxObjEarlyProd +
						WEIGHT_ONTIME*maxObjOntime - WEIGHT_CLOSENESS*minObjCloseness
			
				writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> objectives generated at time ", gettime)
			elif PANEL_GOAL = "WEAK" then
				forall (d in dem_new) do
					LayerArray3(d) := sum(t in TIME | exists(arraywork(d,t))) arraywork(d,t) >= sum(t in TIME) RPT_ARRAY(d,p,t)
					LayerCell3(d) := sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) >= sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)
				end-do
				maxObj := WEIGHT_LINEPRIORITY*maxObjLinePriority +
						- WEIGHT_ITEM*minObjItem - WEIGHT_ITEMGROUP*minObjItemgroup +
						WEIGHT_SEQUENCE*maxObjSequence + WEIGHT_EARLYPROD*maxObjEarlyProd +
						WEIGHT_ONTIME*maxObjOntime - WEIGHT_CLOSENESS*minObjCloseness
			
				writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> objectives generated at time ", gettime)
			elif PANEL_GOAL = "TOTAL" then
				LayerArray4 := sum(d in dem_new, t in TIME | exists(arraywork(d,t))) arraywork(d,t) >= sum(d in dem_new, t in TIME) RPT_ARRAY(d,p,t)
				LayerCell4 := sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) >= sum(d in dem_new, l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)
				maxObj := WEIGHT_FULFILL*maxObjFulfill + WEIGHT_PRIORITY*maxObjPriority +
						WEIGHT_LINEPRIORITY*maxObjLinePriority +
						- WEIGHT_ITEM*minObjItem - WEIGHT_ITEMGROUP*minObjItemgroup +
						WEIGHT_SEQUENCE*maxObjSequence + WEIGHT_EARLYPROD*maxObjEarlyProd +
						WEIGHT_ONTIME*maxObjOntime - WEIGHT_CLOSENESS*minObjCloseness
				writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> objectives generated at time ", gettime)
			else
				exit_warning("PANEL_GOAL is not defiend at Panel 2nd Layer")
			end-if
		end-if
		
		maximize (maxObj)
		
		RPT3_PANEL_TIME(p,s) += (gettime - startclock)
		RPT3_PANEL_NODE(p,s) += getparam("XPRS_NODES")
		
		if getparam("XPRS_mipstatus") = XPRS_MIP_LP_OPTIMAL then
			writeln("MIP solution status is MIP_LP_OPTIMAL")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_LP_NOT_OPTIMAL then
			writeln("MIP solution status is MIP_LP_NOT_OPTIMAL")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_OPTIMAL then
			writeln("MIP solution status is MIP_OPTIMAL")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_SOLUTION then
			writeln("MIP solution status is MIP_SOLUTION")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_INFEAS then
			writeln("MIP solution status is MIP_INFEAS")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_NO_SOL_FOUND then
			writeln("MIP solution status is MIP_NO_SOL_FOUND")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_NOT_LOADED then
			writeln("MIP solution status is MIP_NOT_LOADED")
		end-if
		
		if getparam("XPRS_mipstatus") in {XPRS_OPT, XPRS_MIP_SOLUTION, XPRS_MIP_OPTIMAL} then
			writeln("Solution found at time ", gettime)
			writeln
			RPT3_PANEL_STATUS(p,s) := 0
			RPT3_PANEL_GAP(p,s) := if(getobjval > ZEROVALUE, maxlist(RPT3_PANEL_GAP(p,s), (getparam("XPRS_BESTBOUND")-getobjval)/getparam("XPRS_BESTBOUND")*100), 0)
			RPT3_PANEL_OBJVAL(p,s) := getobjval
			RPT3_PANEL_BESTBOUND(p,s) := RPT3_PANEL_OBJVAL(p,s) / (1-RPT3_PANEL_GAP(p,s)/100)
			RPT3_PANEL_OBJ_FULFILL(p,s) := getsol(maxObjFulfill)
			RPT3_PANEL_OBJ_PRIORITY(p,s) := getsol(maxObjPriority)
			RPT3_PANEL_OBJ_LINEPRIORITY(p,s) := getsol(maxObjLinePriority)
			RPT3_PANEL_OBJ_ITEM(p,s) := getsol(minObjItem)
			RPT3_PANEL_OBJ_ITEMGROUP(p,s) := getsol(minObjItemgroup)
			RPT3_PANEL_OBJ_SEQUENCE(p,s) := getsol(maxObjSequence)
			RPT3_PANEL_OBJ_EARLYPROD(p,s) := getsol(maxObjEarlyProd)
			RPT3_PANEL_OBJ_ONTIME(p,s) := getsol(maxObjOntime)
			RPT3_PANEL_OBJ_CLOSENESS(p,s) := getsol(minObjCloseness)
		
			forall (d in dem_new, t in TIME | exists(arraywork(d,t)))
				RPT_ARRAY(d,p,t) := 0
			forall (d in dem_new, t in TIME | exists(arraywork(d,t)) and getsol(arraywork(d,t)) > ZEROVALUE)
				RPT_ARRAY(d,p,t) := if(abs(DEM_ARRAYQTY(d) - getsol(arraywork(d,t))) <= ZEROVALUE, DEM_ARRAYQTY(d), getsol(arraywork(d,t)))
			forall (d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t)))
				RPT_CELL(d,l,t) := 0
			forall (d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t)) and getsol(cellwork(d,l,t)) > ZEROVALUE)
				RPT_CELL(d,l,t) := if(abs(DEM_CELLQTY(d) - getsol(cellwork(d,l,t))) <= ZEROVALUE, DEM_CELLQTY(d), getsol(cellwork(d,l,t)))
			forall (l in line) do
				RPT_CELLIFITEM(l) := 0
				forall (i in CELLCONF(l) | exists(ifcellitem(l,i)) and getsol(ifcellitem(l,i)) > ZEROVALUE)
					RPT_CELLIFITEM(l) += 1
				end-do
				forall (l in line) do
					RPT_CELLIFITEMGROUP(l) := 0
					forall (ig in CELLITEMGROUP | exists(ifcellitemgroup(l,ig)) and getsol(ifcellitemgroup(l,ig)) > ZEROVALUE)
					RPT_CELLIFITEMGROUP(l) += 1
				end-do
				writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> Objectives at time ", gettime)
				writeln(strfmt("OBJECTIVE",20), strfmt("DIR",10), strfmt("VALUE",10), strfmt("WEIGHT",10), strfmt("WEIGHTED",10), "\n", 60*"-")
				writeln(strfmt("maxObjFulfill",20), strfmt("Max",10), strfmt(getsol(maxObjFulfill),10,0),
						strfmt(WEIGHT_FULFILL,10), strfmt(WEIGHT_FULFILL*getsol(maxObjFulfill),10,0))
						writeln(strfmt("maxObjPriority",20), strfmt("Max",10), strfmt(getsol(maxObjPriority),10,0),
						strfmt(WEIGHT_PRIORITY,10), strfmt(WEIGHT_PRIORITY*getsol(maxObjPriority),10,0))
				writeln(strfmt("maxObjLinePriority",20), strfmt("Max",10), strfmt(getsol(maxObjLinePriority),10,0),
						strfmt(WEIGHT_LINEPRIORITY,10), strfmt(WEIGHT_LINEPRIORITY*getsol(maxObjLinePriority),10,0))
				writeln(strfmt("minObjItem",20), strfmt("Min",10), strfmt(getsol(minObjItem),10,0),
						strfmt(WEIGHT_ITEM,10), strfmt(WEIGHT_ITEM*getsol(minObjItem),10,0))
				writeln(strfmt("minObjItemgroup",20), strfmt("Min",10), strfmt(getsol(minObjItemgroup),10,0),
						strfmt(WEIGHT_ITEMGROUP,10), strfmt(WEIGHT_ITEMGROUP*getsol(minObjItemgroup),10,0))
				writeln(strfmt("maxObjSequence",20), strfmt("Max",10), strfmt(getsol(maxObjSequence),10,0),
						strfmt(WEIGHT_SEQUENCE,10), strfmt(WEIGHT_SEQUENCE*getsol(maxObjSequence),10,0))
				writeln(strfmt("maxObjEarlyProd",20), strfmt("Max",10), strfmt(getsol(maxObjEarlyProd),10,0),
						strfmt(WEIGHT_EARLYPROD,10), strfmt(WEIGHT_EARLYPROD*getsol(maxObjEarlyProd),10,0))
				writeln(strfmt("maxObjOntime",20), strfmt("Max",10), strfmt(getsol(maxObjOntime),10,0),
						strfmt(WEIGHT_ONTIME,10), strfmt(WEIGHT_ONTIME*getsol(maxObjOntime),10,0))
				writeln(strfmt("minObjCloseness",20), strfmt("Min",10), strfmt(getsol(minObjCloseness),10,0),
						strfmt(WEIGHT_CLOSENESS,10), strfmt(WEIGHT_CLOSENESS*getsol(minObjCloseness),10,0))
				writeln
		
				writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> fillrate summary by priority at time ", gettime)
				write(strfmt("PROCESS",20), strfmt("TYPE",10), strfmt("TOTAL",10))
				forall (pri in RPRIO)
					write(strfmt(PRIO_END(pri),10,0))
				writeln
				writeln((40+getsize(RPRIO)*10)*"-")
				write(strfmt("ARRAY",20), strfmt("DEMAND",10), strfmt(sum(d in dem_new) DEM_ARRAYQTY(d),10,0))
				forall (pri in RPRIO) do
					PRIO_TOTAL(pri) := sum(d in dem_new | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_ARRAYQTY(d)
					write(strfmt(PRIO_TOTAL(pri),10,0))
				end-do
				writeln
				write(strfmt("",20), strfmt("fill%",10),
					strfmt(if(sum(pri in RPRIO) PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, t in TIME) RPT_ARRAY(d,p,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100),10,2))
				forall (pri in RPRIO)
					write(strfmt(if(PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) RPT_ARRAY(d,p,t))/PRIO_TOTAL(pri)*100),10,2))
				writeln
				writeln((40+getsize(RPRIO)*10)*"-")
				write(strfmt("CELL",20), strfmt("DEMAND",10), strfmt(sum(d in dem_new) DEM_CELLQTY(d),10,0))
				forall (pri in RPRIO) do
					PRIO_TOTAL(pri) := sum(d in dem_new | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_CELLQTY(d)
					write(strfmt(PRIO_TOTAL(pri),10,0))
				end-do
				writeln
				write(strfmt("",20), strfmt("fill%",10),
					strfmt(if(sum(pri in RPRIO) PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100),10,2))
				forall (pri in RPRIO)
					write(strfmt(if(PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, l in DEM_LINE(d), t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) RPT_CELL(d,l,t))/PRIO_TOTAL(pri)*100),10,2))
				writeln
				writeln
		
				writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ARRAY work summary at time ", gettime)
				write(strfmt("PLANT",40), strfmt("TYPE",10), strfmt("TOTAL",10))
				forall (t in TIME)
					write(strfmt(t,7))
				writeln
				writeln((60+getsize(TIME)*7)*"-")
				
				write(strfmt(p,40), strfmt("ARRAYQTY",10), strfmt(sum(d in dem_new) DEM_ARRAYQTY(d),10,0))
				forall (t in TIME)
					write(strfmt(sum(d in dem_new | DEM_DUETIME(d)=t) DEM_ARRAYQTY(d),7,0))
				writeln
				
				write(strfmt("",40), strfmt("work",10), strfmt(sum(d in dem_new, t in TIME) RPT_ARRAY(d,p,t),10,0))
				forall (t in TIME)
					write(strfmt(sum(d in dem_new) RPT_ARRAY(d,p,t),7,0))
				writeln
				writeln
		
				writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> CELL work summary at time ", gettime)
				write(strfmt("LINE",40), strfmt("TYPE",10), strfmt("TOTAL",10))
				forall (t in TIME)
					write(strfmt(t,7))
				writeln
				writeln((60+getsize(TIME)*7)*"-")
				
				write(strfmt(p,40), strfmt("CELLQTY",10), strfmt(sum(d in dem_new) DEM_CELLQTY(d),10,0))
				forall (t in TIME)
					write(strfmt(sum(d in dem_new | DEM_DUETIME(d)=t) DEM_CELLQTY(d),7,0))
				writeln
		
				write(strfmt("",40), strfmt("work",10), strfmt(sum(d in dem_new, l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t),10,0))
				forall (t in TIME)
					write(strfmt(sum(d in dem_new, l in DEM_LINE(d)) RPT_CELL(d,l,t),7,0))
				writeln
				writeln((60+getsize(TIME)*7)*"-")
				forall (l in line | sum(d in dem_new, t in TIME) RPT_CELL(d,l,t) > ZEROVALUE) do
					write(strfmt(l,40), strfmt("work",10), strfmt(sum(d in dem_new, t in TIME) RPT_CELL(d,l,t),10,0))
					forall (t in TIME)
						write(strfmt(sum(d in dem_new) RPT_CELL(d,l,t),7,0))
					writeln
				end-do
			writeln
		
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ARRAY accumulated utilization summary at time ", gettime)
			write(strfmt("PLANT",10), strfmt("ARRAYRES",30), strfmt("TYPE",10), strfmt("TOTAL",10))
			forall (t in TIME)
				write(strfmt(t,7))
			writeln
			forall (res in ARRAYRES | sum(month in MONTH) ARRAYNOM(p,res,month) > ZEROVALUE) do
				writeln((60+getsize(TIME)*7)*"-")
				write(strfmt(p,10), strfmt(res,30), strfmt("CAPA",10), strfmt(sum(t in TIME) ARRAYHOUR(p,res,t),10,1))
				forall (t in TIME)
					write(strfmt(ARRAYHOUR(p,res,t),7,1))
				writeln
				write(strfmt("",10), strfmt("",30), strfmt("used",10),
					strfmt((sum(d in dem_new+dem_fix, t in TIME | RPT_ARRAY(d,p,t)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600,10,1))
				forall (t in TIME)
					write(strfmt((sum(d in dem_new+dem_fix | RPT_ARRAY(d,p,t)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600,7,1))
				writeln
				write(strfmt("",10), strfmt("",30), strfmt("util%",10),
					strfmt(if(sum(t in TIME) ARRAYHOUR(p,res,t) <= ZEROVALUE, 0,
					(sum(d in dem_new+dem_fix, t in TIME | RPT_ARRAY(d,p,t)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600/(sum(t in TIME) ARRAYHOUR(p,res,t))*100),10,1))
				forall (t in TIME)
					write(strfmt(if(ARRAYHOUR(p,res,t) <= ZEROVALUE, 0,
						(sum(d in dem_new+dem_fix | RPT_ARRAY(d,p,t)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600/ARRAYHOUR(p,res,t)*100),7,1))
				writeln
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> CELL accumulated utilization summary at time ", gettime)
			write(strfmt("LINE",40), strfmt("TYPE",10), strfmt("TOTAL",10))
			
			forall (t in TIME)
					write(strfmt(t,7))
			writeln
			writeln((60+getsize(TIME)*7)*"-")
			
			write(strfmt(p,40), strfmt("CAPA",10), strfmt(sum(l in line, t in TIME) CELLHOUR(l,t),10,1))
			forall (t in TIME)
				write(strfmt(sum(l in line) CELLHOUR(l,t),7,1))
			writeln
			
			write(strfmt("",40), strfmt("used",10),
				strfmt((sum(d in dem_new+dem_fix, l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600,10,1))
			
			forall (t in TIME)
				write(strfmt((sum(d in dem_new+dem_fix, l in DEM_LINE(d) | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600,7,1))
			writeln
			write(strfmt("",40), strfmt("util%",10),
				strfmt(if(sum(l in line, t in TIME) CELLHOUR(l,t) <= ZEROVALUE, 0,
				100*(sum(d in dem_new+dem_fix, l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600/sum(l in line, t in TIME) CELLHOUR(l,t)),10,1))
			
			forall (t in TIME)
				write(strfmt(if(sum(l in line) CELLHOUR(l,t) <= ZEROVALUE, 0,
					100*(sum(d in dem_new+dem_fix, l in DEM_LINE(d) | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600/sum(l in line) CELLHOUR(l,t)),7,1))
			writeln
			forall (l in line | sum(month in MONTH) CELLNOM(l,month) > ZEROVALUE) do
				writeln((60+getsize(TIME)*7)*"-")
				write(strfmt(l,40), strfmt("CAPA",10), strfmt(sum(t in TIME) CELLHOUR(l,t),10,1))
				forall (t in TIME)
					write(strfmt(CELLHOUR(l,t),7,1))
				writeln
				write(strfmt("",40), strfmt("used",10),
					strfmt((sum(d in dem_new+dem_fix, t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600,10,1))
				forall (t in TIME)
					write(strfmt((sum(d in dem_new+dem_fix | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600,7,1))
				writeln
				write(strfmt("",40), strfmt("util%",10),
					strfmt(if(sum(t in TIME) CELLHOUR(l,t) <= ZEROVALUE, 0,
					100*(sum(d in dem_new+dem_fix, t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600/sum(t in TIME) CELLHOUR(l,t)),10,1))
				forall (t in TIME)
					write(strfmt(if(CELLHOUR(l,t) <= ZEROVALUE, 0,
					100*(sum(d in dem_new+dem_fix | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600/CELLHOUR(l,t)),7,1))
				writeln
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> accumulated item, itemgroup frequency summary at time ", gettime)
			writeln(strfmt("TYPE",40), strfmt("frequency",10), "\n", 50*"-")
			writeln(strfmt("item",40), strfmt(sum(l in line) RPT_CELLIFITEM(l),10,0))
			writeln(strfmt("itemgroup",40), strfmt(sum(l in line) RPT_CELLIFITEMGROUP(l),10,0))
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> duedate distance Summary at time ", gettime)
			forall (d in dem_new | DEM_CELLQTY(d) <= ZEROVALUE and sum(t in TIME) RPT_ARRAY(d,p,t) > ZEROVALUE) do
				n_gap += 1
				gap := DEM_DUETIME(d) - (sum(t in TIME | RPT_ARRAY(d,p,t)>ZEROVALUE) t + ARRAYLEADTIME(d,p) - 1)
				ss_gap += gap*gap
				s_gap += gap
			end-do
	
			forall (d in dem_new | DEM_CELLQTY(d) > ZEROVALUE and sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > ZEROVALUE) do
				n_gap += 1
				gap := DEM_DUETIME(d) - (sum(l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) t + CELLLEADTIME(d,p) - 1)
				ss_gap += gap*gap
				s_gap += gap
			end-do
			
			writeln(strfmt("TYPE",40), strfmt("VALUE",10), "\n", 50*"-")
			writeln(strfmt("AVERAGE",40), strfmt(if(n_gap>ZEROVALUE, s_gap/n_gap, 0),10,2))
			writeln(strfmt("MIN_VARIATION*",40), strfmt(if(n_gap>1, sqrt((ss_gap - s_gap*s_gap/n_gap)/(n_gap-1)), 0),10,2))
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> duedate ontime Summary at time ", gettime)
			forall (d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE and DEM_CELLQTY(d) <= ZEROVALUE) do
				n_target += 1
				qty_target += DEM_ARRAYQTY(d)
				if sum(t in TIME) RPT_ARRAY(d,p,t) > ZEROVALUE then
					forall (t in TIME | t+ARRAYLEADTIME(d,p)-1<=DEM_DUETIME(d) and RPT_ARRAY(d,p,t)>ZEROVALUE) do
						n_achieve += 1
						qty_achieve += RPT_ARRAY(d,p,t)
					end-do
				end-if
			end-do
	
			forall (d in dem_new | DEM_CELLQTY(d) > ZEROVALUE) do
				n_target += 1
				qty_target += DEM_CELLQTY(d)
				if sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > ZEROVALUE then
					forall (l in DEM_LINE(d), t in TIME | t+CELLLEADTIME(d,p)-1<=DEM_DUETIME(d) and RPT_CELL(d,l,t)>ZEROVALUE) do
						n_achieve += 1
						qty_achieve += RPT_CELL(d,l,t)
					end-do
				end-if
			end-do
	
			writeln(strfmt("TYPE",40), strfmt("TARGET",10), strfmt("ACHIEVED",10), strfmt("RATE%",10), "\n", 70*"-")
			writeln(strfmt("COUNT*",40), strfmt(n_target,10), strfmt(n_achieve,10),
			strfmt(if(n_target<=ZEROVALUE, 0, n_achieve/n_target*100),10,2))
			writeln(strfmt("QUANTITY",40), strfmt(qty_target,10,0), strfmt(qty_achieve,10,0),
			strfmt(if(qty_target<=ZEROVALUE,0, qty_achieve/qty_target*100),10,2))
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> Closeness Summary at time ", gettime)
			writeln(strfmt("TYPE",40), strfmt("close",10), "\n", 50*"-")
			writeln(strfmt("ARRAY",40), strfmt(sum(d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE and DEM_CELLQTY(d) <= ZEROVALUE) getsol(close(d)),10,0))
			writeln(strfmt("CELL",40), strfmt(sum(d in dem_new | DEM_CELLQTY(d) > ZEROVALUE) getsol(close(d)),10,0))
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> NO_CELL at time ", gettime)
			forall (cc as counter, d in dem_new | sum(l in DEM_LINE(d), t in TIME) getsol(ifcellwork(d,l,t)) <= ZEROVALUE) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 200*"-"+"\n"), strfmt("DEM",100), strfmt("VALIDITY",10), strfmt("EPST",10), strfmt("ARRAYQTY",10), strfmt("arraywork",10),
					strfmt("ARRAY_LT",10), strfmt("CELLQTY",10), strfmt("cellwork",10), strfmt("CELL_LT",10), strfmt("LPET",10), strfmt("LASTVALID",10), "\n", 200*"-")
				end-if
				writeln(strfmt(d,100), strfmt(if(DEM_EPST(d)+if(DEM_ARRAYQTY(d)>ZEROVALUE,ARRAYLEADTIME(d,p),0)+CELLLEADTIME(d,p)-1>DEM_LPET(d), "INVALID", ""),10),
					strfmt(DEM_EPST(d),10),
					if(DEM_ARRAYQTY(d)>ZEROVALUE, strfmt(DEM_ARRAYQTY(d),10), strfmt("",10)),
					strfmt(sum(t in TIME) getsol(arraywork(d,t)),10),
					if(DEM_ARRAYQTY(d)>ZEROVALUE, strfmt(ARRAYLEADTIME(d,p),10), strfmt("",10)),
					strfmt(DEM_CELLQTY(d),10), strfmt(sum(l in DEM_LINE(d), t in TIME) getsol(cellwork(d,l,t)),10),
					strfmt(CELLLEADTIME(d,p),10), strfmt(DEM_LPET(d),10),
					strfmt(DEM_EPST(d)+if(DEM_ARRAYQTY(d)>ZEROVALUE,ARRAYLEADTIME(d,p),0)+CELLLEADTIME(d,p)-1,10))
			end-do
			writeln
	
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ARRAY ifarraywork violation at time ", gettime)
			forall (cc as counter, d in dem_new, t in TIME | (RPT_ARRAY(d,p,t) <= ZEROVALUE and getsol(ifarraywork(d,t)) > ZEROVALUE) or
					(RPT_ARRAY(d,p,t) > ZEROVALUE and getsol(ifarraywork(d,t)) <= ZEROVALUE) or
					(ZEROVALUE < getsol(ifarraywork(d,t)) and getsol(ifarraywork(d,t)) < 1-ZEROVALUE)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 150*"-"+"\n"), strfmt("DEM",100), strfmt("PLANT",20), strfmt("TIME",10), strfmt("arraywork",10), strfmt("ifarray",10), "\n", 150*"-")
				end-if
				writeln(strfmt(d,100), strfmt(p,20), strfmt(t,10), "\t", RPT_ARRAY(d,p,t), "\t", getsol(ifarraywork(d,t)))
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ARRAY one plant violation at time ", gettime)
			forall (cc as counter, d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE and count(p2 in PLANT | sum(t in TIME) RPT_ARRAY(d,p2,t) > ZEROVALUE)>1) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 130*"-"+"\n"), strfmt("DEM",100), strfmt("PLANT",20), strfmt("SUM",10), "\n", 130*"-")
				end-if
				forall (cc2 as counter, p2 in PLANT | sum(t in TIME) RPT_ARRAY(d,p2,t) > ZEROVALUE)
					writeln(strfmt(if(cc2=1,d,""),100), strfmt(p2,20), "\t", sum(t in TIME) RPT_ARRAY(d,p2,t))
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> CELL ifcellwork violation at time ", gettime)
			forall (cc as counter, d in dem_new, l in DEM_LINE(d), t in TIME | (RPT_CELL(d,l,t) <= ZEROVALUE and getsol(ifcellwork(d,l,t)) > ZEROVALUE) or
					(RPT_CELL(d,l,t) > ZEROVALUE and getsol(ifcellwork(d,l,t)) <= ZEROVALUE) or
					(ZEROVALUE < getsol(ifcellwork(d,l,t)) and getsol(ifcellwork(d,l,t)) < 1-ZEROVALUE)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 150*"-"+"\n"), strfmt("DEM",100), strfmt("LINE",20), strfmt("TIME",10), strfmt("value1",10), strfmt("value2",10), "\n", 150*"-")
				end-if
				writeln(strfmt(d,100), strfmt(l,20), strfmt(t,10), "\t", RPT_CELL(d,l,t), "\t", getsol(ifcellwork(d,l,t)))
			end-do
			writeln
		
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> CELL one line violation at time ", gettime)
			forall (cc as counter, d in dem_new | DEM_CELLQTY(d) > ZEROVALUE and count(l in DEM_LINE(d) | sum(t in TIME) RPT_CELL(d,l,t) > ZEROVALUE)>1) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 130*"-"+"\n"), strfmt("DEM",100), strfmt("LINE",20), strfmt("SUM",10), "\n", 130*"-")
				end-if
				forall (cc as counter, l in DEM_LINE(d) | sum(t in TIME) RPT_CELL(d,l,t) > ZEROVALUE)
					writeln(strfmt(if(cc=1,d,""),100), strfmt(l,20), "\t", sum(t in TIME) RPT_CELL(d,l,t))
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ARRAY and CELL quantity violation at time ", gettime)
			forall (cc as counter, d in dem_new |  DEM_ARRAYQTY(d) > ZEROVALUE and abs(sum(t in TIME) RPT_ARRAY(d,p,t) - sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) -
					(DEM_ARRAYQTY(d) - DEM_CELLQTY(d)) * getsol(ifarrayplant(d))) > ZEROVALUE) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 140*"-"+"\n"), strfmt("DEM",100), strfmt("ARRAYQTY",10), strfmt("CELLQTY",10), strfmt("arraywork",10), strfmt("cellwork",10), "\n", 140*"-")
				end-if
				writeln(strfmt(d,100), strfmt(DEM_ARRAYQTY(d),10,2), strfmt(DEM_CELLQTY(d),10,2),
					"\t", sum(t in TIME) RPT_ARRAY(d,p,t), "\t", sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t))
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> demand completeness violation at time ", gettime)
			forall (cc as counter, d in dem_new | DEM_CELLQTY(d) > ZEROVALUE and
					sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > ZEROVALUE and
					abs(DEM_CELLQTY(d) - sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)) > ZEROVALUE) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 120*"-"+"\n"), strfmt("DEM",100), strfmt("CELLQTY",10), strfmt("cellwork",10), "\n", 120*"-")
				end-if
				writeln(strfmt(d,100), "\t", DEM_CELLQTY(d), "\t", sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t))
			end-do
			writeln
		
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ARRAY production limit violation at time ", gettime)
			forall (cc as counter, r in RLIMIT | LIMIT_PROCESS(r) = _ARRAY and LIMIT_PLANT(r) = p and
					sum(d in dem_new, t in TIME | DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_ARRAY(d,p,t) > LIMIT_QTY(r)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 40*"-"+"\n"), strfmt("PRODUCTIONLIMIT",20), strfmt("ARRAYQTY",10), strfmt("arraywork",10), "\n", 40*"-")
				end-if
				writeln(strfmt(LIMIT_NAME(r),20), "\t", LIMIT_QTY(r), "\t",
						sum(d in dem_new, t in TIME | DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_ARRAY(d,p,t))
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> CELL production limit violation at time ", gettime)
			forall (cc as counter, r in RLIMIT | LIMIT_PROCESS(r) = _CELL and LIMIT_PLANT(r) = p and
					sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_CELL(d,l,t) > LIMIT_QTY(r)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 40*"-"+"\n"), strfmt("PRODUCTIONLIMIT",20), strfmt("CELLQTY",10), strfmt("cellwork",10), "\n", 40*"-")
				end-if
				writeln(strfmt(LIMIT_NAME(r),20), "\t", LIMIT_QTY(r), "\t",
						sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_CELL(d,l,t))
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ARRAY feasibility violation at time ", gettime)
			forall (cc as counter, d in dem_new | DEM_ARRAYQTY(d) > 0 and sum(t in TIME) RPT_ARRAY(d,p,t) > 0 and
					abs(DEM_ARRAYQTY(d)-sum(t in TIME) RPT_ARRAY(d,p,t)) > 0) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 130*"-"+"\n"), strfmt("DEM",100), strfmt("ARRAYQTY",10), strfmt("arraywork",10), strfmt("diff",10), "\n", 130*"-")
				end-if
				writeln(strfmt(d,100), "\t", DEM_ARRAYQTY(d), "\t", sum(t in TIME) RPT_ARRAY(d,p,t), "\t", abs(DEM_ARRAYQTY(d)-sum(t in TIME) RPT_ARRAY(d,p,t)))
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> CELL feasibility violation at time ", gettime)
			forall (cc as counter, d in dem_new | DEM_CELLQTY(d) > 0 and sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > 0 and
					abs(DEM_CELLQTY(d)-sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)) > 0) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 130*"-"+"\n"), strfmt("DEM",100), strfmt("CELLQTY",10), strfmt("cellwork",10), strfmt("diff",10), "\n", 130*"-")
				end-if
				writeln(strfmt(d,100), "\t", DEM_CELLQTY(d), "\t", sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t), "\t", abs(DEM_CELLQTY(d)-sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)))
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> ARRAY fix violation at time ", gettime)
			forall (cc as counter, d in dem_fix, t in TIME | ARRAYFIX(d,p,t) > ZEROVALUE and
					(RPT_ARRAY(d,p,t) < ARRAYFIX(d,p,t)-ZEROVALUE or ARRAYFIX(d,p,t)+ZEROVALUE<RPT_ARRAY(d,p,t))) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 170*"-"+"\n"), strfmt("DEM",100), strfmt("PLANT",40), strfmt("TIME",10), strfmt("FIX",10), strfmt("qty",10), "\n", 170*"-")
				end-if
				writeln(strfmt(d,100), strfmt(p,40), strfmt(t,10), strfmt(ARRAYFIX(d,p,t),10), strfmt(RPT_ARRAY(d,p,t),10))
			end-do
			writeln
			
			writeln("P_", p, "_", strfmt(s,0), "_", strfmt(layer,0), "> CELL fix violation at time ", gettime)
			forall (cc as counter, d in dem_fix, l in DEM_LINE(d), t in TIME | CELLFIX(d,l,t) > ZEROVALUE and
					(RPT_CELL(d,l,t) < CELLFIX(d,l,t)-ZEROVALUE or CELLFIX(d,l,t)+ZEROVALUE<RPT_CELL(d,l,t))) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 170*"-"+"\n"), strfmt("DEM",100), strfmt("LINE",40), strfmt("TIME",10), strfmt("FIX",10), strfmt("qty",10), "\n", 170*"-")
				end-if
				writeln(strfmt(d,100), strfmt(l,40), strfmt(t,10), strfmt(CELLFIX(d,l,t),10), strfmt(RPT_CELL(d,l,t),10))
			end-do
			writeln
		else
			writeln("No solution found at time ", gettime)
			writeln
			RPT3_PANEL_STATUS(p,s) := 1
			RPT3_PANEL_GAP(p,s) := 0
			RPT3_PANEL_OBJVAL(p,s) := 0
		end-if !check indent
	end-do
	end-procedure

	procedure solve_panelmargin(dem_new:set of string, dem_fix:set of string, p:string, line:set of string)
	with model_panelmargin(p) do
		declarations
			ifarrayplant: dynamic array(dem_new) of mpvar
			arraywork: dynamic array(dem_new,TIME) of mpvar
			ifarraywork: dynamic array(dem_new,TIME) of mpvar
			cellwork: dynamic array(dem_new,line,TIME) of mpvar
			ifcellwork: dynamic array(dem_new,line,TIME) of mpvar
			ifcellitem: dynamic array(line,CELLITEM) of mpvar
			ifcellitemgroup: dynamic array(line,CELLITEMGROUP) of mpvar
			ifdemand: dynamic array(dem_new) of mpvar
			close: array(dem_new) of mpvar
			ArrayWorkQty: dynamic array(dem_new) of linctr
			CellWorkQty: dynamic array(dem_new) of linctr
			ArrayCellQty: dynamic array(dem_new) of linctr
			ArrayCellTime: dynamic array(dem_new,TIME) of linctr
			ArrayNotSplit: dynamic array(dem_new) of linctr
			CellNotSplit: dynamic array(dem_new) of linctr
			CapaArray: dynamic array(ARRAYRES,TIME) of linctr
			CapaCell: dynamic array(line,TIME) of linctr
			ArrayWorkMax: dynamic array(dem_new,TIME) of linctr
			ArrayWorkMin: dynamic array(dem_new,TIME) of linctr
			CellWorkMax: dynamic array(dem_new,line,TIME) of linctr
			CellWorkMin: dynamic array(dem_new,line,TIME) of linctr
			IfArrayPlantMax: dynamic array(dem_new) of linctr
			IfArrayPlantMin: dynamic array(dem_new) of linctr
			IfDemandMax: dynamic array(dem_new) of linctr
			IfDemandMin: dynamic array(dem_new) of linctr
			CellItemMax: dynamic array(line,CELLITEM) of linctr
			CellItemMin: dynamic array(line,CELLITEM) of linctr
			CellItemGroupMax: dynamic array(line,CELLITEMGROUP) of linctr
			CellItemGroupMin: dynamic array(line,CELLITEMGROUP) of linctr
			ArrayClosenessEarly: dynamic array(dem_new) of linctr
			ArrayClosenessLate: dynamic array(dem_new) of linctr
			CellClosenessEarly: dynamic array(dem_new) of linctr
			CellClosenessLate: dynamic array(dem_new) of linctr
			ProdLimitArray: dynamic array(RLIMIT) of linctr
			ProdLimitCell: dynamic array(RLIMIT) of linctr
			LayerArray2: dynamic array(dem_new,TIME) of linctr
			LayerCell2: dynamic array(dem_new,line,TIME) of linctr
			LayerArray3: dynamic array(dem_new) of linctr
			LayerCell3: dynamic array(dem_new) of linctr
			LayerArray4: linctr
			LayerCell4: linctr
			maxObjFulfill: linctr
			maxObjPriority: linctr
			maxObjLinePriority: linctr
			minObjItem: linctr
			minObjItemgroup: linctr
			maxObjSequence: linctr
			maxObjEarlyProd: linctr
			maxObjOntime: linctr
			minObjCloseness: linctr
			maxObj: linctr
			QTYMIN, ARRAYMAX, CELLMAX: real
			startclock: real
			n_gap: integer
			gap, s_gap, ss_gap: real
			n_target, n_achieve: integer
			qty_target, qty_achieve: real
			PRIO_TOTAL: array(RPRIO) of real
		end-declarations
		
		display_loghead("Optimization model_panelmargin ( PLANT " + p + " )")
		startclock := gettime
		writeln("P_", p, "> Optimizer started at time ", gettime)
		setparam("XPRS_VERBOSE", true)
		setparam("XPRS_LOADNAMES", true)
		setparam("XPRS_MAXTIME", MAXTIME)
		setparam("XPRS_MAXNODE", MAXNODE)
		setparam("XPRS_MIPRELSTOP", 0)
		QTYMIN := 1
		ARRAYMAX := sum(d in dem_new) DEM_ARRAYQTY(d)
		CELLMAX := sum(d in dem_new) DEM_CELLQTY(d)
		
		writeln("P_", p, "> QTYMIN ", QTYMIN, " ARRAYMAX ", ARRAYMAX, " CELLMAX ", CELLMAX)
		writeln
		forall (d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE) do
			create(ifarrayplant(d)); ifarrayplant(d) is_binary
			forall (t in TIME | DEM_EPST(d) <= t and t <= DEM_LPET(d) and
					t+if(DEM_ARRAYQTY(d)>ZEROVALUE, ARRAYLEADTIME(d,p), 0)+if(DEM_CELLQTY(d)>ZEROVALUE, CELLLEADTIME(d,p), 0)-1 <= DEM_LPET(d)) do
				create(arraywork(d,t))
				if IS_INTEGRAL_WORK then
					arraywork(d,t) is_integer
				end-if
				create(ifarraywork(d,t)); ifarraywork(d,t) is_binary
			end-do
		end-do
		
		writeln("P_", p, "> ", getsize(arraywork), " arraywork created at time ", gettime)
		forall (d in dem_new, l in DEM_LINE(d) | DEM_CELLQTY(d) > ZEROVALUE and DEM_CELLITEM(d) in CELLCONF(l)) do
			forall (t in TIME | CELLNOM(l,TIME_MONTH(t)) > ZEROVALUE and CELLCONSUME(d,l) > ZEROVALUE and
					DEM_EPST(d) <= t and t <= DEM_LPET(d) and
					DEM_EPST(d)+if(DEM_ARRAYQTY(d)>ZEROVALUE, ARRAYLEADTIME(d,p), 0)-1 <= t and
					t+CELLLEADTIME(d,p)-1 <= DEM_LPET(d)) do
				create(cellwork(d,l,t))
				if IS_INTEGRAL_WORK then
					cellwork(d,l,t) is_integer
				end-if
				create(ifcellwork(d,l,t)); ifcellwork(d,l,t) is_binary
			end-do
		end-do
		
		writeln("P_", p, "> ", getsize(cellwork), " cellwork created at time ", gettime)
		forall (l in line, i in CELLCONF(l)) do
			create(ifcellitem(l,i)); ifcellitem(l,i) is_binary
		end-do
		
		forall (l in line, ig in CELLITEMGROUP) do
			create(ifcellitemgroup(l,ig)); ifcellitemgroup(l,ig) is_binary
		end-do
		
		forall (d in dem_new | IS_COMPLETE_DEMAND) do
			create(ifdemand(d)); ifdemand(d) is_binary
		end-do
		
		forall (d in dem_new)
			ArrayWorkQty(d) := sum(t in TIME | exists(arraywork(d,t))) arraywork(d,t) <= DEM_ARRAYQTY(d)
		writeln("P_", p, "> ", getsize(ArrayWorkQty), " ArrayWorkQty linctr generated at time ", gettime)
		
		forall (d in dem_new)
			if IS_COMPLETE_DEMAND then
				CellWorkQty(d) := sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) = DEM_CELLQTY(d) * ifdemand(d)
			else
				CellWorkQty(d) := sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) <= DEM_CELLQTY(d)
			end-if
		writeln("P_", p, "> ", getsize(CellWorkQty), " CellWorkQty linctr generated at time ", gettime)

		forall (d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE)
			ArrayCellQty(d) := sum(t in TIME | exists(arraywork(d,t))) arraywork(d,t) =
								sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) +
								(DEM_ARRAYQTY(d) - DEM_CELLQTY(d)) * ifarrayplant(d)
		writeln("P_", p, "> ", getsize(ArrayCellQty), " ArrayCellQty linctr generated at time ", gettime)
		
		forall (d in dem_new, t in TIME | DEM_ARRAYQTY(d) > ZEROVALUE and exists(arraywork(d,t)))
			ArrayCellTime(d,t) := ifarraywork(d,t) <= sum(l in DEM_LINE(d), buff in 0..MAXBUFF_SYNC | exists(ifcellwork(d,l,t+ARRAYLEADTIME(d,p)+buff)))
														ifcellwork(d,l,t+ARRAYLEADTIME(d,p)+buff)
		writeln("P_", p, "> ", getsize(ArrayCellTime), " ArrayCellTime linctr generated at time ", gettime)
		
		forall (d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE)
			ArrayNotSplit(d) := sum(t in TIME | exists(ifarraywork(d,t))) ifarraywork(d,t) <= 1
		writeln("P_", p, "> ", getsize(ArrayNotSplit), " ArrayNotSplit linctr generated at time ", gettime)
		
		forall (d in dem_new | DEM_CELLQTY(d) > ZEROVALUE)
			CellNotSplit(d) := sum(l in DEM_LINE(d), t in TIME | exists(ifcellwork(d,l,t))) ifcellwork(d,l,t) <= 1
		writeln("P_", p, "> ", getsize(CellNotSplit), " CellNotSplit linctr generated at time ", gettime)

		forall (res in ARRAYRES, t in TIME | ARRAYNOM(p,res,TIME_MONTH(t)) > ZEROVALUE)
				CapaArray(res,t) := sum(d in dem_new | exists(arraywork(d,t)))ARRAYCONSUME(d,p,res)*arraywork(d,t)/DEM_ARRAYQTY(d) <=
									maxlist(0, ARRAYHOUR(p,res,t)*3600 - sum(d in dem_fix | DEM_ARRAYQTY(d)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))
		writeln("P_", p, "> ", getsize(CapaArray), " CapaArray linctr generated at time ", gettime)
		
		forall (l in line, t in TIME | CELLNOM(l,TIME_MONTH(t)) > ZEROVALUE)
			CapaCell(l,t) := sum(d in dem_new | exists(cellwork(d,l,t))) CELLCONSUME(d,l)*cellwork(d,l,t)/DEM_CELLQTY(d) <=
							maxlist(0, CELLHOUR(l,t)*3600 - sum(d in dem_fix | DEM_CELLQTY(d)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))
		writeln("P_", p, "> ", getsize(CapaCell), " CapaCell linctr generated at time ", gettime)
		
		forall (d in dem_new, t in TIME | exists(ifarraywork(d,t))) do
			ArrayWorkMax(d,t) := arraywork(d,t) <= DEM_ARRAYQTY(d) * ifarraywork(d,t)
			ArrayWorkMin(d,t) := arraywork(d,t) >= QTYMIN * ifarraywork(d,t)
		end-do
		writeln("P_", p, "> ", 2*getsize(ArrayWorkMax), " ArrayWork linctr generated at time ", gettime)

		forall (d in dem_new, l in DEM_LINE(d), t in TIME | exists(ifcellwork(d,l,t))) do
			CellWorkMax(d,l,t) := cellwork(d,l,t) <= DEM_CELLQTY(d) * ifcellwork(d,l,t)
			CellWorkMin(d,l,t) := cellwork(d,l,t) >= DEM_MINQTY(d) * ifcellwork(d,l,t)
		end-do
		writeln("P_", p, "> ", 2*getsize(CellWorkMax), " CellWork linctr generated at time ", gettime)

		forall (d in dem_new | exists(ifarrayplant(d))) do
			IfArrayPlantMax(d) := sum(t in TIME | exists(arraywork(d,t))) arraywork(d,t) <= DEM_ARRAYQTY(d) * ifarrayplant(d)
			IfArrayPlantMin(d) := sum(t in TIME | exists(arraywork(d,t))) arraywork(d,t) >= QTYMIN * ifarrayplant(d)
		end-do

		writeln("P_", p, "> ", 2*getsize(IfArrayPlantMax), " IfArrayPlant linctr generated at time ", gettime)
		forall (d in dem_new | exists(ifdemand(d))) do
			IfDemandMax(d) := sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) <= DEM_CELLQTY(d) * ifdemand(d)
			IfDemandMin(d) := sum(l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t) >= QTYMIN * ifdemand(d)
		end-do
		writeln("P_", p, "> ", 2*getsize(IfDemandMax), " IfDemand linctr generated at time ", gettime)

		forall (l in line, i in CELLCONF(l) | exists(ifcellitem(l,i))) do
			CellItemMax(l,i) := sum(d in dem_new, t in TIME | exists(cellwork(d,l,t)) and DEM_CELLITEM(d)=i) cellwork(d,l,t) <= CELLMAX * ifcellitem(l,i)
			CellItemMin(l,i) := sum(d in dem_new, t in TIME | exists(cellwork(d,l,t)) and DEM_CELLITEM(d)=i) cellwork(d,l,t) >= QTYMIN * ifcellitem(l,i)
		end-do
		writeln("P_", p, "> ", 2*getsize(CellItemMax), " CellItem linctr generated at time ", gettime)

		forall (l in line, ig in CELLITEMGROUP | exists(ifcellitemgroup(l,ig))) do
			CellItemGroupMax(l,ig) := sum(d in dem_new, t in TIME | exists(cellwork(d,l,t)) and CELLITEM_GROUP(DEM_CELLITEM(d))=ig) cellwork(d,l,t) <= CELLMAX * ifcellitemgroup(l,ig)
			CellItemGroupMin(l,ig) := sum(d in dem_new, t in TIME | exists(cellwork(d,l,t)) and CELLITEM_GROUP(DEM_CELLITEM(d))=ig) cellwork(d,l,t) >= QTYMIN * ifcellitemgroup(l,ig)
		end-do
		writeln("P_", p, "> ", 2*getsize(CellItemGroupMax), " CellItemGroup linctr generated at time ", gettime)

		forall (d in dem_new | DEM_CELLQTY(d) <= ZEROVALUE) do
			ArrayClosenessEarly(d) := close(d) >= DEM_DUETIME(d) - sum(t in TIME) (t+ARRAYLEADTIME(d,p)-1)*ifarraywork(d,t)
			ArrayClosenessLate(d) := close(d) >= sum(t in TIME) (t+ARRAYLEADTIME(d,p)-1)*ifarraywork(d,t) - DEM_DUETIME(d)
		end-do
		writeln("P_", p, "> ", 2*getsize(ArrayClosenessEarly), " ArrayCloseness linctr generated at time ", gettime)

		forall (d in dem_new | DEM_CELLQTY(d) > ZEROVALUE) do
			CellClosenessEarly(d) := close(d) >= DEM_DUETIME(d) - sum(l in DEM_LINE(d), t in TIME) (t+CELLLEADTIME(d,p)-1)*ifcellwork(d,l,t)
			CellClosenessLate(d) := close(d) >= sum(l in DEM_LINE(d), t in TIME) (t+CELLLEADTIME(d,p)-1)*ifcellwork(d,l,t) - DEM_DUETIME(d)
		end-do
		writeln("P_", p, "> ", 2*getsize(CellClosenessEarly), " CellCloseness linctr generated at time ", gettime)

		forall (r in RLIMIT | LIMIT_PROCESS(r) = _ARRAY and LIMIT_PLANT(r) = p)
			ProdLimitArray(r) := sum(d in dem_new, t in TIME | DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) arraywork(d,t) <=
								maxlist(0, LIMIT_QTY(r) - sum(d in dem_fix, t in TIME | DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) RPT_ARRAY(d,p,t))
		writeln("P_", p, "> ", getsize(ProdLimitArray), " ProdLimitArray linctr generated at time ", gettime)
		
		forall (r in RLIMIT | LIMIT_PROCESS(r) = _CELL and LIMIT_PLANT(r) = p)
			ProdLimitCell(r) := sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) cellwork(d,l,t) <=
								maxlist(0, LIMIT_QTY(r) - sum(d in dem_fix, l in DEM_LINE(d), t in TIME | DEM_CELLITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) RPT_CELL(d,l,t))
		writeln("P_", p, "> ", getsize(ProdLimitCell), " ProdLimitCell linctr generated at time ", gettime)
		
		maxObjFulfill := sum(d in dem_new, t in TIME | exists(arraywork(d,t))) arraywork(d,t) +
						sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) cellwork(d,l,t)
		maxObjPriority := sum(d in dem_new, t in TIME | exists(arraywork(d,t))) DEM_WEIGHT(d)*arraywork(d,t) +
						sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) DEM_WEIGHT(d)*cellwork(d,l,t)
		maxObjLinePriority := sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t))) CELLWEIGHT(l,DEM_CELLITEM(d))*cellwork(d,l,t)
		minObjItem := sum(l in line, i in CELLCONF(l) | exists(ifcellitem(l,i))) ifcellitem(l,i)
		minObjItemgroup := sum(l in line, ig in CELLITEMGROUP | exists(ifcellitemgroup(l,ig))) ifcellitemgroup(l,ig)
		maxObjSequence := 0.01*sum(d in dem_new, t in TIME | DEM_CELLQTY(d) <= ZEROVALUE and exists(ifarraywork(d,t))) (t+ARRAYLEADTIME(d,p)-1)*DEM_DUETIME(d)*ifarraywork(d,t) +
						0.01*sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLQTY(d) > ZEROVALUE and exists(ifcellwork(d,l,t))) (t+CELLLEADTIME(d,p)-1)*DEM_DUETIME(d)*ifcellwork(d,l,t)
		maxObjEarlyProd := 0.01*sum(d in dem_new, t in TIME | DEM_CELLQTY(d) <= ZEROVALUE and exists(ifarraywork(d,t))) (getsize(TIME)-t)*arraywork(d,t) +
						0.01*sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLQTY(d) > ZEROVALUE and exists(ifcellwork(d,l,t))) (getsize(TIME)-t)*cellwork(d,l,t)
		maxObjOntime := sum(d in dem_new, t in TIME | DEM_CELLQTY(d) <= ZEROVALUE and exists(ifarraywork(d,t)) and t+ARRAYLEADTIME(d,p)-1 <= DEM_DUETIME(d)) arraywork(d,t) +
						sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLQTY(d) > ZEROVALUE and exists(ifcellwork(d,l,t)) and t+CELLLEADTIME(d,p)-1 <= DEM_DUETIME(d)) cellwork(d,l,t)
		minObjCloseness := sum(d in dem_new) close(d)
		maxObj := WEIGHT_FULFILL*maxObjFulfill + WEIGHT_PRIORITY*maxObjPriority
		writeln("P_", p, "> objectives generated at time ", gettime)
		
		maximize (maxObj)
		
		RPT4_PANEL_TIME(p) += (gettime - startclock)
		RPT4_PANEL_NODE(p) += getparam("XPRS_NODES")
		
		if getparam("XPRS_mipstatus") = XPRS_MIP_LP_OPTIMAL then
			writeln("MIP solution status is MIP_LP_OPTIMAL")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_LP_NOT_OPTIMAL then
			writeln("MIP solution status is MIP_LP_NOT_OPTIMAL")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_OPTIMAL then
			writeln("MIP solution status is MIP_OPTIMAL")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_SOLUTION then
			writeln("MIP solution status is MIP_SOLUTION")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_INFEAS then
			writeln("MIP solution status is MIP_INFEAS")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_NO_SOL_FOUND then
			writeln("MIP solution status is MIP_NO_SOL_FOUND")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_NOT_LOADED then
			writeln("MIP solution status is MIP_NOT_LOADED")
		end-if
		
		if getparam("XPRS_mipstatus") in {XPRS_OPT, XPRS_MIP_SOLUTION, XPRS_MIP_OPTIMAL} then
			writeln("Solution found at time ", gettime)
			writeln
			forall (d in dem_new, t in TIME | exists(arraywork(d,t)))
				RPT_ARRAY(d,p,t) := 0
			forall (d in dem_new, t in TIME | exists(arraywork(d,t)) and getsol(arraywork(d,t)) > ZEROVALUE)
				RPT_ARRAY(d,p,t) := if(abs(DEM_ARRAYQTY(d) - getsol(arraywork(d,t))) <= ZEROVALUE, DEM_ARRAYQTY(d), getsol(arraywork(d,t)))
			forall (d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t)))
				RPT_CELL(d,l,t) := 0
			forall (d in dem_new, l in DEM_LINE(d), t in TIME | exists(cellwork(d,l,t)) and getsol(cellwork(d,l,t)) > ZEROVALUE)
				RPT_CELL(d,l,t) := if(abs(DEM_CELLQTY(d) - getsol(cellwork(d,l,t))) <= ZEROVALUE, DEM_CELLQTY(d), getsol(cellwork(d,l,t)))
			writeln("P_", p, "> Objectives at time ", gettime)
			writeln(strfmt("OBJECTIVE",20), strfmt("DIR",10), strfmt("VALUE",10), strfmt("WEIGHT",10), strfmt("WEIGHTED",10), "\n", 60*"-")
			writeln(strfmt("maxObjFulfill",20), strfmt("Max",10), strfmt(getsol(maxObjFulfill),10,0),
					strfmt(WEIGHT_FULFILL,10), strfmt(WEIGHT_FULFILL*getsol(maxObjFulfill),10,0))
			writeln(strfmt("maxObjPriority",20), strfmt("Max",10), strfmt(getsol(maxObjPriority),10,0),
					strfmt(WEIGHT_PRIORITY,10), strfmt(WEIGHT_PRIORITY*getsol(maxObjPriority),10,0))
			writeln
		
			writeln("P_", p, "> fillrate summary by priority at time ", gettime)
			write(strfmt("PROCESS",20), strfmt("TYPE",10), strfmt("TOTAL",10))
			forall (pri in RPRIO)
				write(strfmt(PRIO_END(pri),10,0))
			writeln
			writeln((40+getsize(RPRIO)*10)*"-")
			
			write(strfmt("ARRAY",20), strfmt("DEMAND",10), strfmt(sum(d in dem_new) DEM_ARRAYQTY(d),10,0))
			forall (pri in RPRIO) do
				PRIO_TOTAL(pri) := sum(d in dem_new | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_ARRAYQTY(d)
				write(strfmt(PRIO_TOTAL(pri),10,0))
			end-do
			writeln
			write(strfmt("",20), strfmt("fill%",10),
				strfmt(if(sum(pri in RPRIO) PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, t in TIME) RPT_ARRAY(d,p,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100),10,2))
			forall (pri in RPRIO)
				write(strfmt(if(PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) RPT_ARRAY(d,p,t))/PRIO_TOTAL(pri)*100),10,2))
			writeln
			writeln((40+getsize(RPRIO)*10)*"-")
			write(strfmt("CELL",20), strfmt("DEMAND",10), strfmt(sum(d in dem_new) DEM_CELLQTY(d),10,0))
			forall (pri in RPRIO) do
				PRIO_TOTAL(pri) := sum(d in dem_new | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_CELLQTY(d)
				write(strfmt(PRIO_TOTAL(pri),10,0))
			end-do
			writeln
			write(strfmt("",20), strfmt("fill%",10),
				strfmt(if(sum(pri in RPRIO) PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100),10,2))
			forall (pri in RPRIO)
				write(strfmt(if(PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, l in DEM_LINE(d), t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) RPT_CELL(d,l,t))/PRIO_TOTAL(pri)*100),10,2))
			writeln
			writeln
			writeln("P_", p, "> ARRAY work summary at time ", gettime)
			write(strfmt("PLANT",40), strfmt("TYPE",10), strfmt("TOTAL",10))
			forall (t in TIME)
				write(strfmt(t,7))
			writeln
			writeln((60+getsize(TIME)*7)*"-")
			write(strfmt(p,40), strfmt("ARRAYQTY",10), strfmt(sum(d in dem_new) DEM_ARRAYQTY(d),10,0))
			forall (t in TIME)
				write(strfmt(sum(d in dem_new | DEM_DUETIME(d)=t) DEM_ARRAYQTY(d),7,0))
			writeln
			write(strfmt("",40), strfmt("work",10), strfmt(sum(d in dem_new, t in TIME) RPT_ARRAY(d,p,t),10,0))
			forall (t in TIME)
				write(strfmt(sum(d in dem_new) RPT_ARRAY(d,p,t),7,0))
			writeln
			writeln
			writeln("P_", p, "> CELL work summary at time ", gettime)
			write(strfmt("LINE",40), strfmt("TYPE",10), strfmt("TOTAL",10))
			forall (t in TIME)
				write(strfmt(t,7))
			writeln
			writeln((60+getsize(TIME)*7)*"-")
			write(strfmt(p,40), strfmt("CELLQTY",10), strfmt(sum(d in dem_new) DEM_CELLQTY(d),10,0))
			forall (t in TIME)
				write(strfmt(sum(d in dem_new | DEM_DUETIME(d)=t) DEM_CELLQTY(d),7,0))
			writeln
			write(strfmt("",40), strfmt("work",10), strfmt(sum(d in dem_new, l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t),10,0))
			forall (t in TIME)
				write(strfmt(sum(d in dem_new, l in DEM_LINE(d)) RPT_CELL(d,l,t),7,0))
			writeln
			writeln((60+getsize(TIME)*7)*"-")
			forall (l in line | sum(d in dem_new, t in TIME) RPT_CELL(d,l,t) > ZEROVALUE) do
				write(strfmt(l,40), strfmt("work",10), strfmt(sum(d in dem_new, t in TIME) RPT_CELL(d,l,t),10,0))
				forall (t in TIME)
					write(strfmt(sum(d in dem_new) RPT_CELL(d,l,t),7,0))
				writeln
			end-do
			writeln
			writeln("P_", p, "> ARRAY accumulated utilization summary at time ", gettime)
			write(strfmt("PLANT",10), strfmt("ARRAYRES",30), strfmt("TYPE",10), strfmt("TOTAL",10))
			forall (t in TIME)
				write(strfmt(t,7))
			writeln
			forall (res in ARRAYRES | sum(month in MONTH) ARRAYNOM(p,res,month) > ZEROVALUE) do
				writeln((60+getsize(TIME)*7)*"-")
				write(strfmt(p,10), strfmt(res,30), strfmt("CAPA",10), strfmt(sum(t in TIME) ARRAYHOUR(p,res,t),10,1))
				forall (t in TIME)
					write(strfmt(ARRAYHOUR(p,res,t),7,1))
				writeln
				write(strfmt("",10), strfmt("",30), strfmt("used",10),
					strfmt((sum(d in dem_new+dem_fix, t in TIME | RPT_ARRAY(d,p,t)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600,10,1))
				forall (t in TIME)
					write(strfmt((sum(d in dem_new+dem_fix | RPT_ARRAY(d,p,t)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600,7,1))
				writeln
				write(strfmt("",10), strfmt("",30), strfmt("util%",10),
					strfmt(if(sum(t in TIME) ARRAYHOUR(p,res,t) <= ZEROVALUE, 0,
					(sum(d in dem_new+dem_fix, t in TIME | RPT_ARRAY(d,p,t)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600/(sum(t in TIME) ARRAYHOUR(p,res,t))*100),10,1))
				forall (t in TIME)
					write(strfmt(if(ARRAYHOUR(p,res,t) <= ZEROVALUE, 0,
						(sum(d in dem_new+dem_fix | RPT_ARRAY(d,p,t)>ZEROVALUE) ARRAYCONSUME(d,p,res)*RPT_ARRAY(d,p,t)/DEM_ARRAYQTY(d))/3600/ARRAYHOUR(p,res,t)*100),7,1))
				writeln
			end-do
			writeln
			writeln("P_", p, "> CELL accumulated utilization summary at time ", gettime)
			write(strfmt("LINE",40), strfmt("TYPE",10), strfmt("TOTAL",10))
			forall (t in TIME)
				write(strfmt(t,7))
			writeln
			writeln((60+getsize(TIME)*7)*"-")
			write(strfmt(p,40), strfmt("CAPA",10), strfmt(sum(l in line, t in TIME) CELLHOUR(l,t),10,1))
			forall (t in TIME)
				write(strfmt(sum(l in line) CELLHOUR(l,t),7,1))
			writeln
			write(strfmt("",40), strfmt("used",10),
				strfmt((sum(d in dem_new+dem_fix, l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600,10,1))
			forall (t in TIME)
				write(strfmt((sum(d in dem_new+dem_fix, l in DEM_LINE(d) | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600,7,1))
			writeln
			write(strfmt("",40), strfmt("util%",10),
				strfmt(if(sum(l in line, t in TIME) CELLHOUR(l,t) <= ZEROVALUE, 0,
				100*(sum(d in dem_new+dem_fix, l in DEM_LINE(d), t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600/sum(l in line, t in TIME) CELLHOUR(l,t)),10,1))
			forall (t in TIME)
				write(strfmt(if(sum(l in line) CELLHOUR(l,t) <= ZEROVALUE, 0,
					100*(sum(d in dem_new+dem_fix, l in DEM_LINE(d) | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600/sum(l in line) CELLHOUR(l,t)),7,1))
			writeln
			forall (l in line | sum(month in MONTH) CELLNOM(l,month) > ZEROVALUE) do
				writeln((60+getsize(TIME)*7)*"-")
				write(strfmt(l,40), strfmt("CAPA",10), strfmt(sum(t in TIME) CELLHOUR(l,t),10,1))
				forall (t in TIME)
					write(strfmt(CELLHOUR(l,t),7,1))
				writeln
				write(strfmt("",40), strfmt("used",10),
					strfmt((sum(d in dem_new+dem_fix, t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600,10,1))
				forall (t in TIME)
					write(strfmt((sum(d in dem_new+dem_fix | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600,7,1))
				writeln
				write(strfmt("",40), strfmt("util%",10),
					strfmt(if(sum(t in TIME) CELLHOUR(l,t) <= ZEROVALUE, 0,
					100*(sum(d in dem_new+dem_fix, t in TIME | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600/sum(t in TIME) CELLHOUR(l,t)),10,1))
				forall (t in TIME)
					write(strfmt(if(CELLHOUR(l,t) <= ZEROVALUE, 0,
						100*(sum(d in dem_new+dem_fix | RPT_CELL(d,l,t)>ZEROVALUE) CELLCONSUME(d,l)*RPT_CELL(d,l,t)/DEM_CELLQTY(d))/3600/CELLHOUR(l,t)),7,1))
				writeln
			end-do
			writeln
			writeln("P_", p, "> NO_CELL at time ", gettime)
			forall (cc as counter, d in dem_new | sum(l in DEM_LINE(d), t in TIME) getsol(ifcellwork(d,l,t)) <= ZEROVALUE) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 200*"-"+"\n"), strfmt("DEM",100), strfmt("VALIDITY",10), strfmt("EPST",10), strfmt("ARRAYQTY",10), strfmt("arraywork",10),
					strfmt("ARRAY_LT",10), strfmt("CELLQTY",10), strfmt("cellwork",10), strfmt("CELL_LT",10), strfmt("LPET",10), strfmt("LASTVALID",10), "\n", 200*"-")
				end-if
				writeln(strfmt(d,100), strfmt(if(DEM_EPST(d)+if(DEM_ARRAYQTY(d)>ZEROVALUE,ARRAYLEADTIME(d,p),0)+CELLLEADTIME(d,p)-1>DEM_LPET(d), "INVALID", ""),10),
						strfmt(DEM_EPST(d),10),
						if(DEM_ARRAYQTY(d)>ZEROVALUE, strfmt(DEM_ARRAYQTY(d),10), strfmt("",10)),
						strfmt(sum(t in TIME) getsol(arraywork(d,t)),10),
						if(DEM_ARRAYQTY(d)>ZEROVALUE, strfmt(ARRAYLEADTIME(d,p),10), strfmt("",10)),
						strfmt(DEM_CELLQTY(d),10), strfmt(sum(l in DEM_LINE(d), t in TIME) getsol(cellwork(d,l,t)),10),
						strfmt(CELLLEADTIME(d,p),10), strfmt(DEM_LPET(d),10),
						strfmt(DEM_EPST(d)+if(DEM_ARRAYQTY(d)>ZEROVALUE,ARRAYLEADTIME(d,p),0)+CELLLEADTIME(d,p)-1,10))
			end-do
			writeln
			writeln("P_", p, "> ARRAY ifarraywork violation at time ", gettime)
			
			forall (cc as counter, d in dem_new, t in TIME | (RPT_ARRAY(d,p,t) <= ZEROVALUE and getsol(ifarraywork(d,t)) > ZEROVALUE) or
					(RPT_ARRAY(d,p,t) > ZEROVALUE and getsol(ifarraywork(d,t)) <= ZEROVALUE) or
					(ZEROVALUE < getsol(ifarraywork(d,t)) and getsol(ifarraywork(d,t)) < 1-ZEROVALUE)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 150*"-"+"\n"), strfmt("DEM",100), strfmt("PLANT",20), strfmt("TIME",10), strfmt("arraywork",10), strfmt("ifarray",10), "\n", 150*"-")
				end-if
				writeln(strfmt(d,100), strfmt(p,20), strfmt(t,10), "\t", RPT_ARRAY(d,p,t), "\t", getsol(ifarraywork(d,t)))
			end-do
			writeln
			writeln("P_", p, "> ARRAY one plant violation at time ", gettime)
			
			forall (cc as counter, d in dem_new | DEM_ARRAYQTY(d) > ZEROVALUE and count(p2 in PLANT | sum(t in TIME) RPT_ARRAY(d,p2,t) > ZEROVALUE)>1) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 130*"-"+"\n"), strfmt("DEM",100), strfmt("PLANT",20), strfmt("SUM",10), "\n", 130*"-")
				end-if
				forall (cc2 as counter, p2 in PLANT | sum(t in TIME) RPT_ARRAY(d,p2,t) > ZEROVALUE)
				writeln(strfmt(if(cc2=1,d,""),100), strfmt(p2,20), "\t", sum(t in TIME) RPT_ARRAY(d,p2,t))
			end-do
			writeln
			writeln("P_", p, "> CELL ifcellwork violation at time ", gettime)
		
			forall (cc as counter, d in dem_new, l in DEM_LINE(d), t in TIME | (RPT_CELL(d,l,t) <= ZEROVALUE and getsol(ifcellwork(d,l,t)) > ZEROVALUE) or
					(RPT_CELL(d,l,t) > ZEROVALUE and getsol(ifcellwork(d,l,t)) <= ZEROVALUE) or
					(ZEROVALUE < getsol(ifcellwork(d,l,t)) and getsol(ifcellwork(d,l,t)) < 1-ZEROVALUE)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 150*"-"+"\n"), strfmt("DEM",100), strfmt("LINE",20), strfmt("TIME",10), strfmt("value1",10), strfmt("value2",10), "\n", 150*"-")
				end-if
				writeln(strfmt(d,100), strfmt(l,20), strfmt(t,10), "\t", RPT_CELL(d,l,t), "\t", getsol(ifcellwork(d,l,t)))
			end-do
			writeln
			writeln("P_", p, "> CELL one line violation at time ", gettime)
		
			forall (cc as counter, d in dem_new | DEM_CELLQTY(d) > ZEROVALUE and count(l in DEM_LINE(d) | sum(t in TIME) RPT_CELL(d,l,t) > ZEROVALUE)>1) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 130*"-"+"\n"), strfmt("DEM",100), strfmt("LINE",20), strfmt("SUM",10), "\n", 130*"-")
				end-if
				forall (cc as counter, l in DEM_LINE(d) | sum(t in TIME) RPT_CELL(d,l,t) > ZEROVALUE)
					writeln(strfmt(if(cc=1,d,""),100), strfmt(l,20), "\t", sum(t in TIME) RPT_CELL(d,l,t))
			end-do
			writeln
			writeln("P_", p, "> ARRAY and CELL quantity violation at time ", gettime)

			forall (cc as counter, d in dem_new |  DEM_ARRAYQTY(d) > ZEROVALUE and abs(sum(t in TIME) RPT_ARRAY(d,p,t) - sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) -
					(DEM_ARRAYQTY(d) - DEM_CELLQTY(d)) * getsol(ifarrayplant(d))) > ZEROVALUE) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 140*"-"+"\n"), strfmt("DEM",100), strfmt("ARRAYQTY",10), strfmt("CELLQTY",10), strfmt("arraywork",10), strfmt("cellwork",10), "\n", 140*"-")
				end-if
				writeln(strfmt(d,100), strfmt(DEM_ARRAYQTY(d),10,2), strfmt(DEM_CELLQTY(d),10,2),
						"\t", sum(t in TIME) RPT_ARRAY(d,p,t), "\t", sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t))
			end-do
			writeln
			writeln("P_", p, "> demand completeness violation at time ", gettime)

			forall (cc as counter, d in dem_new | DEM_CELLQTY(d) > ZEROVALUE and
					sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > ZEROVALUE and
					abs(DEM_CELLQTY(d) - sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)) > ZEROVALUE) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 120*"-"+"\n"), strfmt("DEM",100), strfmt("CELLQTY",10), strfmt("cellwork",10), "\n", 120*"-")
				end-if
				writeln(strfmt(d,100), "\t", DEM_CELLQTY(d), "\t", sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t))
			end-do
			writeln

			writeln("P_", p, "> ARRAY production limit violation at time ", gettime)
			forall (cc as counter, r in RLIMIT | LIMIT_PROCESS(r) = _ARRAY and LIMIT_PLANT(r) = p and
					sum(d in dem_new, t in TIME | DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_ARRAY(d,p,t) > LIMIT_QTY(r)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 40*"-"+"\n"), strfmt("PRODUCTIONLIMIT",20), strfmt("ARRAYQTY",10), strfmt("arraywork",10), "\n", 40*"-")
				end-if
				writeln(strfmt(LIMIT_NAME(r),20), "\t", LIMIT_QTY(r), "\t",
					sum(d in dem_new, t in TIME | DEM_ARRAYITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_ARRAY(d,p,t))
			end-do
			writeln
			writeln("P_", p, "> CELL production limit violation at time ", gettime)
		
			forall (cc as counter, r in RLIMIT | LIMIT_PROCESS(r) = _CELL and LIMIT_PLANT(r) = p and
					sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_CELL(d,l,t) > LIMIT_QTY(r)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 40*"-"+"\n"), strfmt("PRODUCTIONLIMIT",20), strfmt("CELLQTY",10), strfmt("cellwork",10), "\n", 40*"-")
				end-if
				writeln(strfmt(LIMIT_NAME(r),20), "\t", LIMIT_QTY(r), "\t",
						sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_CELLITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_CELL(d,l,t))
			end-do
			writeln
			writeln("P_", p, "> ARRAY feasibility violation at time ", gettime)
			
			forall (cc as counter, d in dem_new | DEM_ARRAYQTY(d) > 0 and sum(t in TIME) RPT_ARRAY(d,p,t) > 0 and
					abs(DEM_ARRAYQTY(d)-sum(t in TIME) RPT_ARRAY(d,p,t)) > 0) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 130*"-"+"\n"), strfmt("DEM",100), strfmt("ARRAYQTY",10), strfmt("arraywork",10), strfmt("diff",10), "\n", 130*"-")
				end-if
				writeln(strfmt(d,100), "\t", DEM_ARRAYQTY(d), "\t", sum(t in TIME) RPT_ARRAY(d,p,t), "\t", abs(DEM_ARRAYQTY(d)-sum(t in TIME) RPT_ARRAY(d,p,t)))
			end-do
			writeln
			writeln("P_", p, "> CELL feasibility violation at time ", gettime)
			
			forall (cc as counter, d in dem_new | DEM_CELLQTY(d) > 0 and sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t) > 0 and
					abs(DEM_CELLQTY(d)-sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)) > 0) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 130*"-"+"\n"), strfmt("DEM",100), strfmt("CELLQTY",10), strfmt("cellwork",10), strfmt("diff",10), "\n", 130*"-")
				end-if
				writeln(strfmt(d,100), "\t", DEM_CELLQTY(d), "\t", sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t), "\t", abs(DEM_CELLQTY(d)-sum(l in DEM_LINE(d), t in TIME) RPT_CELL(d,l,t)))
			end-do
			writeln
			writeln("P_", p, "> ARRAY fix violation at time ", gettime)
			
			forall (cc as counter, d in dem_fix, t in TIME | ARRAYFIX(d,p,t) > ZEROVALUE and
					(RPT_ARRAY(d,p,t) < ARRAYFIX(d,p,t)-ZEROVALUE or ARRAYFIX(d,p,t)+ZEROVALUE<RPT_ARRAY(d,p,t))) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 170*"-"+"\n"), strfmt("DEM",100), strfmt("PLANT",40), strfmt("TIME",10), strfmt("FIX",10), strfmt("qty",10), "\n", 170*"-")
				end-if
				writeln(strfmt(d,100), strfmt(p,40), strfmt(t,10), strfmt(ARRAYFIX(d,p,t),10), strfmt(RPT_ARRAY(d,p,t),10))
			end-do
			writeln
			writeln("P_", p, "> CELL fix violation at time ", gettime)
			
			forall (cc as counter, d in dem_fix, l in DEM_LINE(d), t in TIME | CELLFIX(d,l,t) > ZEROVALUE and
					(RPT_CELL(d,l,t) < CELLFIX(d,l,t)-ZEROVALUE or CELLFIX(d,l,t)+ZEROVALUE<RPT_CELL(d,l,t))) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 170*"-"+"\n"), strfmt("DEM",100), strfmt("LINE",40), strfmt("TIME",10), strfmt("FIX",10), strfmt("qty",10), "\n", 170*"-")
				end-if
				writeln(strfmt(d,100), strfmt(l,40), strfmt(t,10), strfmt(CELLFIX(d,l,t),10), strfmt(RPT_CELL(d,l,t),10))
			end-do
			writeln
		else
			writeln("No solution found at time ", gettime)
			writeln
		end-if
	end-do
	end-procedure

	procedure solve_module(dem_new:set of string, dem_fix:set of string, s:integer)
	with model_module(s) do
		declarations
			modulework: dynamic array(dem_new,MODULELINE,TIME) of mpvar
			ifmodulework: dynamic array(dem_new,MODULELINE,TIME) of mpvar
			ifmoduleitem: dynamic array(MODULELINE,MODULEITEM) of mpvar
			ifmoduleitemgroup: dynamic array(MODULELINE,MODULEITEMGROUP) of mpvar
			ifdemand: dynamic array(dem_new) of mpvar
			close: array(dem_new) of mpvar
			ModuleWorkQty: dynamic array(dem_new) of linctr
			ModuleNotSplitLine: dynamic array(dem_new,TIME) of linctr
			ModuleNotSplitTime: dynamic array(dem_new,MODULELINE) of linctr
			CapaModule: dynamic array(MODULELINE,TIME) of linctr
			ModuleWorkMax: dynamic array(dem_new,MODULELINE,TIME) of linctr
			ModuleWorkMin: dynamic array(dem_new,MODULELINE,TIME) of linctr
			IfDemandMax: dynamic array(dem_new) of linctr
			IfDemandMin: dynamic array(dem_new) of linctr
			ModuleItemMax: dynamic array(MODULELINE,MODULEITEM) of linctr
			ModuleItemMin: dynamic array(MODULELINE,MODULEITEM) of linctr
			ModuleItemGroupMax: dynamic array(MODULELINE,MODULEITEMGROUP) of linctr
			ModuleItemGroupMin: dynamic array(MODULELINE,MODULEITEMGROUP) of linctr
			ModuleClosenessEarly: dynamic array(dem_new) of linctr
			ModuleClosenessLate: dynamic array(dem_new) of linctr
			ProdLimitModule: dynamic array(RLIMIT) of linctr
			SimLimitModule: dynamic array(PLANT,MODULERES,TIME) of linctr
			LineBlockModule: dynamic array(MODULELINE,MODULEITEM,TIME) of linctr
			maxObjFulfill: linctr
			maxObjPriority: linctr
			maxObjLinePriority: linctr
			minObjItem: linctr
			minObjItemgroup: linctr
			maxObjEarlyProd: linctr
			maxObjOntime: linctr
			minObjCloseness: linctr
			maxObj: linctr
			QTYMIN, MODULEMAX: real
			startclock: real
			n_target, n_achieve: integer
			qty_target, qty_achieve: real
			PRIO_TOTAL: array(RPRIO) of real
		end-declarations
		
		display_loghead("Optimization model_module ( STAGE " + s + " )")
		startclock := gettime
		writeln("M_", strfmt(s,0), "> Optimizer started at time ", gettime)
		
		setparam("XPRS_VERBOSE", true)
		setparam("XPRS_LOADNAMES", true)
		setparam("XPRS_MAXTIME", MAXTIME)
		setparam("XPRS_MAXNODE", MAXNODE)
		setparam("XPRS_MIPRELSTOP", MIPRELSTOP)
		
		QTYMIN := 1
		MODULEMAX := sum(d in dem_new) DEM_MODULEQTY(d)
		writeln("M_", strfmt(s,0), "> QTYMIN ", QTYMIN, " MODULEMAX ", MODULEMAX)
		writeln
		forall (d in dem_new, l in DEM_LINE(d) | DEM_MODULEQTY(d) > ZEROVALUE and DEM_MODULEITEM(d) in MODULECONF(l)) do
			forall (t in TIME | MODULENOM(l,TIME_MONTH(t)) > ZEROVALUE and MODULETACT(l,DEM_MODULEITEM(d),TIME_MONTH(t)) > ZEROVALUE and
					DEM_EPST(d) <= t and t <= DEM_LPET(d) and
					t+MODULELEADTIME(d,MODULELINE_PLANT(l))-1 <= DEM_LPET(d)) do
				create(modulework(d,l,t))
				if IS_INTEGRAL_WORK then
					modulework(d,l,t) is_integer
				end-if
				create(ifmodulework(d,l,t)); ifmodulework(d,l,t) is_binary
			end-do
		end-do
		writeln("M_", strfmt(s,0), "> ", getsize(modulework), " modulework created at time ", gettime)
		
		forall (l in MODULELINE, i in MODULECONF(l)) do
			create(ifmoduleitem(l,i)); ifmoduleitem(l,i) is_binary
		end-do
		
		forall (l in MODULELINE, ig in MODULEITEMGROUP) do
			create(ifmoduleitemgroup(l,ig)); ifmoduleitemgroup(l,ig) is_binary
		end-do
		
		forall (d in dem_new | IS_COMPLETE_DEMAND) do
			create(ifdemand(d)); ifdemand(d) is_binary
		end-do
		
		forall (d in dem_new)
			if IS_COMPLETE_DEMAND then
				ModuleWorkQty(d) := sum(l in DEM_LINE(d), t in TIME | exists(modulework(d,l,t))) modulework(d,l,t) = DEM_MODULEQTY(d) * ifdemand(d)
			else
				ModuleWorkQty(d) := sum(l in DEM_LINE(d), t in TIME | exists(modulework(d,l,t))) modulework(d,l,t) <= DEM_MODULEQTY(d)
			end-if
		writeln("M_", strfmt(s,0), "> ", getsize(ModuleWorkQty), " ModuleWorkQty linctr generated at time ", gettime)
		
		forall (d in dem_new, t in TIME | DEM_MODULEQTY(d) > ZEROVALUE and IS_MODLINE_SPLIT = false)
			ModuleNotSplitLine(d,t) := sum(l in DEM_LINE(d) | exists(ifmodulework(d,l,t))) ifmodulework(d,l,t) <= 1
		writeln("M_", strfmt(s,0), "> ", getsize(ModuleNotSplitLine), " ModuleNotSplitLine linctr generated at time ", gettime)
		
		forall (d in dem_new, l in DEM_LINE(d) | DEM_MODULEQTY(d) > ZEROVALUE and IS_MODTIME_SPLIT = false)
			ModuleNotSplitTime(d,l) := sum(t in TIME | exists(ifmodulework(d,l,t))) ifmodulework(d,l,t) <= 1
		writeln("M_", strfmt(s,0), "> ", getsize(ModuleNotSplitTime), " ModuleNotSplitTime linctr generated at time ", gettime)
		
		forall (l in MODULELINE, t in TIME | MODULENOM(l,TIME_MONTH(t)) > ZEROVALUE)
			CapaModule(l,t) := sum(d in dem_new | exists(modulework(d,l,t))) MODULETACT(l,DEM_MODULEITEM(d),TIME_MONTH(t))*modulework(d,l,t) <=
								maxlist(0, MODULEHOUR(l,t)*3600 - sum(d in dem_fix | DEM_MODULEQTY(d)>ZEROVALUE) MODULETACT(l,DEM_MODULEITEM(d),TIME_MONTH(t))*RPT_MODULE(d,l,t))
		writeln("M_", strfmt(s,0), "> ", getsize(CapaModule), " CapaModule linctr generated at time ", gettime)
		
		forall (d in dem_new, l in DEM_LINE(d), t in TIME | exists(ifmodulework(d,l,t))) do
			ModuleWorkMax(d,l,t) := modulework(d,l,t) <= DEM_MODULEQTY(d) * ifmodulework(d,l,t)
			ModuleWorkMin(d,l,t) := modulework(d,l,t) >= DEM_MINQTY(d) * ifmodulework(d,l,t)
		end-do
		writeln("M_", strfmt(s,0), "> ", 2*getsize(ModuleWorkMax), " ModuleWork linctr generated at time ", gettime)
		
		forall (d in dem_new | exists(ifdemand(d))) do
			IfDemandMax(d) := sum(l in DEM_LINE(d), t in TIME | exists(modulework(d,l,t))) modulework(d,l,t) <= DEM_MODULEQTY(d) * ifdemand(d)
			IfDemandMin(d) := sum(l in DEM_LINE(d), t in TIME | exists(modulework(d,l,t))) modulework(d,l,t) >= QTYMIN * ifdemand(d)
		end-do
		writeln("M_", strfmt(s,0), "> ", 2*getsize(IfDemandMax), " IfDemand linctr generated at time ", gettime)

		forall (l in MODULELINE, i in MODULECONF(l) | exists(ifmoduleitem(l,i))) do
			ModuleItemMax(l,i) := sum(d in dem_new, t in TIME | exists(modulework(d,l,t)) and DEM_MODULEITEM(d)=i) modulework(d,l,t) <= MODULEMAX * ifmoduleitem(l,i)
			ModuleItemMin(l,i) := sum(d in dem_new, t in TIME | exists(modulework(d,l,t)) and DEM_MODULEITEM(d)=i) modulework(d,l,t) >= QTYMIN * ifmoduleitem(l,i)
		end-do
		writeln("M_", strfmt(s,0), "> ", 2*getsize(ModuleItemMax), " ModuleItem linctr generated at time ", gettime)

		forall (l in MODULELINE, ig in MODULEITEMGROUP | exists(ifmoduleitemgroup(l,ig))) do
			ModuleItemGroupMax(l,ig) := sum(d in dem_new, t in TIME | exists(modulework(d,l,t)) and MODULEITEM_GROUP(DEM_MODULEITEM(d))=ig) modulework(d,l,t) <= MODULEMAX * ifmoduleitemgroup(l,ig)
			ModuleItemGroupMin(l,ig) := sum(d in dem_new, t in TIME | exists(modulework(d,l,t)) and MODULEITEM_GROUP(DEM_MODULEITEM(d))=ig) modulework(d,l,t) >= QTYMIN * ifmoduleitemgroup(l,ig)
		end-do
		writeln("M_", strfmt(s,0), "> ", 2*getsize(ModuleItemGroupMax), " ModuleItemGroup linctr generated at time ", gettime)

		forall (d in dem_new | DEM_MODULEQTY(d) > ZEROVALUE) do
			ModuleClosenessEarly(d) := close(d) >= DEM_DUETIME(d) - sum(l in DEM_LINE(d), t in TIME) (t+MODULELEADTIME(d,MODULELINE_PLANT(l))-1)*ifmodulework(d,l,t)
			ModuleClosenessLate(d) := close(d) >= sum(l in DEM_LINE(d), t in TIME) (t+MODULELEADTIME(d,MODULELINE_PLANT(l))-1)*ifmodulework(d,l,t) - DEM_DUETIME(d)
		end-do
		writeln("M_", strfmt(s,0), "> ", 2*getsize(ModuleClosenessEarly), " ModuleCloseness linctr generated at time ", gettime)

		forall (r in RLIMIT | LIMIT_PROCESS(r) = _MODULE)
			ProdLimitModule(r) := sum(d in dem_new, l in DEM_LINE(d), t in TIME | l in PLANT_MODULELINE(LIMIT_PLANT(r)) and DEM_MODULEITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) modulework(d,l,t) <=
								maxlist(0, LIMIT_QTY(r) - sum(d in dem_fix, l in DEM_LINE(d), t in TIME | l in PLANT_MODULELINE(LIMIT_PLANT(r)) and DEM_MODULEITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r) <= t and t <= LIMIT_ENDTIME(r)) RPT_MODULE(d,l,t))
		writeln("M_", strfmt(s,0), "> ", getsize(ProdLimitModule), " ProdLimitModule linctr generated at time ", gettime)
		
		forall (p in PLANT, r in MODULERES, t in TIME | sum(g in MODULEGROUP) MODULERES_LIMIT(p,r,g,t) > ZEROVALUE)
			SimLimitModule(p,r,t) := sum(g in MODULEGROUP, d in dem_new, l in DEM_LINE(d) | MODULERES_LIMIT(p,r,g,t)>ZEROVALUE and MODULEITEM_MODULEGROUP(DEM_MODULEITEM(d))=g) modulework(d,l,t)/MODULERES_LIMIT(p,r,g,t) <=
									maxlist(0, 1 - sum(g in MODULEGROUP, d in dem_fix, l in DEM_LINE(d) | MODULERES_LIMIT(p,r,g,t)>ZEROVALUE and MODULEITEM_MODULEGROUP(DEM_MODULEITEM(d))=g) RPT_MODULE(d,l,t)/MODULERES_LIMIT(p,r,g,t))
		writeln("M_", strfmt(s,0), "> ", getsize(SimLimitModule), " SimLimitModule linctr generated at time ", gettime)
		
		forall (l in MODULELINE, i in MODULECONF(l), t in TIME | MODULEBLOCK(l,i,t))
			LineBlockModule(l,i,t) := sum(d in dem_new | DEM_MODULEITEM(d) = i) modulework(d,l,t) <= 0
		writeln("M_", strfmt(s,0), "> ", getsize(LineBlockModule), " LineBlockModule linctr generated at time ", gettime)
		
		maxObjFulfill := sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(modulework(d,l,t))) modulework(d,l,t)
		maxObjPriority := sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(modulework(d,l,t))) DEM_WEIGHT(d)*modulework(d,l,t)
		maxObjLinePriority := sum(d in dem_new, l in DEM_LINE(d), t in TIME | exists(modulework(d,l,t))) MODULEWEIGHT(l,DEM_MODULEITEM(d))*modulework(d,l,t)
		minObjItem := sum(l in MODULELINE, i in MODULECONF(l) | exists(ifmoduleitem(l,i))) ifmoduleitem(l,i)
		minObjItemgroup := sum(l in MODULELINE, ig in MODULEITEMGROUP | exists(ifmoduleitemgroup(l,ig))) ifmoduleitemgroup(l,ig)
		maxObjEarlyProd := 0.01*sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_MODULEQTY(d) > ZEROVALUE and exists(ifmodulework(d,l,t))) (getsize(TIME)-t)*modulework(d,l,t)
		maxObjOntime := sum(d in dem_new, l in DEM_LINE(d), t in TIME | DEM_MODULEQTY(d) > ZEROVALUE and exists(ifmodulework(d,l,t)) and t+MODULELEADTIME(d,MODULELINE_PLANT(l))-1 <= DEM_DUETIME(d)) modulework(d,l,t)
		minObjCloseness := sum(d in dem_new) close(d)
		maxObj := WEIGHT_FULFILL*maxObjFulfill + WEIGHT_PRIORITY*maxObjPriority + WEIGHT_LINEPRIORITY*maxObjLinePriority +
					- WEIGHT_ITEM*minObjItem - WEIGHT_ITEMGROUP*minObjItemgroup +
					WEIGHT_EARLYPROD*maxObjEarlyProd + WEIGHT_ONTIME*maxObjOntime - WEIGHT_CLOSENESS*minObjCloseness
		writeln("M_", strfmt(s,0), "> objectives generated at time ", gettime)
		
		maximize (maxObj)
		
		RPT_MODULE_TIME(s) += (gettime - startclock)
		RPT_MODULE_NODE(s) += getparam("XPRS_NODES")
		
		if getparam("XPRS_mipstatus") = XPRS_MIP_LP_OPTIMAL then
			writeln("MIP solution status is MIP_LP_OPTIMAL")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_LP_NOT_OPTIMAL then
			writeln("MIP solution status is MIP_LP_NOT_OPTIMAL")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_OPTIMAL then
			writeln("MIP solution status is MIP_OPTIMAL")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_SOLUTION then
			writeln("MIP solution status is MIP_SOLUTION")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_INFEAS then
			writeln("MIP solution status is MIP_INFEAS")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_NO_SOL_FOUND then
			writeln("MIP solution status is MIP_NO_SOL_FOUND")
		elif getparam("XPRS_mipstatus") = XPRS_MIP_NOT_LOADED then
			writeln("MIP solution status is MIP_NOT_LOADED")
		end-if
		
		if getparam("XPRS_mipstatus") in {XPRS_OPT, XPRS_MIP_SOLUTION, XPRS_MIP_OPTIMAL} then
			writeln("Solution found at time ", gettime)
			writeln
			RPT_MODULE_STATUS(s) := 0
			RPT_MODULE_GAP(s) := if(getobjval > ZEROVALUE, maxlist(RPT_MODULE_GAP(s), (getparam("XPRS_BESTBOUND")-getobjval)/getparam("XPRS_BESTBOUND")*100), 0)
			RPT_MODULE_OBJVAL(s) := getobjval
			RPT_MODULE_BESTBOUND(s) := RPT_MODULE_OBJVAL(s) / (1-RPT_MODULE_GAP(s)/100)
			RPT_MODULE_OBJ_FULFILL(s) := getsol(maxObjFulfill)
			RPT_MODULE_OBJ_PRIORITY(s) := getsol(maxObjPriority)
			RPT_MODULE_OBJ_LINEWEIGHT(s) := sum(d in dem_new, l in DEM_LINE(d), t in TIME | getsol(modulework(d,l,t)) > ZEROVALUE) MODULEWEIGHT(l,DEM_MODULEITEM(d))*getsol(modulework(d,l,t))
			RPT_MODULE_OBJ_LINEPRIORITY(s) := sum(d in dem_new, l in DEM_LINE(d), t in TIME | getsol(modulework(d,l,t)) > ZEROVALUE) MODULEPRIORITY(l,DEM_MODULEITEM(d))*getsol(modulework(d,l,t))
			RPT_MODULE_OBJ_ITEM(s) := getsol(minObjItem)
			RPT_MODULE_OBJ_ITEMGROUP(s) := getsol(minObjItemgroup)
			RPT_MODULE_OBJ_SEQUENCE(s) := 0
			RPT_MODULE_OBJ_EARLYPROD(s) := getsol(maxObjEarlyProd)
			RPT_MODULE_OBJ_ONTIME(s) := getsol(maxObjOntime)
			RPT_MODULE_OBJ_CLOSENESS(s) := getsol(minObjCloseness)
			forall (d in dem_new, l in DEM_LINE(d), t in TIME | exists(modulework(d,l,t)) and getsol(modulework(d,l,t)) > ZEROVALUE)
				RPT_MODULE(d,l,t) := if(abs(DEM_MODULEQTY(d) - getsol(modulework(d,l,t))) <= ZEROVALUE, DEM_MODULEQTY(d), getsol(modulework(d,l,t)))
			forall (l in MODULELINE, i in MODULECONF(l) | exists(ifmoduleitem(l,i)) and getsol(ifmoduleitem(l,i)) > ZEROVALUE)
				RPT_MODULEIFITEM(l) += 1
			forall (l in MODULELINE, ig in MODULEITEMGROUP | exists(ifmoduleitemgroup(l,ig)) and getsol(ifmoduleitemgroup(l,ig)) > ZEROVALUE)
				RPT_MODULEIFITEMGROUP(l) += 1

			writeln("M_", strfmt(s,0), "> Objectives at time ", gettime)
			writeln(strfmt("OBJECTIVE",20), strfmt("DIR",10), strfmt("VALUE",10), strfmt("WEIGHT",10), strfmt("WEIGHTED",10), "\n", 60*"-")
			writeln(strfmt("maxObjFulfill",20), strfmt("Max",10), strfmt(getsol(maxObjFulfill),10,0),
					strfmt(WEIGHT_FULFILL,10), strfmt(WEIGHT_FULFILL*getsol(maxObjFulfill),10,0))
			writeln(strfmt("maxObjPriority",20), strfmt("Max",10), strfmt(getsol(maxObjPriority),10,0),
					strfmt(WEIGHT_PRIORITY,10), strfmt(WEIGHT_PRIORITY*getsol(maxObjPriority),10,0))
			writeln(strfmt("maxObjLineWeight",20), strfmt("Max",10), strfmt(RPT_MODULE_OBJ_LINEWEIGHT(s),10,0),
					strfmt(WEIGHT_LINEPRIORITY,10), strfmt(WEIGHT_LINEPRIORITY*RPT_MODULE_OBJ_LINEWEIGHT(s),10,0))
			writeln(strfmt("minObjLinePriority",20), strfmt("Min",10), strfmt(RPT_MODULE_OBJ_LINEPRIORITY(s),10,0),
					strfmt(WEIGHT_LINEPRIORITY,10), strfmt(WEIGHT_LINEPRIORITY*RPT_MODULE_OBJ_LINEPRIORITY(s),10,0))
			writeln(strfmt("minObjItem",20), strfmt("Min",10), strfmt(getsol(minObjItem),10,0),
					strfmt(WEIGHT_ITEM,10), strfmt(WEIGHT_ITEM*getsol(minObjItem),10,0))
			writeln(strfmt("minObjItemgroup",20), strfmt("Min",10), strfmt(getsol(minObjItemgroup),10,0),
					strfmt(WEIGHT_ITEMGROUP,10), strfmt(WEIGHT_ITEMGROUP*getsol(minObjItemgroup),10,0))
			writeln(strfmt("maxObjEarlyProd",20), strfmt("Max",10), strfmt(getsol(maxObjEarlyProd),10,0),
					strfmt(WEIGHT_EARLYPROD,10), strfmt(WEIGHT_EARLYPROD*getsol(maxObjEarlyProd),10,0))
			writeln(strfmt("maxObjOntime",20), strfmt("Max",10), strfmt(getsol(maxObjOntime),10,0),
					strfmt(WEIGHT_ONTIME,10), strfmt(WEIGHT_ONTIME*getsol(maxObjOntime),10,0))
			writeln(strfmt("minObjCloseness",20), strfmt("Min",10), strfmt(getsol(minObjCloseness),10,0),
					strfmt(WEIGHT_CLOSENESS,10), strfmt(WEIGHT_CLOSENESS*getsol(minObjCloseness),10,0))
			writeln

			writeln("M_", strfmt(s,0), "> fillrate summary by priority at time ", gettime)

			write(strfmt("TYPE",40), strfmt("TOTAL",10))
			forall (pri in RPRIO)
				write(strfmt(PRIO_END(pri),10,0))
			writeln
			writeln((50+getsize(RPRIO)*10)*"-")
			
			write(strfmt("DEMAND",40), strfmt(sum(d in dem_new) DEM_MODULEQTY(d),10,0))
			forall (pri in RPRIO) do
				PRIO_TOTAL(pri) := sum(d in dem_new | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) DEM_MODULEQTY(d)
				write(strfmt(PRIO_TOTAL(pri),10,0))
			end-do
			writeln
			
			write(strfmt("fill%",40),
				strfmt(if(sum(pri in RPRIO) PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, l in DEM_LINE(d), t in TIME) RPT_MODULE(d,l,t))/(sum(pri in RPRIO) PRIO_TOTAL(pri))*100),10,2))
			forall (pri in RPRIO)
				write(strfmt(if(PRIO_TOTAL(pri) <= ZEROVALUE, 0, (sum(d in dem_new, l in DEM_LINE(d), t in TIME | PRIO_BEGIN(pri)<DEM_PRIO(d) and DEM_PRIO(d)<=PRIO_END(pri)) RPT_MODULE(d,l,t))/PRIO_TOTAL(pri)*100),10,2))
			writeln
			writeln

			writeln("M_", strfmt(s,0), "> MODULE accumulated work summary at time ", gettime)
			
			write(strfmt("LINE",40), strfmt("TYPE",10), strfmt("TOTAL",10))
			forall (t in TIME)
				write(strfmt(t,10))
			writeln
			writeln((60+getsize(TIME)*10)*"-")
			
			write(strfmt("TOTAL",40), strfmt("DEMAND",10), strfmt(sum(d in DEM) DEM_MODULEQTY(d),10,0))
			forall (t in TIME)
				write(strfmt(sum(d in DEM | DEM_DUETIME(d)=t) DEM_MODULEQTY(d),10,0))
			writeln
			
			write(strfmt("",40), strfmt("work",10), strfmt(sum(d in DEM, l in DEM_LINE(d), t in TIME) RPT_MODULE(d,l,t),10,0))
			forall (t in TIME)
				write(strfmt(sum(d in DEM, l in DEM_LINE(d)) RPT_MODULE(d,l,t),10,0))
			writeln
			
			write(strfmt("",40), strfmt("util%",10),
				strfmt(if(sum(l in MODULELINE, t in TIME) MODULEHOUR(l,t) <= ZEROVALUE, 0,
				100*(sum(d in DEM, l in DEM_LINE(d), t in TIME | RPT_MODULE(d,l,t)>ZEROVALUE) MODULETACT(l,DEM_MODULEITEM(d),TIME_MONTH(t))*RPT_MODULE(d,l,t))/3600/sum(l in MODULELINE, t in TIME) MODULEHOUR(l,t)),10,1))
			forall (t in TIME)
				write(strfmt(if(sum(l in MODULELINE) MODULEHOUR(l,t) <= ZEROVALUE, 0,
				100*(sum(d in DEM, l in DEM_LINE(d) | RPT_MODULE(d,l,t)>ZEROVALUE) MODULETACT(l,DEM_MODULEITEM(d),TIME_MONTH(t))*RPT_MODULE(d,l,t))/3600/sum(l in MODULELINE) MODULEHOUR(l,t)),10,1))
			writeln
			writeln
			
			writeln("M_", strfmt(s,0), "> line priority summary at time ", gettime)
		
			writeln(strfmt("TYPE",40), strfmt("VALUE",10), "\n", 50*"-")
			writeln(strfmt("DEMAND QTY",40), strfmt(sum(d in dem_new, l in DEM_LINE(d), t in TIME) RPT_MODULE(d,l,t),10,0))
			writeln(strfmt("line weighted qty",40), strfmt(RPT_MODULE_OBJ_LINEWEIGHT(s),10,0))
			writeln(strfmt("line prioritized qty",40), strfmt(RPT_MODULE_OBJ_LINEPRIORITY(s),10,0))
			writeln
			
			writeln("M_", strfmt(s,0), "> item, itemgroup frequency summary at time ", gettime)
		
			writeln(strfmt("TYPE",40), strfmt("VALUE",10), "\n", 50*"-")
			writeln(strfmt("item frequency",40), strfmt(count(l in MODULELINE, i in MODULECONF(l) | getsol(ifmoduleitem(l,i)) > ZEROVALUE),10,0))
			writeln(strfmt("itemgroup frequency",40), strfmt(count(l in MODULELINE, ig in MODULEITEMGROUP | getsol(ifmoduleitemgroup(l,ig)) > ZEROVALUE),10,0))
			writeln
			
			writeln("M_", strfmt(s,0), "> duedate ontime summary at time ", gettime)
	
			forall (d in dem_new | DEM_MODULEQTY(d) > ZEROVALUE) do
				n_target += 1
				qty_target += DEM_MODULEQTY(d)
				forall (l in DEM_LINE(d), t in TIME | RPT_MODULE(d,l,t)>ZEROVALUE and t+MODULELEADTIME(d,MODULELINE_PLANT(l))-1<=DEM_DUETIME(d)) do
					n_achieve += 1
					qty_achieve += RPT_MODULE(d,l,t)
				end-do
			end-do
			writeln(strfmt("TYPE",40), strfmt("TARGET",10), strfmt("ACHIEVED",10), strfmt("RATE%",10), "\n", 70*"-")
			writeln(strfmt("ontime quantity",40), strfmt(qty_target,10,0), strfmt(qty_achieve,10,0),
					strfmt(if(qty_target<=ZEROVALUE,0, qty_achieve/qty_target*100),10,2))
			writeln
		
			writeln("M_", strfmt(s,0), "> Closeness Summary at time ", gettime)
		
			writeln(strfmt("TYPE",40), strfmt("VALUE",10), "\n", 50*"-")
			writeln(strfmt("closeness",40), strfmt(sum(d in dem_new | DEM_MODULEQTY(d) > ZEROVALUE) getsol(close(d)),10,0))
			writeln
		
			writeln("M_", strfmt(s,0), "> ifmodulework violation at time ", gettime)
			
			forall (cc as counter, d in dem_new, l in DEM_LINE(d), t in TIME | (RPT_MODULE(d,l,t) <= ZEROVALUE and getsol(ifmodulework(d,l,t)) > ZEROVALUE) or
					(RPT_MODULE(d,l,t) > ZEROVALUE and getsol(ifmodulework(d,l,t)) <= ZEROVALUE) or
					(ZEROVALUE < getsol(ifmodulework(d,l,t)) and getsol(ifmodulework(d,l,t)) < 1-ZEROVALUE)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 170*"-"+"\n"), strfmt("DEM",100), strfmt("LINE",40), strfmt("TIME",10), strfmt("RPT",10), strfmt("ifwork",10), "\n", 170*"-")
				end-if
				writeln(strfmt(d,100), strfmt(l,40), strfmt(t,10), "\t", RPT_MODULE(d,l,t), "\t", getsol(ifmodulework(d,l,t)))
			end-do
			writeln
			
			writeln("M_", strfmt(s,0), "> production limit violation at time ", gettime)
			
			forall (cc as counter, r in RLIMIT | LIMIT_PROCESS(r) = _MODULE and
					sum(d in dem_new, l in DEM_LINE(d), t in TIME | l in PLANT_MODULELINE(LIMIT_PLANT(r)) and DEM_MODULEITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_MODULE(d,l,t) > LIMIT_QTY(r)) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 40*"-"+"\n"), strfmt("PRODUCTIONLIMIT",20), strfmt("MODULEQTY",10), strfmt("modulework",10), "\n", 40*"-")
				end-if
				writeln(strfmt(LIMIT_NAME(r),20), "\t", LIMIT_QTY(r), "\t",
						sum(d in dem_new, l in DEM_LINE(d), t in TIME | l in PLANT_MODULELINE(LIMIT_PLANT(r)) and DEM_MODULEITEM(d) in LIMIT_ITEM(r) and LIMIT_STARTTIME(r)<=t and t<=LIMIT_ENDTIME(r)) RPT_MODULE(d,l,t))
			end-do
			writeln
		
			writeln("M_", strfmt(s,0), "> simultaneous resource limit violation at time ", gettime)
			
			forall (cc as counter, p in PLANT, r in MODULERES, t in TIME | sum(g in MODULEGROUP) MODULERES_LIMIT(p,r,g,t) > ZEROVALUE and
					sum(g in MODULEGROUP, d in dem_new, l in DEM_LINE(d) | MODULERES_LIMIT(p,r,g,t)>ZEROVALUE and MODULEITEM_MODULEGROUP(DEM_MODULEITEM(d))=g) RPT_MODULE(d,l,t)/MODULERES_LIMIT(p,r,g,t) > 1+ZEROVALUE) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 80*"-"+"\n"), strfmt("PLANT",20), strfmt("MODULERES",10), strfmt("TIME",10), strfmt("MODULEGROUP",10), strfmt("LIMIT",10), strfmt("qty",10), strfmt("fullrate",10), "\n", 80*"-")
				end-if
				forall (g in MODULEGROUP  | MODULERES_LIMIT(p,r,g,t)>ZEROVALUE)
					writeln(strfmt(p,20), strfmt(r,10), strfmt(t,10), strfmt(g,10), strfmt(MODULERES_LIMIT(p,r,g,t),10),
							strfmt(sum(d in dem_new, l in DEM_LINE(d) | MODULEITEM_MODULEGROUP(DEM_MODULEITEM(d))=g) RPT_MODULE(d,l,t),10),
							strfmt((sum(d in dem_new, l in DEM_LINE(d) | MODULEITEM_MODULEGROUP(DEM_MODULEITEM(d))=g) RPT_MODULE(d,l,t))/MODULERES_LIMIT(p,r,g,t),10))
			end-do
			writeln
		
			writeln("M_", strfmt(s,0), "> module line block violation at time ", gettime)
			
			forall (cc as counter, l in MODULELINE, i in MODULECONF(l), t in TIME | MODULEBLOCK(l,i,t) and sum(d in dem_new | DEM_MODULEITEM(d) = i) RPT_MODULE(d,l,t) > ZEROVALUE) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 80*"-"+"\n"), strfmt("LINE",40), strfmt("ITEM",20), strfmt("TIME",10), strfmt("qty",10), "\n", 80*"-")
				end-if
				writeln(strfmt(l,40), strfmt(i,20), strfmt(t,10), strfmt(sum(d in dem_new | DEM_MODULEITEM(d) = i) RPT_MODULE(d,l,t),10))
			end-do
			writeln
		
			writeln("M_", strfmt(s,0), "> module fix violation at time ", gettime)
		
			forall (cc as counter, d in dem_fix, l in DEM_LINE(d), t in TIME | MODULEFIX(d,l,t) > ZEROVALUE and
					(RPT_MODULE(d,l,t) < MODULEFIX(d,l,t)-ZEROVALUE or MODULEFIX(d,l,t)+ZEROVALUE<RPT_MODULE(d,l,t))) do
				if cc mod 50 = 1 then
					writeln(if(cc=1, 1*"", 170*"-"+"\n"), strfmt("DEM",100), strfmt("LINE",40), strfmt("TIME",10), strfmt("FIX",10), strfmt("qty",10), "\n", 170*"-")
				end-if
				writeln(strfmt(d,100), strfmt(l,40), strfmt(t,10), strfmt(MODULEFIX(d,l,t),10), strfmt(RPT_MODULE(d,l,t),10))
			end-do
			writeln
		else
			writeln("No solution found at time ", gettime)
			writeln
			RPT_MODULE_STATUS(s) := 1
			RPT_MODULE_GAP(s) := 0
			RPT_MODULE_OBJVAL(s) := 0
		end-if
	end-do
	end-procedure

	declarations
		DEM_NEW: set of string
		DEM_FIX: set of string
	end-declarations

	if IS_PANELPLAN then
		prefix_panel
		forall (p in PLANT | if(SAMPLEPLANT={}, true, p in SAMPLEPLANT)) do
			forall (s in STAGE) do
				DEM_NEW := {}
				DEM_FIX := {}
				forall (d in DEM | DEM_PANELPLANT(d) = p)
				if DEM_STAGE(d) < s then
					DEM_FIX += {d}
				elif DEM_STAGE(d) = s then
					DEM_NEW += {d}
				end-if
				solve_panel(DEM_NEW, DEM_FIX, p, PLANT_CELLLINE(p), s, 1)
				solve_panel(DEM_NEW, DEM_FIX, p, PLANT_CELLLINE(p), s, 2)
			end-do
			if IS_IMPROVE_MARGIN then
				DEM_NEW := {}
				DEM_FIX := {}
				forall (d in DEM | DEM_PANELPLANT(d) = p)
					if sum(t in TIME) RPT_ARRAY(d,p,t) > ZEROVALUE or sum(l in PLANT_CELLLINE(p), t in TIME) RPT_CELL(d,l,t) > ZEROVALUE then
						DEM_FIX += {d}
					else
						DEM_NEW += {d}
					end-if
				solve_panelmargin(DEM_NEW, DEM_FIX, p, PLANT_CELLLINE(p))
			end-if
			summarize_panelplant(p)
		end-do
		
		if getsize(SAMPLEPLANT) <> 1 then summarize_panel; write_result; end-if
		summarize_panelspread
		analysis_panel
	elif IS_MODULEPLAN then
		prefix_module
		forall (s in STAGE) do
			DEM_NEW := {}
			DEM_FIX := {}
			forall (d in DEM)
				if DEM_STAGE(d) < s then
					DEM_FIX += {d}
				elif DEM_STAGE(d) = s then
					DEM_NEW += {d}
				end-if
			solve_module(DEM_NEW, DEM_FIX, s)
		end-do
		summarize_module
		write_result
	end-if
	writeln(getmodprop(PROP_NAME), " finished ", gettime, " seconds")
	writeln(getmodprop(PROP_NAME), " terminated ", datetime(SYS_NOW))
	writeln
end-model
